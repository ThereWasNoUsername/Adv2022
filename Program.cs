// See https://aka.ms/new-console-template for more information

using System.ComponentModel.DataAnnotations;
using System.Drawing;
using System.Linq;
using System.Reflection.Metadata.Ecma335;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text.RegularExpressions;
void p1a() {
    var data = @"9524
12618
6755
2121
12876
11330

4029
11446
11571
2683
3454
12411

6226
9901
6735
7602
4045
4643
5047
2329

5576
23361
16052

5523
12113
3128
5978
4683
3458

32135
15179

7380
9715
5985
9547
9207
6882
4407
1688

9175
4868
3374
6053
5304
4585
1344
5036

4807
1180
6655
4572
3864
4674
6759
6861
4273
2387
1085
1598

1807
13594
13712
7385

6607
6858
3872
5554
5802
1174
5234
6082
6672
4180
1491
4111
1721

6508
4569
2836
7992
2876
4464
5023
2920
3794
6274

3229
2998
15582
12963
14718

32390

2517
6446
6777
5881
7923
5523
4904
3018
5737
4826

5911
6152
2479
3949
3427
5924
6432
6746
6878
5884
3309
3674
2026

11177
1872
15245
16212
6512

23534
21079

5725
8219
7284
1011
1903
2835

3194
3712
5969
6069
4264
4616
5424
5382
4772
1908
1707
2222
2778
3712

10329
26374

4180
3086
5044
1980
5636
2776
5399
3898
1353
4864
5504
5631
3373

11290
1294
2117
13739
9724
11236

9653
13620
20041
8914

29248
32773

2316
3761
4458
4592
5963
2118
6079
2024
3928
4745
2965
1748
2824
5740
5189

1307
5004
2336
7721
1757
5155
4671
2734
4884
5549

16255

4892
4077
1163
7588

4887
4197
3782
5889
6735
5729
2783
3170
3062
6874
5479

4352
3701
5794
4775
1622
2128
1063
1009
1702
4405
4455
1304
5133
1374
2677

6261
1307
5579
6582
6098
5375
4876
4747
3285
6389
2660

68718

3578
5102
3755
2031
6961
6433
6081
2957
1770
1280
4229
7081

9388
11343
5178
2164
10275
6054
5742

8550
7983
8330
8883
9575
9300
8453
6367
5770

5374
5460
5590
6433
5785
3128
1194
5369
3032
6351
2210
4725
2942
5483

28182

36912
27721

15006
4561
2828

2120
4019
4685
1360
4315
2733
1546
3986
3071
4308
6705
1480
2075

4452
7034
6770
8934
8125
6333
2856
7908
5145

2068
1714
6972
5061
6633
4180
5603
5186
6986
3112
5696

1164
4408
7118
7230
1636
5958
2070
2091
3158
6631

6888
5446
3132
1888
2668
1529
1568
1901
4708
2815
8079

2394
1604
6133
1886
2648
3636
2998
5510
1422
5184
3436
6317
3481
3109

13992
8555

3038
5447
5010
10502
9033
4127
9385
7438

5561
14448
15742
9477
15244

1824
7913
3167
2770
6853
5049
8970
3980
3792

5263
1495
6398
3191
1787
4516
4528
1984
2209
2937
1917

7093
4995
11710
8145
2509
11002
2329

2772
9223
7429
5951
5211
5390
9636
5015
9576

9143
19336
8940
14860

1615
2033
1853
3334
10998
5591
10429

3400
6270
6159
1199
6841
1411
2272
2298
8236

2641
9002
8338
13253
9830

2121
6314
5463

16712

20041
15769
6691
8310

17869
15266
3313

3453
4166
6214
4735
6756
7020
4624
4679
1779
3429
1133
4630

2207
16017
2824
13752
6355

13493
12177
9701
1146
2421

6461
5774
5822
5873
7594
7653
6871
7934
6083
4111
7399

14561
4204
17338
9054

5551
2880
4587
7339
7793
8194
5359
8702
6846

4827
6451
2666
7916
2321
2258

7352

17612
30650

13845
9073
7678
15430
3256

13079
12502
8332
12919

15980
14653
5439
2880
15145

26007

18376
8663
11423
7152

3832
5843
3919
5658
1615
5840
3009
5725
2639
5239
4380
2298
4618
2586

15785
8518
4131
8614

4718
5897
7178
2031
3409
7218
6794
8699
4119
6928

2129
2231
2489
5616
1467
2225
5657
4127
6286
5359
4725
1819
5550

6079
7050
13912
13912
12870
4966

5974
3386
2793
4898
2975
3865
5974
3655
3838
1822
3322
1610
5610
3243

4090
1110
4663
2618
1587
3417
4401
3837
2593
4503
1746
4797
1821
3502
2592

4955
4020
13061
7532
12446

4084
1491
5988
6646
2061
2083
1761
5146
4656
5620
3959
6133
3161

9795
2854
6539
1197
7913
6560
1912
5636

3964
6541
3226
3536
6335
6956
3656
4149
6859
4609
4456
2856
3395

16002
11740
6583

8056
21295
6331

12521
14781
2837
18442

7673
12780
3682

2104
2166
4813

5722
5243
3506
4961
3587
5584
8571
6724
6901
5278

3464
4099
2514
6217
2209
6501
5950
3218
4821
3121
4106
4451
1228

5147
5877
1170
4801
4153
3710
1673
5553
5992
5173
4277
1451
5158
3766
3191

12693
13232
5554
12330
7602
6490

1168
14381
11380
6522
4822

3956
12204
1708
13838
7704
5066

5436
3448
4345
7430
6934
1717
4553
4683
7091
5718
4289
1140

2321
1291
2159
7409
3502
4266
2190
5307
1971
2217

8168
4475
7287
9416
6264
2691
4551
5109
3286

31132
31889

6154
6665
7026
11383
13857
8357

10312
3810
7818
6172
7615
9201
1937

9067
6897
4655
5091
2824
7062
1336
1835
3831

4839
5218
6044
4868
6466
4237
2814
2210
3365
6128
2713
5229
4600
1466

1225
5350
3013
1102
7614
3002
4451
2059
1843
6158

57499

2273
8394
9347
4833
9001
8823
7674
1882
9235

3759
7106
1671
1596
7855
3616
4858

4966
6050
2267
2082
3664
1812
4412
6457
5080
3280
6407
3124
5993
2142

2728
2912
1566
5990
7139
1082
6536
1213

6118
4821
3134
5633
3091
3618
5465
4116
1577
2776
4592
4923
5812

12233
1056
12928
6106

8177
12942
13879
2729
11070
7560

3359
1950
3396
7128
1724
6590
5952
2255
1022
5923
4381
2670

5619
5474
2892
5214
2677
4596
4314
2790
4749
6478
6865
3755
3747

1888
4764
5673
6832
8312
5569
3874
1831
1742
1953

6154
5064
2106
11402
8462

7116
2820
5625
5143
3055
1554
4279
5644
1908
6292
4492

7544
6590
6098
7178
7354
1570
8934
1544
6880

66910

12946

6226
7319
12112
6817
8025
2668

2630
1137
2881
2123
4994
3215
3315
2353
4031
4151
1609
5278

13286
5182
14123

6100
4344
7043
9434
6107
3579
1697
3166
3414

11329
35988

5631
7749
1074
4825
2650
6835
6433
5946
4203
4514
2944

7860
1341
2546
10857
11814
11301
9280

5318
8457
6221
1419
1715
6222
9581
5606
2293

9296
11898
8802
3804
1796
13910

12885
10836
17345
7449

2666
2481
6683
1783
4880
5339
5075
1043
6314
1440
5100
1647
2095

4698
7755
2595
1730
5954
3714
5023
4167
2202
4679
1165

4431
3109
3055
1713
1848
4118
1730
2280
1079
3688
1569
2995
4061

3757
4427
4747
2214
3723
1434
7512
1878
3167

2122
17054
9678
8169

2437
3160
2215
3949
2996
4494
1615
5174
6019
6055
3186
3229
5248
5656
1847

4314
5032
5345
3719
2918
3847
2708
1834
2603
2200
3822
6052
2997
1540
1846

3626
1064
5420
3228
1444
5662
5600
4544
5177
2309
2186
2638
3164
5703
6079

28701
30412

11849
11080
24418

3926
4456
3783
3058
1752
4944
6732
6587
2578
3490
1730

3862
12513
6788
4010
1427
1098

9313
8444
16375
14666
15215

2819
1623
4195
1981
2908
4730
2621
4136
4824
3588
2979
1583
1776
1845
3772

3668
3119
4402
5814
4507
3147
4834
1171
4102
5458
4930
5098
1284
5117

3889
7447
1031
6800
4884
6483
1577
7164
2778
6216
3167
5458

12710
14353
9583
5759
16081

3156
4905
4799
2502
7230
6169
2350
4196
4384
5939
2889
1349

4978
5247
10881
3833
13656
8822

4063
3379
4073
3091
2733
4759
5051
5605
3114
2039
6049
4568
5013
1991
4239

22021
21472
15888

23871
33564

1475
1319
6422
2086
1101
2435
1661
6011
5927
4798
4770
4860
4821
6438

45424

3704
6982
7230
4807
6677
6131
2698
3048
4914
3656
4707

1883
5114
2366
2220
3239
2574
3754
2711
6984
7464
6208

5881
5964
5999
4260
2501
3387
3112
5323
4895
3715
2183
2900
4867
1975
3961

5874
3960
5490
6056
5222
6205
1153
5491
4156
3921
4369
1195

1540
3601
6238
2433
5286
1272
1567
2425
5797
5222
3213
6021
6519

17672
19343
11461
8143

6489
5442
4307
1773
4716
1220
5407
2997
4763
2629
5102

6014
6309
4072
8155
7481
6771
8686
5980
6754
5761

69172

4781
6068
4342
6091
4340
5890
2973
4214
2884
1782
3622
3240
2185
1947
4634

11595
22943

1583
9915
2518
3285
12248

56794

1266
8056
3268
7231
3018
2774
2415
5377
4227
5428
1113

3527
5534
4501
8409
3396
5553
10346

2931
4457
6108
5058
3393
5132
2076
4461
3353
4568
2182
2493
3285
1592
5370

15869
8031

6349
5106
1725
4758
5364
3316
4235
4813
4421
1682
2133
3691

39362

1243
6663
7560
10078
1589
8782
9184
9149

4761
21813
24493

8335
9413
5100
7001
4090
6375
9420
6864
3263

2101
3950
6076
1739
5749
4174
5849
5463
4750
5934
4202
6119
1588
1637

3545
4228
7420
10436
5854
10021
7383

2430
5591
3145
13825

14058
4268
12789
11917
2470

4661
1018
4383
4852
1090
5644
3953
1204
2819
3500
2749
5615
3939
5118
3128

2882
3718
2670
2190
1495
3551
5497
3264
6484
6199
2011
4157
5896
6046

34056

2090
8624
11777

7414
4519
1108
8667
8481
5032
10813

3466
9107
2058
1813
2236
8430
2923
7801
7506

3315
1937
2698
1647
3083
5874
4801
4649
1311
5306
4655
4981
2325
2130
2261

37135

1831
4702
5322
5424
4620
3951
1275
1074
1767
4751
2512
4367
2623
6175

23083
30515

1765
3327
5205
4124
2834
5524
1945
4393
3958
1021
4989
1142
1960

11170
3970
11159
5081
5508
9043
6180

6216
3861
1281
1935
2128
1550
5869
4139
6307
5320
4740
5970
4039

8019
1455
3994
10337
3779
7604
9614
7636

5463
10532
13499

3967
4866
2889
4428
1896
2064
3350
2802
5240
5626
1206
2169
3757
3481

26031
10122

12480
5566
21219

57426

17286
1875
6596
2739

2182
4147
2513
4571
1569
2946
1972
3032
3580
5820
4722
3358
4456
2945
1417

16228
13578
12393
13426

4372
5930
4010
5308
3557
6006
2054
4331
4274
1501
1532
2900
3255
6106
6061

9386
18674
17741
14487

4117
5801
4046
2354
3552
4774
2218
4651
4221
6622
3388
2588

7925
5719
2382
6087
7799
5066
5100
4925
5764
5262
6232

12700
2207

7062
9723
4933
8313
8988
9771
8549
10278

10827
4384
3514
12710
12592
2531

15038
13852
2993
6765
1799

19487
10768

2715
7932
12032
10044
3722

2465
6819
3758
7537
1607
3958
2502
7743
1448
6763
7543

3664
6265
2609
1884
5972
4086
4523
6108
5073
5407
4410
2353
3627
4617

5816
2375
7279
6266
4691
6941
6754
1496
5536
1911
4220

3776
1762
5809
8808
1028
1768
7751
2274
5136
4402

19168
27638

16145
17357
7612
10493

6387
6862
6673
5873
6094
4189
3313
3217
3310
1580
4793
5262
2933

22224
11444

6708
1285
1573
2512
4161
2397
5196
2829
2105
5197

3478
4256
1755
3308
1105
2738
4607
3867
2306
3615
2686
5102
5659
3177
4846

13577
14550
5133
11050
7976

2082
5860
3018
8157
2087
1462
2164
2651
6380
3549

1849
4313
9018
5235
5785
3287
1464
6853
2251

4937
4124
4119
2485
3358
5815
4338
2249
5615
5378
1533
1035
2194
1521

24714
16695
23212

1679
1745
5214
4118
6052
4962
3633
3355
2768
2857
2124
4280
4754
1535
2400

5507
5947
7455
6774
2836
2126
3098
1685
6404
4302
4508
1739

3315
18956
13505
17849

7127
2867

4170
3426
2878
4025
3745
4267
2678
6439
1986
3401
1323
4225
6003
5156

5715
8382
2666
14581
11008

31882
15152

3976
2654
4849
2090
5774
1173
2645
4282
3014
3082
6723
6860
2129

5783
8750
4604
7494
5460
6231
4198
5747
7406
7529

1360
17274
9730
13453

3154
8490
5069
6268
4530
2929
7829
9000
4835

1441
3255
5210
1328
1628
3809
2422
3055
4402
2905
2375
2369
5513
4352
3749

3015
2463
8928
8067
9196
4077
5189
2392
2574

1847
3374
3505
3451
2323
5703
1466
5226
1553
7253
1835
6210

4886
5970
2459
4117
3866
5168
5914
6819
2291
6510
6039
4553
2686

5613
1938
5481
3692
5223
1505
3628
1095
4340
2681
5657
1811
1233

2815
7505
3875
1236
2028
3022
8262
6240
6295
7060

45267

16209
17734

3318
1727
4971
5208
8009
8009
6117
7870
4824
7741
1278

1854
4926
3228
6199
1312
2417
4413
1801
4145
4604
4296
5636
5169
6081

7523
3390
2318
8663
7609
1722
5343
8124
1579
2959

4172
21931
22824

2561
3470
3018
6387
4774
5611
4904
5883
6144
4977
1863
1613
3160
4236

3059
2276
1441
3886
2204
3853
3910
5347
5630
5721
6630";
    Console.WriteLine(data.Replace("\r", "").Split("\n\n")
        .Select(section =>
            section.Split("\n").Select(line => int.Parse(line)).Sum()
            ).Max());
}
void p1b() {
    var data = @"9524
12618
6755
2121
12876
11330

4029
11446
11571
2683
3454
12411

6226
9901
6735
7602
4045
4643
5047
2329

5576
23361
16052

5523
12113
3128
5978
4683
3458

32135
15179

7380
9715
5985
9547
9207
6882
4407
1688

9175
4868
3374
6053
5304
4585
1344
5036

4807
1180
6655
4572
3864
4674
6759
6861
4273
2387
1085
1598

1807
13594
13712
7385

6607
6858
3872
5554
5802
1174
5234
6082
6672
4180
1491
4111
1721

6508
4569
2836
7992
2876
4464
5023
2920
3794
6274

3229
2998
15582
12963
14718

32390

2517
6446
6777
5881
7923
5523
4904
3018
5737
4826

5911
6152
2479
3949
3427
5924
6432
6746
6878
5884
3309
3674
2026

11177
1872
15245
16212
6512

23534
21079

5725
8219
7284
1011
1903
2835

3194
3712
5969
6069
4264
4616
5424
5382
4772
1908
1707
2222
2778
3712

10329
26374

4180
3086
5044
1980
5636
2776
5399
3898
1353
4864
5504
5631
3373

11290
1294
2117
13739
9724
11236

9653
13620
20041
8914

29248
32773

2316
3761
4458
4592
5963
2118
6079
2024
3928
4745
2965
1748
2824
5740
5189

1307
5004
2336
7721
1757
5155
4671
2734
4884
5549

16255

4892
4077
1163
7588

4887
4197
3782
5889
6735
5729
2783
3170
3062
6874
5479

4352
3701
5794
4775
1622
2128
1063
1009
1702
4405
4455
1304
5133
1374
2677

6261
1307
5579
6582
6098
5375
4876
4747
3285
6389
2660

68718

3578
5102
3755
2031
6961
6433
6081
2957
1770
1280
4229
7081

9388
11343
5178
2164
10275
6054
5742

8550
7983
8330
8883
9575
9300
8453
6367
5770

5374
5460
5590
6433
5785
3128
1194
5369
3032
6351
2210
4725
2942
5483

28182

36912
27721

15006
4561
2828

2120
4019
4685
1360
4315
2733
1546
3986
3071
4308
6705
1480
2075

4452
7034
6770
8934
8125
6333
2856
7908
5145

2068
1714
6972
5061
6633
4180
5603
5186
6986
3112
5696

1164
4408
7118
7230
1636
5958
2070
2091
3158
6631

6888
5446
3132
1888
2668
1529
1568
1901
4708
2815
8079

2394
1604
6133
1886
2648
3636
2998
5510
1422
5184
3436
6317
3481
3109

13992
8555

3038
5447
5010
10502
9033
4127
9385
7438

5561
14448
15742
9477
15244

1824
7913
3167
2770
6853
5049
8970
3980
3792

5263
1495
6398
3191
1787
4516
4528
1984
2209
2937
1917

7093
4995
11710
8145
2509
11002
2329

2772
9223
7429
5951
5211
5390
9636
5015
9576

9143
19336
8940
14860

1615
2033
1853
3334
10998
5591
10429

3400
6270
6159
1199
6841
1411
2272
2298
8236

2641
9002
8338
13253
9830

2121
6314
5463

16712

20041
15769
6691
8310

17869
15266
3313

3453
4166
6214
4735
6756
7020
4624
4679
1779
3429
1133
4630

2207
16017
2824
13752
6355

13493
12177
9701
1146
2421

6461
5774
5822
5873
7594
7653
6871
7934
6083
4111
7399

14561
4204
17338
9054

5551
2880
4587
7339
7793
8194
5359
8702
6846

4827
6451
2666
7916
2321
2258

7352

17612
30650

13845
9073
7678
15430
3256

13079
12502
8332
12919

15980
14653
5439
2880
15145

26007

18376
8663
11423
7152

3832
5843
3919
5658
1615
5840
3009
5725
2639
5239
4380
2298
4618
2586

15785
8518
4131
8614

4718
5897
7178
2031
3409
7218
6794
8699
4119
6928

2129
2231
2489
5616
1467
2225
5657
4127
6286
5359
4725
1819
5550

6079
7050
13912
13912
12870
4966

5974
3386
2793
4898
2975
3865
5974
3655
3838
1822
3322
1610
5610
3243

4090
1110
4663
2618
1587
3417
4401
3837
2593
4503
1746
4797
1821
3502
2592

4955
4020
13061
7532
12446

4084
1491
5988
6646
2061
2083
1761
5146
4656
5620
3959
6133
3161

9795
2854
6539
1197
7913
6560
1912
5636

3964
6541
3226
3536
6335
6956
3656
4149
6859
4609
4456
2856
3395

16002
11740
6583

8056
21295
6331

12521
14781
2837
18442

7673
12780
3682

2104
2166
4813

5722
5243
3506
4961
3587
5584
8571
6724
6901
5278

3464
4099
2514
6217
2209
6501
5950
3218
4821
3121
4106
4451
1228

5147
5877
1170
4801
4153
3710
1673
5553
5992
5173
4277
1451
5158
3766
3191

12693
13232
5554
12330
7602
6490

1168
14381
11380
6522
4822

3956
12204
1708
13838
7704
5066

5436
3448
4345
7430
6934
1717
4553
4683
7091
5718
4289
1140

2321
1291
2159
7409
3502
4266
2190
5307
1971
2217

8168
4475
7287
9416
6264
2691
4551
5109
3286

31132
31889

6154
6665
7026
11383
13857
8357

10312
3810
7818
6172
7615
9201
1937

9067
6897
4655
5091
2824
7062
1336
1835
3831

4839
5218
6044
4868
6466
4237
2814
2210
3365
6128
2713
5229
4600
1466

1225
5350
3013
1102
7614
3002
4451
2059
1843
6158

57499

2273
8394
9347
4833
9001
8823
7674
1882
9235

3759
7106
1671
1596
7855
3616
4858

4966
6050
2267
2082
3664
1812
4412
6457
5080
3280
6407
3124
5993
2142

2728
2912
1566
5990
7139
1082
6536
1213

6118
4821
3134
5633
3091
3618
5465
4116
1577
2776
4592
4923
5812

12233
1056
12928
6106

8177
12942
13879
2729
11070
7560

3359
1950
3396
7128
1724
6590
5952
2255
1022
5923
4381
2670

5619
5474
2892
5214
2677
4596
4314
2790
4749
6478
6865
3755
3747

1888
4764
5673
6832
8312
5569
3874
1831
1742
1953

6154
5064
2106
11402
8462

7116
2820
5625
5143
3055
1554
4279
5644
1908
6292
4492

7544
6590
6098
7178
7354
1570
8934
1544
6880

66910

12946

6226
7319
12112
6817
8025
2668

2630
1137
2881
2123
4994
3215
3315
2353
4031
4151
1609
5278

13286
5182
14123

6100
4344
7043
9434
6107
3579
1697
3166
3414

11329
35988

5631
7749
1074
4825
2650
6835
6433
5946
4203
4514
2944

7860
1341
2546
10857
11814
11301
9280

5318
8457
6221
1419
1715
6222
9581
5606
2293

9296
11898
8802
3804
1796
13910

12885
10836
17345
7449

2666
2481
6683
1783
4880
5339
5075
1043
6314
1440
5100
1647
2095

4698
7755
2595
1730
5954
3714
5023
4167
2202
4679
1165

4431
3109
3055
1713
1848
4118
1730
2280
1079
3688
1569
2995
4061

3757
4427
4747
2214
3723
1434
7512
1878
3167

2122
17054
9678
8169

2437
3160
2215
3949
2996
4494
1615
5174
6019
6055
3186
3229
5248
5656
1847

4314
5032
5345
3719
2918
3847
2708
1834
2603
2200
3822
6052
2997
1540
1846

3626
1064
5420
3228
1444
5662
5600
4544
5177
2309
2186
2638
3164
5703
6079

28701
30412

11849
11080
24418

3926
4456
3783
3058
1752
4944
6732
6587
2578
3490
1730

3862
12513
6788
4010
1427
1098

9313
8444
16375
14666
15215

2819
1623
4195
1981
2908
4730
2621
4136
4824
3588
2979
1583
1776
1845
3772

3668
3119
4402
5814
4507
3147
4834
1171
4102
5458
4930
5098
1284
5117

3889
7447
1031
6800
4884
6483
1577
7164
2778
6216
3167
5458

12710
14353
9583
5759
16081

3156
4905
4799
2502
7230
6169
2350
4196
4384
5939
2889
1349

4978
5247
10881
3833
13656
8822

4063
3379
4073
3091
2733
4759
5051
5605
3114
2039
6049
4568
5013
1991
4239

22021
21472
15888

23871
33564

1475
1319
6422
2086
1101
2435
1661
6011
5927
4798
4770
4860
4821
6438

45424

3704
6982
7230
4807
6677
6131
2698
3048
4914
3656
4707

1883
5114
2366
2220
3239
2574
3754
2711
6984
7464
6208

5881
5964
5999
4260
2501
3387
3112
5323
4895
3715
2183
2900
4867
1975
3961

5874
3960
5490
6056
5222
6205
1153
5491
4156
3921
4369
1195

1540
3601
6238
2433
5286
1272
1567
2425
5797
5222
3213
6021
6519

17672
19343
11461
8143

6489
5442
4307
1773
4716
1220
5407
2997
4763
2629
5102

6014
6309
4072
8155
7481
6771
8686
5980
6754
5761

69172

4781
6068
4342
6091
4340
5890
2973
4214
2884
1782
3622
3240
2185
1947
4634

11595
22943

1583
9915
2518
3285
12248

56794

1266
8056
3268
7231
3018
2774
2415
5377
4227
5428
1113

3527
5534
4501
8409
3396
5553
10346

2931
4457
6108
5058
3393
5132
2076
4461
3353
4568
2182
2493
3285
1592
5370

15869
8031

6349
5106
1725
4758
5364
3316
4235
4813
4421
1682
2133
3691

39362

1243
6663
7560
10078
1589
8782
9184
9149

4761
21813
24493

8335
9413
5100
7001
4090
6375
9420
6864
3263

2101
3950
6076
1739
5749
4174
5849
5463
4750
5934
4202
6119
1588
1637

3545
4228
7420
10436
5854
10021
7383

2430
5591
3145
13825

14058
4268
12789
11917
2470

4661
1018
4383
4852
1090
5644
3953
1204
2819
3500
2749
5615
3939
5118
3128

2882
3718
2670
2190
1495
3551
5497
3264
6484
6199
2011
4157
5896
6046

34056

2090
8624
11777

7414
4519
1108
8667
8481
5032
10813

3466
9107
2058
1813
2236
8430
2923
7801
7506

3315
1937
2698
1647
3083
5874
4801
4649
1311
5306
4655
4981
2325
2130
2261

37135

1831
4702
5322
5424
4620
3951
1275
1074
1767
4751
2512
4367
2623
6175

23083
30515

1765
3327
5205
4124
2834
5524
1945
4393
3958
1021
4989
1142
1960

11170
3970
11159
5081
5508
9043
6180

6216
3861
1281
1935
2128
1550
5869
4139
6307
5320
4740
5970
4039

8019
1455
3994
10337
3779
7604
9614
7636

5463
10532
13499

3967
4866
2889
4428
1896
2064
3350
2802
5240
5626
1206
2169
3757
3481

26031
10122

12480
5566
21219

57426

17286
1875
6596
2739

2182
4147
2513
4571
1569
2946
1972
3032
3580
5820
4722
3358
4456
2945
1417

16228
13578
12393
13426

4372
5930
4010
5308
3557
6006
2054
4331
4274
1501
1532
2900
3255
6106
6061

9386
18674
17741
14487

4117
5801
4046
2354
3552
4774
2218
4651
4221
6622
3388
2588

7925
5719
2382
6087
7799
5066
5100
4925
5764
5262
6232

12700
2207

7062
9723
4933
8313
8988
9771
8549
10278

10827
4384
3514
12710
12592
2531

15038
13852
2993
6765
1799

19487
10768

2715
7932
12032
10044
3722

2465
6819
3758
7537
1607
3958
2502
7743
1448
6763
7543

3664
6265
2609
1884
5972
4086
4523
6108
5073
5407
4410
2353
3627
4617

5816
2375
7279
6266
4691
6941
6754
1496
5536
1911
4220

3776
1762
5809
8808
1028
1768
7751
2274
5136
4402

19168
27638

16145
17357
7612
10493

6387
6862
6673
5873
6094
4189
3313
3217
3310
1580
4793
5262
2933

22224
11444

6708
1285
1573
2512
4161
2397
5196
2829
2105
5197

3478
4256
1755
3308
1105
2738
4607
3867
2306
3615
2686
5102
5659
3177
4846

13577
14550
5133
11050
7976

2082
5860
3018
8157
2087
1462
2164
2651
6380
3549

1849
4313
9018
5235
5785
3287
1464
6853
2251

4937
4124
4119
2485
3358
5815
4338
2249
5615
5378
1533
1035
2194
1521

24714
16695
23212

1679
1745
5214
4118
6052
4962
3633
3355
2768
2857
2124
4280
4754
1535
2400

5507
5947
7455
6774
2836
2126
3098
1685
6404
4302
4508
1739

3315
18956
13505
17849

7127
2867

4170
3426
2878
4025
3745
4267
2678
6439
1986
3401
1323
4225
6003
5156

5715
8382
2666
14581
11008

31882
15152

3976
2654
4849
2090
5774
1173
2645
4282
3014
3082
6723
6860
2129

5783
8750
4604
7494
5460
6231
4198
5747
7406
7529

1360
17274
9730
13453

3154
8490
5069
6268
4530
2929
7829
9000
4835

1441
3255
5210
1328
1628
3809
2422
3055
4402
2905
2375
2369
5513
4352
3749

3015
2463
8928
8067
9196
4077
5189
2392
2574

1847
3374
3505
3451
2323
5703
1466
5226
1553
7253
1835
6210

4886
5970
2459
4117
3866
5168
5914
6819
2291
6510
6039
4553
2686

5613
1938
5481
3692
5223
1505
3628
1095
4340
2681
5657
1811
1233

2815
7505
3875
1236
2028
3022
8262
6240
6295
7060

45267

16209
17734

3318
1727
4971
5208
8009
8009
6117
7870
4824
7741
1278

1854
4926
3228
6199
1312
2417
4413
1801
4145
4604
4296
5636
5169
6081

7523
3390
2318
8663
7609
1722
5343
8124
1579
2959

4172
21931
22824

2561
3470
3018
6387
4774
5611
4904
5883
6144
4977
1863
1613
3160
4236

3059
2276
1441
3886
2204
3853
3910
5347
5630
5721
6630";
    Console.WriteLine(data.Replace("\r", "").Split("\n\n")
        .Select(section =>
            section.Split("\n").Select(line => int.Parse(line)).Sum()
            ).OrderByDescending(i => i).Take(3).Sum());
}
void p2a() {
    var data = @"C Z
C Y
B X
A Z
C Z
B X
C Z
B Z
A Z
A Z
B Z
B X
C Z
C Z
A Z
B Y
B X
C Y
B X
B X
A Y
A Z
A Z
A Z
A Z
C Z
A Z
C Z
B X
A X
A Z
B Y
B X
A Z
B X
C Z
A Z
C Z
A Z
A Z
B X
C X
B X
A X
B X
A Z
A Z
B X
B Y
B Y
B Y
C Z
A Z
A Z
C X
B X
C Y
B X
C Z
A Z
C Z
B X
B X
B Z
B X
A Z
C Z
A Z
A Z
A Z
A Z
B X
C Z
C Y
A Z
A Z
A Z
A Z
C Z
A X
A Z
A Z
C Z
C Y
A Z
C Y
A Z
A Z
C Y
C Z
C Z
A Z
B Y
B X
B Y
C Z
A Z
A Z
A Z
B Z
C Z
A Z
B X
C Y
A Z
B X
A Z
B Z
A Z
B X
A Z
B Y
A Z
A Z
C Y
A Z
B Z
A Z
A Y
B Y
C Z
A Z
B X
C Z
C Z
B X
C Z
C Z
A Z
B X
C Z
C Z
A Z
C Y
A Z
A Z
B Y
C Y
A Z
B X
B Y
B X
B X
A Z
C Y
A Z
C Y
A Z
B Y
C Z
A Z
A Z
C Y
A Z
A Z
C Z
A Z
A Z
A Z
C Y
A Z
B X
C Z
A Z
C Z
B Z
C Z
A Z
C Y
B X
C Z
C Z
A Z
C Y
A Z
B Y
B X
A Z
C Y
C Z
B X
C X
B X
C Y
B X
B X
C Z
B X
A Z
C X
A Z
C Z
B X
C Y
A Z
A Z
C Z
C Y
A Z
A Z
A Z
B X
A Y
B X
C X
C Z
B X
C Z
C X
A Z
C Z
B Z
A X
A Z
C Y
A Z
C Z
C Z
B X
C Z
A X
C Y
C Z
C Z
C Z
B Y
C X
B X
A Z
B Y
A Z
A Z
C Y
A Z
B X
A Y
A Y
C Y
A Z
A Z
C Z
A Z
A Z
A Z
B Y
B X
B X
A Z
C X
C Y
A Z
C Z
A Z
A Z
A Z
A Z
A X
A Z
C Z
A Z
B Y
A Y
A Y
C Y
C Y
B X
B Y
A Z
A Z
C X
A Z
B X
C Y
A Y
A Y
A Z
C Y
C Z
B X
A Z
C Y
B X
C Z
A Z
B X
A Z
C Y
B X
C Z
A Z
A Z
A Y
A Z
A Z
C Y
C Z
A Z
B X
C Z
C Y
A Z
A Z
C Y
A Z
C Z
B X
A Z
C Z
A Z
A Z
A Z
C Y
C Y
B X
B Z
B X
A Z
B Y
B Y
A Z
A Z
A Z
B Y
B Y
C Y
A Y
A Z
C X
B X
A Y
B Y
C Y
A Z
B Z
C Y
C Z
B X
A Z
A X
B X
C Y
B Z
A Z
B Y
A Z
B X
A Z
B X
A Z
C X
C Y
C Z
B X
C Z
C Y
A Z
C X
C Z
A Z
C Y
A Y
C Y
C Y
B Y
A Z
A Z
A Y
A Z
C Z
B X
A Y
B X
B Y
B X
A Z
C Z
C Z
C Y
B X
C Z
A X
A Z
A Z
A Y
A Z
A Z
A Z
A Z
B Z
B X
B X
C Y
C Z
C Z
A Y
B X
C Z
C X
C Z
B Y
A Z
B X
B Y
B X
A Z
B X
B X
A Z
A Z
C X
B X
C Z
C X
A Z
A X
C Z
A Z
A Z
C Z
B Z
C Z
B X
A Z
A Z
C Z
A Y
A Z
A Z
C Y
A Z
B X
B Y
A Z
A Y
A X
B X
A Z
A Z
C Y
C Y
A Z
C X
A Z
A Y
A Z
B Y
A Z
A Y
B X
C Z
A Z
B X
A Z
A Z
B X
A Z
A Z
B X
A Z
C Y
A Z
C Z
C Y
B Y
B X
A Z
B Y
A Z
A Z
B X
A Z
A Z
B X
C Z
A Z
C Z
B X
B X
B Y
A Y
C Y
B X
A Z
C Z
A Z
A Z
A Z
B X
A Z
B X
A Z
A Z
A Z
C Z
A X
B X
B Z
A Z
A Z
C Z
A Z
A Z
A Z
B Y
A Y
C Z
B X
B X
C Y
A Y
A Z
C X
B Z
A Z
A Z
C Z
A Z
A Y
B Y
C Z
B X
A Z
A Z
A Z
C Z
A Z
A Y
B X
C Y
A Z
A Z
A Z
C X
B X
A Z
A Z
C Z
B X
A Z
A Z
A Z
A Z
A Z
A Z
C Y
A Z
B X
A Y
C Y
A Z
A Z
B X
A Z
B Y
A Y
B X
A X
A Z
C Z
C Z
C Y
A Z
B Y
A Z
C X
A Z
A Z
B X
A Z
A Z
B Y
A Y
A Z
A Z
B X
C Y
B X
B Y
C Y
C X
A Z
A Z
B Y
A Z
B Y
C Y
C Y
A Z
C Y
A Z
C Z
A Z
B X
A Z
A Z
A X
A Z
A Z
A Z
A Z
B Z
C X
B Y
A Z
C Z
A Z
A Z
A Z
C Z
B X
A Z
B X
C Y
C Z
A Z
A Z
C Z
B X
B X
A Z
A Z
B X
A Z
A Z
C Z
A Z
A Z
A X
C Z
C Y
A Z
A Z
A Z
A Z
C Z
A Z
A Z
B Z
A Z
C Y
A Z
A Z
B Y
A Z
A Z
B X
A Z
B X
A Z
A Z
C Y
A Y
C Y
B Z
B X
B Y
A Z
A Z
C Y
A Z
A Y
B Z
A Z
C Y
A Z
A Z
A X
A Z
B Y
B Y
A Z
A Z
A Z
C Z
C Z
A Y
C Y
B X
A Y
B X
B Y
C X
C Y
C Y
A Z
C Z
A Z
A Z
A Z
B X
A Z
A Z
A Z
A Z
A Y
B X
A Z
A Z
B X
A Z
A Z
A Z
A Z
A X
C Y
B X
A Z
A Y
C Y
C Y
A X
A Z
C X
C Z
A Z
C X
A Z
A Z
B Y
A Z
A Z
A Z
B X
A Z
A Z
B X
B X
A Z
A Z
C Z
C Z
A Z
C Z
B X
A Z
A Z
B X
C Z
C Z
C Y
C Z
A Z
B X
A X
C Z
A X
C Z
A Z
A Z
A Z
A Z
A Z
B X
A Z
B X
C Y
A Z
A Z
A Z
C Z
A Y
A Y
B Y
A Z
A Z
C Y
C Z
B X
B X
A X
C Z
B X
A Z
A Z
A Z
B Z
A Z
C Y
B X
A Z
A Z
A Y
B Y
C Z
C Z
A Z
A Z
A Z
B Y
A Z
C Y
B X
B Z
C X
B X
C Y
A X
C Z
A Z
B X
C X
A Y
C X
A Z
B X
B X
A Z
A Z
C Z
B X
B Z
C Y
C Z
A Z
B Y
A Z
A Z
B X
C Y
A Z
C Z
A Z
B Z
C Z
C Z
A Z
C Y
A Z
A Z
A Z
C Z
C X
B Y
C Y
A Z
C Y
C Y
C X
C Y
A Z
C Y
C Y
C X
C X
A Z
B X
A Z
C Y
A Z
B X
B X
B X
B X
B X
B Y
A Z
A Z
C Z
A Z
A Z
A Z
C Z
C Z
C Z
A Z
A Z
A Y
A Z
A Z
A Y
A X
C Z
A Z
A Z
C Z
B X
C Z
B Y
C Z
A Y
A Z
C Y
B X
A Z
C Y
A Z
C Z
C Y
B X
A Z
A Z
A Z
A Z
A Z
C X
C Z
A Z
A Z
A Z
C Z
A Z
B X
A Z
A X
A Z
B X
A Z
C Z
A Z
A Y
B X
B Z
A Z
B X
A Z
A Z
B Y
A Z
A Z
C Y
B Y
C X
A Z
A Z
A Z
C Z
A Z
A Z
A Z
C Z
A Z
C Y
B X
A Z
A Z
C X
A Z
C Z
A Z
B Y
A Z
A Y
C Z
C Z
A Y
A Y
A Z
A X
A Z
A Z
B X
A Z
A Z
B X
C Z
A Z
A Y
B X
A Z
A Z
C Z
A Z
A Z
B X
B Z
A Z
A X
B Y
A Z
B X
A Z
C Z
B X
C Y
A Z
B X
A Z
A Z
A Z
B Z
A Z
C Z
A Z
C Z
B X
A Z
B Z
A Z
C Z
C Z
B Y
C Z
A Z
A Z
C Y
A Z
A Z
B X
B Y
C Z
A Z
C Z
A Z
C Z
A Z
B X
A X
B Y
A Z
C Z
A Z
C Z
C Y
B X
C Z
C Z
B Y
B X
C Z
B X
C Y
A Z
C Y
C Y
A Z
B X
A Z
C X
C Z
B Y
C Z
B Z
A Z
A Z
A Z
A Z
A Z
A Z
A Z
A Z
C Z
A Z
B Y
C Y
C X
C Y
B Y
B X
A Z
C Z
B X
B Y
A Z
B Y
A Z
A Y
B X
A Z
B X
A Z
C Z
A Z
A Z
A Z
C X
B Y
C Z
C Z
A X
C Z
A Z
C Z
B Y
A Z
B Y
A Z
A Z
A Z
B Z
C Z
A Z
A Z
A Z
A Z
A Z
A Y
A Z
C Z
A Z
C X
A Z
A Z
A Z
C Z
A Y
A Z
A Z
B Z
A Z
A Z
A Z
C Z
C Z
A Y
A Z
A X
C Y
C Y
B Z
A Y
C Z
A Z
C Z
C Z
A Z
A X
A Z
B Y
C Z
B Y
A Z
B X
A Z
A Y
A Z
A Z
A Z
C Z
A Z
A Z
A Z
C Z
A Z
C Z
C Z
C Y
A Z
B X
A Z
A Z
A Z
A Z
A Z
A Z
C X
C Z
C X
A Z
A Z
A Z
A Z
A Z
A Z
C Z
B Y
B X
A Z
C Z
B Z
A Z
C Y
A Z
C Z
A Z
C Z
A Z
A Z
A Z
C Z
A Z
C Y
A Z
A Z
A Z
A Z
A Z
C Z
C Y
A Z
C X
A Z
C X
C Z
C Z
A Z
A Z
B Y
B X
A Z
B X
A Z
A Z
A Z
C Z
B Z
A Z
A Y
B Y
A Z
C Z
B X
C X
C Y
C Y
C Z
C X
B X
A Z
B X
A Z
C Z
A Z
A Y
A Z
B X
A Y
A Z
A Y
C Y
A Y
A Z
A Z
B X
C X
A Z
A Z
A Z
A Z
A Z
A Z
A Y
B X
A Z
A Z
B Y
B X
A Z
A Z
B X
A Z
C Y
C Y
B Y
A Z
A Z
A Y
A Z
A Z
A Y
C Z
C Y
C Z
C X
C Z
C Y
A Z
A Z
C Z
B X
A Z
C Z
A Z
C Z
C X
B Y
C X
B X
C Z
B X
C Z
A Z
A Y
B Y
A Z
A Z
C X
C Y
A Z
B X
A Z
A Z
C Y
C Z
B X
B X
A Z
C X
A Z
B X
C Y
A Z
A Y
B X
C Y
B X
A X
A Z
A Z
A Z
C Z
B Y
C Z
B Y
A Z
A Z
C Z
B X
A Z
A Z
A Z
A Z
C Y
B X
A Z
C X
A Z
C Z
B Z
A Z
A Z
A Z
B Z
A Y
A Z
A Z
C Z
B Z
A X
B X
A Z
A Z
A Z
A Z
A Z
A X
C Z
A Z
C Z
B X
B X
C Y
B X
A Z
A Z
C Y
C Z
B X
C Y
A Y
B X
B X
C X
A Z
A Z
C Z
A Z
C Z
C Z
B X
A Z
B X
A Z
A Z
B Y
B Y
A Z
A Z
C Z
A Z
A Z
B X
A Z
C Z
C Z
B X
C Y
A Z
A X
B X
B X
B Y
B Y
A Z
C Z
A Z
C Z
A Z
C Y
B X
A Z
A Z
C Z
B X
A Z
C Y
A Z
A Z
A Z
B X
A Z
A Y
C Y
C Z
A Z
A Z
B X
C Y
A Z
C X
A Z
B X
A Z
A Z
B Y
B X
C Z
A Z
B X
A Y
A Z
B Z
A Z
C Y
B Y
C Z
C X
B X
A X
B X
B Z
B X
B Y
B X
C Y
B X
A Y
B Z
B X
C X
B X
A Z
A Z
B X
B X
A Z
A Z
C Y
B Y
A Z
A Z
A Z
C Z
A Z
B X
A Z
B X
A Z
A Z
A Z
A Z
C Y
C X
A Z
A Z
A Z
A Z
B Y
A Z
A Z
C Z
C Z
B X
A Z
A Z
B X
A Z
B X
C Y
B X
C Z
A Z
C Z
C Z
A Z
A Z
A Z
A Z
A Z
C X
C Z
B X
B X
B X
A Z
A Z
C Z
B X
A Z
C X
A Z
C Z
A Z
A Z
C Z
A Z
A X
B X
A Z
A Z
A X
A Z
B Y
A Z
A Z
A Z
C Y
C Y
A Z
C Y
C X
A Z
B Y
A Z
A Z
B Y
A Z
A Z
A Z
C Y
B X
A Z
A Z
A Z
A X
A Z
A Y
A Y
A Z
C Z
B Y
C Y
B X
B X
B X
A Z
A Z
A Z
C Y
A Z
B X
A Z
A Z
C Z
B X
A Z
A Z
C Z
A Z
C Y
A Z
B X
C Z
C Y
A Z
C X
A Y
B Z
C Z
C Y
A Z
A Z
A Z
A Y
A Y
C Y
B X
C Z
B X
C Y
B X
B X
A Z
A Z
C Z
A Z
B X
A Z
B X
C Y
C Z
A X
B X
B X
C Z
C Z
C Z
C Z
C Z
A X
A Z
B X
A Z
B X
A Z
A Z
A Z
B X
B Y
C Z
C Y
A Z
C Z
B X
C Z
A Z
C Z
A Z
A Z
A Z
B X
B Z
A X
B Y
C Z
A Z
A X
A Y
A Z
C Y
A Z
C Z
A Z
A Z
A X
A Z
A Y
B Z
A Z
A Z
B X
B Y
A Z
C Z
A Z
A Z
C Z
A Z
A Z
C Y
B X
B X
A Z
C Y
B Z
A Z
B X
B X
B X
B Y
C Z
B Z
A X
B X
A Y
A Z
B X
B X
A Z
B X
A Z
C Z
A Z
C Z
C Y
B X
B X
C X
A Z
A X
A Z
C Y
C Z
C Y
C Z
C Y
C Y
B X
B Y
A Z
C X
C Z
B X
C Z
C Z
B X
A Z
A Z
A Y
A Z
A Z
C Y
A Z
B X
A Z
A Z
C Y
A Z
A Z
B X
A Z
A Z
B Z
A Z
A Z
A Z
A Z
A Z
C Z
A Y
A Z
C Z
C Z
C Z
A Z
B X
B Y
A Z
C X
A Y
A Y
C Y
C Y
A Z
C Y
B X
C X
B X
C Y
A Z
A Y
B X
B X
A Z
A Z
A Z
A X
A Z
B X
B Y
A Y
C Z
B Y
A X
A Z
A X
A Z
A X
A Y
C Y
C Z
A Z
A Z
A Z
C Y
A Z
A X
A Z
A X
A Z
A Z
B X
C X
C Y
C Z
B X
A X
C Z
C Z
C X
A Z
C Z
C Y
A Z
C Z
C Z
B X
A Z
B Y
B X
B X
C Z
A Z
A Z
B X
B X
A Z
C Z
B X
A Y
B Z
C X
A Z
C Y
A Z
A Z
B X
C Z
C Y
A Z
B X
B Y
A Z
B X
B Z
C X
A Z
C Y
C Z
B X
C X
C Y
A X
C X
C Y
B Y
A Z
C Y
C Z
A Z
A Z
A Y
A Z
C Y
C X
B X
C Y
A Z
B Y
A Z
B X
A Z
C X
A Z
C Z
B Y
B Y
B Y
C Y
A Z
A Y
C Z
C Y
B Y
A Z
B Y
B X
A Z
B Z
A Z
A Z
A Z
C Y
A Z
B X
A Z
C Z
B X
B X
C Z
A Z
C Z
B Y
C Y
C Z
A Z
A Z
A Z
A Z
A Z
C Z
A Z
C Y
A Z
B Y
A Z
C X
A Z
A Z
C Y
A Z
B X
A Z
A Z
B Y
A Y
C X
A Y
A Z
A Z
A Z
B X
A Z
B X
C Z
A Z
B X
C Y
C Z
A Z
A Z
C Z
A Z
A Z
A X
B X
B X
A Z
B X
C Y
A Y
A Z
A Z
C X
A Z
A Z
B X
A Z
A Z
A Z
A Y
B X
A Z
B X
B X
B X
B X
A Y
B X
A Z
A Z
B X
C Y
B X
C Z
B X
A Z
C X
A Z
B Y
C Z
B X
A Z
A Z
C Y
C Y
A Z
A Z
C Z
A Y
A Z
C X
C Z
A Z
A Z
B X
A Z
B X
A Y
B Z
B X
A Z
A X
B X
A Z
A Z
A Y
C Z
A Z
A Z
C Z
C Z
A X
A Z
C Y
A Z
B X
A Z
A Z
A Y
C Y
B X
C Z
A Z
C Y
B Y
A Z
B Y
C Z
A Z
A X
B X
B X
A Z
A X
A Z
A Z
A Z
A Z
B Z
A Y
A Z
A X
C Y
A Z
B X
B Y
B X
C Z
A Z
A Z
B X
A Z
C Z
A Z
B X
C Y
C Z
A Z
B Z
C Z
B X
C Y
A Z
C Z
B X
B X
A Y
A Z
B Z
B X
C Z
A Z
C Y
B Y
A Z
B Y
A Z
C Z
B X
B X
B X
C Z
A X
B Y
B Y
A Z
A Z
A Z
A Z
A Z
B X
A Z
A Z
B X
C Z
A Z
C Y
C Z
A Z
A X
A Z
A Z
A Z
B X
B Y
B X
A Z
A Z
C Z
A Z
C Z
A Z
A Z
B X
A Z
A Z
C Y
A Z
B X
A Z
A Z
B X
A Z
C Z
A Z
B X
A Z
A Z
A Z
C Z
B Y
A Z
B X
C X
A Z
B X
A Z
C Y
A Z
A Y
A Z
B Z
B X
C Z
A Z
C Z
C Y
B Y
B X
B Y
C Y
C Y
A Z
C Y
A X
A Z
B Y
A Z
B X
A Y
C Y
B X
C Y
B X
A Z
A X
B Y
B X
C Z
A Z
A Z
A Z
A Z
A Z
C Z
C Z
A Z
A Y
B X
B X
C Z
A Z
A Z
C X
B Z
C Z
B X
A Z
A Y
A Z
A Z
A Z
A Z
A Z
A Z
B Z
B X
A Z
B X
C Y
C Z
A Z
B X
B X
A Z
C X
A Z
B Y
A Z
C Y
B X
A Y
B Y
C Y
B X
B X
B Y
C Y
B X
A Z
C X
A Z
B X
A Z
A Y
A Z
A X
C X
C Y
A Z
A Z
C Y
A Z
A Z
A X
C Z
C Y
A Z
A Z
B X
B X
C Z
B X
A Z
C Y
B X
B X
C Z
A X
A Z
B Z
C Z
C Y
A Z
C Z
C Z
B Y
C Y
B Y
C Z
A Z
C Z
B X
A Z
B Y
B Y
C Y
C Y
A Z
C Z
C Z
A Z
A Z
C X
A Z
A Z
C X
A Z
A Z
A Y
A X
C X
A Z
A Z
A Z
C Z
A Z
A Z
A X
A X
B Y
A X
A Z
A X
B X
B X
A Z
C Y
A Z
C Y
C Y
B X
B X
A Z
B Z
B X
C X
B X
A Z
A Z
A Z
B X
C Y
C Z
A Z
B Y
C Y
C X
A Z
A Z
A Z
A Z
A X
C Z
A Z
B X
A Z
A Z
C Z
C X
C Z
A Z
C Y
B Y
A Z
C Z
B X
B Z
A Z
A Z
A Y
C Y
C Z
C Z
A Z
A Z
C Z
B X
A Z
A Z
A Z
B X
A Z
B X
B X
A Z
C Y
A Z
A Z
A Z
C Z
A Z
C Y
B X
A Z
C Z
A Z
C Z
A X
A Z
A Z
A Z
A Z
A Z
A Z
C Z
A Z
A Z
A Z
B X
C Y
B Z
A Z
C X
A Z
C Z
C Z
C Y
C Y
B X
A Z
C Z
A Z
A Z
A Z
A Z
A Z
A Z
A Y
A Z
A Z
A Z
C Y
B Y
C Z
C Z
A Z
A Z
A Z
A Y
C Z
A Z
A Y
A Z
A Z
A Z
B X
B X
C Y
B X
A Z
A Z
A X
C Z
C Y
A Z
C Y
A Z
A Z
A Z
C X
B X
A Z
C X
C Y
A Z
A Z
A Z
A Z
A Z
A Z
C Z
B X
C X
C Z
B Y
B Z
B Z
C Y
A Z
B X
B X
A Z
A Z
A Z
B Z
B Z
A Z
C Z
A Y
C X
C Y
A X
C Y
A Z
C X
A Z
B X
C Z
B X
B Z
A Z
A X
A Z
B X
C Y
B Y
A Z
C Z
A Y
A Z
C Y
A Z
C Y
B X
A Z
A Z
A Z
A Z
B Y
A X
A Z
C Z
A Z
C Z
B X
C Z
A Z
B Y
A Z
C Y
C Y
C Z
A Z
A Z
A Y
B X
A Z
A Z
C X
B X
C X
A Y
A Z
A X
B X
A Z
B Y
C Z
C Z
C Y
A Z
A Y
A Z
A Z
B Z
C Y
A Z
A Z
B Y";
    int LOSE = 0, DRAW = 3, WIN = 6;
    Console.WriteLine(data.Replace("\r", "").Split("\n")
        .Select(line => {
            var parts = line.Split(" ");
            return (parts[0][0] - 'A', parts[1][0] - 'X');
        })
        .Select(pair => pair switch {
            (var a, var b) when a == b => DRAW + b + 1,
            (var a, var b) when (a + 1) % 3 == b => WIN + b + 1,
            (var a, var b) when a == (b + 1) % 3 => LOSE + b + 1,

        }).Sum());
}
void p2b() {
    var data = @"C Z
C Y
B X
A Z
C Z
B X
C Z
B Z
A Z
A Z
B Z
B X
C Z
C Z
A Z
B Y
B X
C Y
B X
B X
A Y
A Z
A Z
A Z
A Z
C Z
A Z
C Z
B X
A X
A Z
B Y
B X
A Z
B X
C Z
A Z
C Z
A Z
A Z
B X
C X
B X
A X
B X
A Z
A Z
B X
B Y
B Y
B Y
C Z
A Z
A Z
C X
B X
C Y
B X
C Z
A Z
C Z
B X
B X
B Z
B X
A Z
C Z
A Z
A Z
A Z
A Z
B X
C Z
C Y
A Z
A Z
A Z
A Z
C Z
A X
A Z
A Z
C Z
C Y
A Z
C Y
A Z
A Z
C Y
C Z
C Z
A Z
B Y
B X
B Y
C Z
A Z
A Z
A Z
B Z
C Z
A Z
B X
C Y
A Z
B X
A Z
B Z
A Z
B X
A Z
B Y
A Z
A Z
C Y
A Z
B Z
A Z
A Y
B Y
C Z
A Z
B X
C Z
C Z
B X
C Z
C Z
A Z
B X
C Z
C Z
A Z
C Y
A Z
A Z
B Y
C Y
A Z
B X
B Y
B X
B X
A Z
C Y
A Z
C Y
A Z
B Y
C Z
A Z
A Z
C Y
A Z
A Z
C Z
A Z
A Z
A Z
C Y
A Z
B X
C Z
A Z
C Z
B Z
C Z
A Z
C Y
B X
C Z
C Z
A Z
C Y
A Z
B Y
B X
A Z
C Y
C Z
B X
C X
B X
C Y
B X
B X
C Z
B X
A Z
C X
A Z
C Z
B X
C Y
A Z
A Z
C Z
C Y
A Z
A Z
A Z
B X
A Y
B X
C X
C Z
B X
C Z
C X
A Z
C Z
B Z
A X
A Z
C Y
A Z
C Z
C Z
B X
C Z
A X
C Y
C Z
C Z
C Z
B Y
C X
B X
A Z
B Y
A Z
A Z
C Y
A Z
B X
A Y
A Y
C Y
A Z
A Z
C Z
A Z
A Z
A Z
B Y
B X
B X
A Z
C X
C Y
A Z
C Z
A Z
A Z
A Z
A Z
A X
A Z
C Z
A Z
B Y
A Y
A Y
C Y
C Y
B X
B Y
A Z
A Z
C X
A Z
B X
C Y
A Y
A Y
A Z
C Y
C Z
B X
A Z
C Y
B X
C Z
A Z
B X
A Z
C Y
B X
C Z
A Z
A Z
A Y
A Z
A Z
C Y
C Z
A Z
B X
C Z
C Y
A Z
A Z
C Y
A Z
C Z
B X
A Z
C Z
A Z
A Z
A Z
C Y
C Y
B X
B Z
B X
A Z
B Y
B Y
A Z
A Z
A Z
B Y
B Y
C Y
A Y
A Z
C X
B X
A Y
B Y
C Y
A Z
B Z
C Y
C Z
B X
A Z
A X
B X
C Y
B Z
A Z
B Y
A Z
B X
A Z
B X
A Z
C X
C Y
C Z
B X
C Z
C Y
A Z
C X
C Z
A Z
C Y
A Y
C Y
C Y
B Y
A Z
A Z
A Y
A Z
C Z
B X
A Y
B X
B Y
B X
A Z
C Z
C Z
C Y
B X
C Z
A X
A Z
A Z
A Y
A Z
A Z
A Z
A Z
B Z
B X
B X
C Y
C Z
C Z
A Y
B X
C Z
C X
C Z
B Y
A Z
B X
B Y
B X
A Z
B X
B X
A Z
A Z
C X
B X
C Z
C X
A Z
A X
C Z
A Z
A Z
C Z
B Z
C Z
B X
A Z
A Z
C Z
A Y
A Z
A Z
C Y
A Z
B X
B Y
A Z
A Y
A X
B X
A Z
A Z
C Y
C Y
A Z
C X
A Z
A Y
A Z
B Y
A Z
A Y
B X
C Z
A Z
B X
A Z
A Z
B X
A Z
A Z
B X
A Z
C Y
A Z
C Z
C Y
B Y
B X
A Z
B Y
A Z
A Z
B X
A Z
A Z
B X
C Z
A Z
C Z
B X
B X
B Y
A Y
C Y
B X
A Z
C Z
A Z
A Z
A Z
B X
A Z
B X
A Z
A Z
A Z
C Z
A X
B X
B Z
A Z
A Z
C Z
A Z
A Z
A Z
B Y
A Y
C Z
B X
B X
C Y
A Y
A Z
C X
B Z
A Z
A Z
C Z
A Z
A Y
B Y
C Z
B X
A Z
A Z
A Z
C Z
A Z
A Y
B X
C Y
A Z
A Z
A Z
C X
B X
A Z
A Z
C Z
B X
A Z
A Z
A Z
A Z
A Z
A Z
C Y
A Z
B X
A Y
C Y
A Z
A Z
B X
A Z
B Y
A Y
B X
A X
A Z
C Z
C Z
C Y
A Z
B Y
A Z
C X
A Z
A Z
B X
A Z
A Z
B Y
A Y
A Z
A Z
B X
C Y
B X
B Y
C Y
C X
A Z
A Z
B Y
A Z
B Y
C Y
C Y
A Z
C Y
A Z
C Z
A Z
B X
A Z
A Z
A X
A Z
A Z
A Z
A Z
B Z
C X
B Y
A Z
C Z
A Z
A Z
A Z
C Z
B X
A Z
B X
C Y
C Z
A Z
A Z
C Z
B X
B X
A Z
A Z
B X
A Z
A Z
C Z
A Z
A Z
A X
C Z
C Y
A Z
A Z
A Z
A Z
C Z
A Z
A Z
B Z
A Z
C Y
A Z
A Z
B Y
A Z
A Z
B X
A Z
B X
A Z
A Z
C Y
A Y
C Y
B Z
B X
B Y
A Z
A Z
C Y
A Z
A Y
B Z
A Z
C Y
A Z
A Z
A X
A Z
B Y
B Y
A Z
A Z
A Z
C Z
C Z
A Y
C Y
B X
A Y
B X
B Y
C X
C Y
C Y
A Z
C Z
A Z
A Z
A Z
B X
A Z
A Z
A Z
A Z
A Y
B X
A Z
A Z
B X
A Z
A Z
A Z
A Z
A X
C Y
B X
A Z
A Y
C Y
C Y
A X
A Z
C X
C Z
A Z
C X
A Z
A Z
B Y
A Z
A Z
A Z
B X
A Z
A Z
B X
B X
A Z
A Z
C Z
C Z
A Z
C Z
B X
A Z
A Z
B X
C Z
C Z
C Y
C Z
A Z
B X
A X
C Z
A X
C Z
A Z
A Z
A Z
A Z
A Z
B X
A Z
B X
C Y
A Z
A Z
A Z
C Z
A Y
A Y
B Y
A Z
A Z
C Y
C Z
B X
B X
A X
C Z
B X
A Z
A Z
A Z
B Z
A Z
C Y
B X
A Z
A Z
A Y
B Y
C Z
C Z
A Z
A Z
A Z
B Y
A Z
C Y
B X
B Z
C X
B X
C Y
A X
C Z
A Z
B X
C X
A Y
C X
A Z
B X
B X
A Z
A Z
C Z
B X
B Z
C Y
C Z
A Z
B Y
A Z
A Z
B X
C Y
A Z
C Z
A Z
B Z
C Z
C Z
A Z
C Y
A Z
A Z
A Z
C Z
C X
B Y
C Y
A Z
C Y
C Y
C X
C Y
A Z
C Y
C Y
C X
C X
A Z
B X
A Z
C Y
A Z
B X
B X
B X
B X
B X
B Y
A Z
A Z
C Z
A Z
A Z
A Z
C Z
C Z
C Z
A Z
A Z
A Y
A Z
A Z
A Y
A X
C Z
A Z
A Z
C Z
B X
C Z
B Y
C Z
A Y
A Z
C Y
B X
A Z
C Y
A Z
C Z
C Y
B X
A Z
A Z
A Z
A Z
A Z
C X
C Z
A Z
A Z
A Z
C Z
A Z
B X
A Z
A X
A Z
B X
A Z
C Z
A Z
A Y
B X
B Z
A Z
B X
A Z
A Z
B Y
A Z
A Z
C Y
B Y
C X
A Z
A Z
A Z
C Z
A Z
A Z
A Z
C Z
A Z
C Y
B X
A Z
A Z
C X
A Z
C Z
A Z
B Y
A Z
A Y
C Z
C Z
A Y
A Y
A Z
A X
A Z
A Z
B X
A Z
A Z
B X
C Z
A Z
A Y
B X
A Z
A Z
C Z
A Z
A Z
B X
B Z
A Z
A X
B Y
A Z
B X
A Z
C Z
B X
C Y
A Z
B X
A Z
A Z
A Z
B Z
A Z
C Z
A Z
C Z
B X
A Z
B Z
A Z
C Z
C Z
B Y
C Z
A Z
A Z
C Y
A Z
A Z
B X
B Y
C Z
A Z
C Z
A Z
C Z
A Z
B X
A X
B Y
A Z
C Z
A Z
C Z
C Y
B X
C Z
C Z
B Y
B X
C Z
B X
C Y
A Z
C Y
C Y
A Z
B X
A Z
C X
C Z
B Y
C Z
B Z
A Z
A Z
A Z
A Z
A Z
A Z
A Z
A Z
C Z
A Z
B Y
C Y
C X
C Y
B Y
B X
A Z
C Z
B X
B Y
A Z
B Y
A Z
A Y
B X
A Z
B X
A Z
C Z
A Z
A Z
A Z
C X
B Y
C Z
C Z
A X
C Z
A Z
C Z
B Y
A Z
B Y
A Z
A Z
A Z
B Z
C Z
A Z
A Z
A Z
A Z
A Z
A Y
A Z
C Z
A Z
C X
A Z
A Z
A Z
C Z
A Y
A Z
A Z
B Z
A Z
A Z
A Z
C Z
C Z
A Y
A Z
A X
C Y
C Y
B Z
A Y
C Z
A Z
C Z
C Z
A Z
A X
A Z
B Y
C Z
B Y
A Z
B X
A Z
A Y
A Z
A Z
A Z
C Z
A Z
A Z
A Z
C Z
A Z
C Z
C Z
C Y
A Z
B X
A Z
A Z
A Z
A Z
A Z
A Z
C X
C Z
C X
A Z
A Z
A Z
A Z
A Z
A Z
C Z
B Y
B X
A Z
C Z
B Z
A Z
C Y
A Z
C Z
A Z
C Z
A Z
A Z
A Z
C Z
A Z
C Y
A Z
A Z
A Z
A Z
A Z
C Z
C Y
A Z
C X
A Z
C X
C Z
C Z
A Z
A Z
B Y
B X
A Z
B X
A Z
A Z
A Z
C Z
B Z
A Z
A Y
B Y
A Z
C Z
B X
C X
C Y
C Y
C Z
C X
B X
A Z
B X
A Z
C Z
A Z
A Y
A Z
B X
A Y
A Z
A Y
C Y
A Y
A Z
A Z
B X
C X
A Z
A Z
A Z
A Z
A Z
A Z
A Y
B X
A Z
A Z
B Y
B X
A Z
A Z
B X
A Z
C Y
C Y
B Y
A Z
A Z
A Y
A Z
A Z
A Y
C Z
C Y
C Z
C X
C Z
C Y
A Z
A Z
C Z
B X
A Z
C Z
A Z
C Z
C X
B Y
C X
B X
C Z
B X
C Z
A Z
A Y
B Y
A Z
A Z
C X
C Y
A Z
B X
A Z
A Z
C Y
C Z
B X
B X
A Z
C X
A Z
B X
C Y
A Z
A Y
B X
C Y
B X
A X
A Z
A Z
A Z
C Z
B Y
C Z
B Y
A Z
A Z
C Z
B X
A Z
A Z
A Z
A Z
C Y
B X
A Z
C X
A Z
C Z
B Z
A Z
A Z
A Z
B Z
A Y
A Z
A Z
C Z
B Z
A X
B X
A Z
A Z
A Z
A Z
A Z
A X
C Z
A Z
C Z
B X
B X
C Y
B X
A Z
A Z
C Y
C Z
B X
C Y
A Y
B X
B X
C X
A Z
A Z
C Z
A Z
C Z
C Z
B X
A Z
B X
A Z
A Z
B Y
B Y
A Z
A Z
C Z
A Z
A Z
B X
A Z
C Z
C Z
B X
C Y
A Z
A X
B X
B X
B Y
B Y
A Z
C Z
A Z
C Z
A Z
C Y
B X
A Z
A Z
C Z
B X
A Z
C Y
A Z
A Z
A Z
B X
A Z
A Y
C Y
C Z
A Z
A Z
B X
C Y
A Z
C X
A Z
B X
A Z
A Z
B Y
B X
C Z
A Z
B X
A Y
A Z
B Z
A Z
C Y
B Y
C Z
C X
B X
A X
B X
B Z
B X
B Y
B X
C Y
B X
A Y
B Z
B X
C X
B X
A Z
A Z
B X
B X
A Z
A Z
C Y
B Y
A Z
A Z
A Z
C Z
A Z
B X
A Z
B X
A Z
A Z
A Z
A Z
C Y
C X
A Z
A Z
A Z
A Z
B Y
A Z
A Z
C Z
C Z
B X
A Z
A Z
B X
A Z
B X
C Y
B X
C Z
A Z
C Z
C Z
A Z
A Z
A Z
A Z
A Z
C X
C Z
B X
B X
B X
A Z
A Z
C Z
B X
A Z
C X
A Z
C Z
A Z
A Z
C Z
A Z
A X
B X
A Z
A Z
A X
A Z
B Y
A Z
A Z
A Z
C Y
C Y
A Z
C Y
C X
A Z
B Y
A Z
A Z
B Y
A Z
A Z
A Z
C Y
B X
A Z
A Z
A Z
A X
A Z
A Y
A Y
A Z
C Z
B Y
C Y
B X
B X
B X
A Z
A Z
A Z
C Y
A Z
B X
A Z
A Z
C Z
B X
A Z
A Z
C Z
A Z
C Y
A Z
B X
C Z
C Y
A Z
C X
A Y
B Z
C Z
C Y
A Z
A Z
A Z
A Y
A Y
C Y
B X
C Z
B X
C Y
B X
B X
A Z
A Z
C Z
A Z
B X
A Z
B X
C Y
C Z
A X
B X
B X
C Z
C Z
C Z
C Z
C Z
A X
A Z
B X
A Z
B X
A Z
A Z
A Z
B X
B Y
C Z
C Y
A Z
C Z
B X
C Z
A Z
C Z
A Z
A Z
A Z
B X
B Z
A X
B Y
C Z
A Z
A X
A Y
A Z
C Y
A Z
C Z
A Z
A Z
A X
A Z
A Y
B Z
A Z
A Z
B X
B Y
A Z
C Z
A Z
A Z
C Z
A Z
A Z
C Y
B X
B X
A Z
C Y
B Z
A Z
B X
B X
B X
B Y
C Z
B Z
A X
B X
A Y
A Z
B X
B X
A Z
B X
A Z
C Z
A Z
C Z
C Y
B X
B X
C X
A Z
A X
A Z
C Y
C Z
C Y
C Z
C Y
C Y
B X
B Y
A Z
C X
C Z
B X
C Z
C Z
B X
A Z
A Z
A Y
A Z
A Z
C Y
A Z
B X
A Z
A Z
C Y
A Z
A Z
B X
A Z
A Z
B Z
A Z
A Z
A Z
A Z
A Z
C Z
A Y
A Z
C Z
C Z
C Z
A Z
B X
B Y
A Z
C X
A Y
A Y
C Y
C Y
A Z
C Y
B X
C X
B X
C Y
A Z
A Y
B X
B X
A Z
A Z
A Z
A X
A Z
B X
B Y
A Y
C Z
B Y
A X
A Z
A X
A Z
A X
A Y
C Y
C Z
A Z
A Z
A Z
C Y
A Z
A X
A Z
A X
A Z
A Z
B X
C X
C Y
C Z
B X
A X
C Z
C Z
C X
A Z
C Z
C Y
A Z
C Z
C Z
B X
A Z
B Y
B X
B X
C Z
A Z
A Z
B X
B X
A Z
C Z
B X
A Y
B Z
C X
A Z
C Y
A Z
A Z
B X
C Z
C Y
A Z
B X
B Y
A Z
B X
B Z
C X
A Z
C Y
C Z
B X
C X
C Y
A X
C X
C Y
B Y
A Z
C Y
C Z
A Z
A Z
A Y
A Z
C Y
C X
B X
C Y
A Z
B Y
A Z
B X
A Z
C X
A Z
C Z
B Y
B Y
B Y
C Y
A Z
A Y
C Z
C Y
B Y
A Z
B Y
B X
A Z
B Z
A Z
A Z
A Z
C Y
A Z
B X
A Z
C Z
B X
B X
C Z
A Z
C Z
B Y
C Y
C Z
A Z
A Z
A Z
A Z
A Z
C Z
A Z
C Y
A Z
B Y
A Z
C X
A Z
A Z
C Y
A Z
B X
A Z
A Z
B Y
A Y
C X
A Y
A Z
A Z
A Z
B X
A Z
B X
C Z
A Z
B X
C Y
C Z
A Z
A Z
C Z
A Z
A Z
A X
B X
B X
A Z
B X
C Y
A Y
A Z
A Z
C X
A Z
A Z
B X
A Z
A Z
A Z
A Y
B X
A Z
B X
B X
B X
B X
A Y
B X
A Z
A Z
B X
C Y
B X
C Z
B X
A Z
C X
A Z
B Y
C Z
B X
A Z
A Z
C Y
C Y
A Z
A Z
C Z
A Y
A Z
C X
C Z
A Z
A Z
B X
A Z
B X
A Y
B Z
B X
A Z
A X
B X
A Z
A Z
A Y
C Z
A Z
A Z
C Z
C Z
A X
A Z
C Y
A Z
B X
A Z
A Z
A Y
C Y
B X
C Z
A Z
C Y
B Y
A Z
B Y
C Z
A Z
A X
B X
B X
A Z
A X
A Z
A Z
A Z
A Z
B Z
A Y
A Z
A X
C Y
A Z
B X
B Y
B X
C Z
A Z
A Z
B X
A Z
C Z
A Z
B X
C Y
C Z
A Z
B Z
C Z
B X
C Y
A Z
C Z
B X
B X
A Y
A Z
B Z
B X
C Z
A Z
C Y
B Y
A Z
B Y
A Z
C Z
B X
B X
B X
C Z
A X
B Y
B Y
A Z
A Z
A Z
A Z
A Z
B X
A Z
A Z
B X
C Z
A Z
C Y
C Z
A Z
A X
A Z
A Z
A Z
B X
B Y
B X
A Z
A Z
C Z
A Z
C Z
A Z
A Z
B X
A Z
A Z
C Y
A Z
B X
A Z
A Z
B X
A Z
C Z
A Z
B X
A Z
A Z
A Z
C Z
B Y
A Z
B X
C X
A Z
B X
A Z
C Y
A Z
A Y
A Z
B Z
B X
C Z
A Z
C Z
C Y
B Y
B X
B Y
C Y
C Y
A Z
C Y
A X
A Z
B Y
A Z
B X
A Y
C Y
B X
C Y
B X
A Z
A X
B Y
B X
C Z
A Z
A Z
A Z
A Z
A Z
C Z
C Z
A Z
A Y
B X
B X
C Z
A Z
A Z
C X
B Z
C Z
B X
A Z
A Y
A Z
A Z
A Z
A Z
A Z
A Z
B Z
B X
A Z
B X
C Y
C Z
A Z
B X
B X
A Z
C X
A Z
B Y
A Z
C Y
B X
A Y
B Y
C Y
B X
B X
B Y
C Y
B X
A Z
C X
A Z
B X
A Z
A Y
A Z
A X
C X
C Y
A Z
A Z
C Y
A Z
A Z
A X
C Z
C Y
A Z
A Z
B X
B X
C Z
B X
A Z
C Y
B X
B X
C Z
A X
A Z
B Z
C Z
C Y
A Z
C Z
C Z
B Y
C Y
B Y
C Z
A Z
C Z
B X
A Z
B Y
B Y
C Y
C Y
A Z
C Z
C Z
A Z
A Z
C X
A Z
A Z
C X
A Z
A Z
A Y
A X
C X
A Z
A Z
A Z
C Z
A Z
A Z
A X
A X
B Y
A X
A Z
A X
B X
B X
A Z
C Y
A Z
C Y
C Y
B X
B X
A Z
B Z
B X
C X
B X
A Z
A Z
A Z
B X
C Y
C Z
A Z
B Y
C Y
C X
A Z
A Z
A Z
A Z
A X
C Z
A Z
B X
A Z
A Z
C Z
C X
C Z
A Z
C Y
B Y
A Z
C Z
B X
B Z
A Z
A Z
A Y
C Y
C Z
C Z
A Z
A Z
C Z
B X
A Z
A Z
A Z
B X
A Z
B X
B X
A Z
C Y
A Z
A Z
A Z
C Z
A Z
C Y
B X
A Z
C Z
A Z
C Z
A X
A Z
A Z
A Z
A Z
A Z
A Z
C Z
A Z
A Z
A Z
B X
C Y
B Z
A Z
C X
A Z
C Z
C Z
C Y
C Y
B X
A Z
C Z
A Z
A Z
A Z
A Z
A Z
A Z
A Y
A Z
A Z
A Z
C Y
B Y
C Z
C Z
A Z
A Z
A Z
A Y
C Z
A Z
A Y
A Z
A Z
A Z
B X
B X
C Y
B X
A Z
A Z
A X
C Z
C Y
A Z
C Y
A Z
A Z
A Z
C X
B X
A Z
C X
C Y
A Z
A Z
A Z
A Z
A Z
A Z
C Z
B X
C X
C Z
B Y
B Z
B Z
C Y
A Z
B X
B X
A Z
A Z
A Z
B Z
B Z
A Z
C Z
A Y
C X
C Y
A X
C Y
A Z
C X
A Z
B X
C Z
B X
B Z
A Z
A X
A Z
B X
C Y
B Y
A Z
C Z
A Y
A Z
C Y
A Z
C Y
B X
A Z
A Z
A Z
A Z
B Y
A X
A Z
C Z
A Z
C Z
B X
C Z
A Z
B Y
A Z
C Y
C Y
C Z
A Z
A Z
A Y
B X
A Z
A Z
C X
B X
C X
A Y
A Z
A X
B X
A Z
B Y
C Z
C Z
C Y
A Z
A Y
A Z
A Z
B Z
C Y
A Z
A Z
B Y";
    int LOSE = 0, DRAW = 3, WIN = 6;
    Console.WriteLine(data.Replace("\r", "").Split("\n")
        .Select(line => {
            var parts = line.Split(" ");
            return (parts[0][0] - 'A', parts[1][0] - 'X');
        })
        .Select(pair => pair switch {
            (var a, 0) => LOSE + (a + 3 - 1) % 3 + 1,
            (var a, 1) => DRAW + a + 1,
            (var a, 2) => WIN + (a + 1) % 3 + 1,

        }).Sum());
}
void p3() {
    var data = @"hqBqJsqHhHvhHHqlBvlfpHQQwLVzVwtVzjzttjQVSjMjwL
gRTRnCRsFNGbTzLjwcSTMmSz
dGgsRWPGdWgZJqBBqhfpPq
HNCNJHCWJRRLqNJWlfrrrwsmlwGmmf
dddvLdLjdDvjvswlmGwlZQtjrt
dvcpbLVcvNJJHNPHSp
QDprSpLQRLQrQDmQcQFZjbbhZwdRsRFbbBss
gWGGPgNvJlgJzDlNGHCGPNZZgFBbsjbFFBwZwfhdZbZB
lHTlGMHlGCPNvClzGzJHvGcrMcVtLqMLcrrQVcVDrqrm
SrBpJFfldlFNslFJBZwsmwgVGGsCCVmZZD
jLtjvzLQMtWjbbQvDZZwGRJGgwggGZgv
MzqqjznQPqnnjznnctnFlSddPfHflhfBJFNdHd
mPNNGVCRngnSbgNw
WqsqlTssgvqvZWZzhsTzWhScdHtfJJnfbtSJwfczdtSS
sqTvhpqQvWZQLmDpDGMDGrgL
DQRcLQVLbbcbrFPcRtTBBBJnTZrrnmZTrMgJ
slGjjjdlhMfvdMQTvg
jlzNhWHhhWjHlwwwGLDSDtPQVtRzRbSzpp
DzDgfvzfDczfHCHSlgHLCmWG
PrpNPJtpPMBssmmVdmSVVr
PSRMwPnMpBNtNBTnnZwDqzQFfwhjZZqfhh
fzfBwhBJFbCwbwwg
strtgtrPgmPgFRsMdRnZRMFn
mrmLPDvGmmtSLDgmSqvHchhcHQzcQQJHBfBh
NsgwPPDgsPHqsTqqmLbLrDRhmrRVrbVW
lFpGFtfFlvSFplGFzptSGSSlhZbhjhfrmWbhLhmLbCZVZjWr
ccplJQSGcSSpVFvNqqsqPNqPQPTwqd
HFhPNNZGqSZrCDBVZBCB
RJTtwczTzCRVQrRHpR
mfgblfltwgwwmlJgcHNnGhSbFNnFsFjFqG
tSRqNRHpHnMSTqpcmrWWfqfmrCQCrW
lhGDtbgVVgDsDbhfldfwrzrfcdzwcr
vtDDhsgFBTNZFBHS
LcNpLLBNgdmHGmsBCrRBQDDwnwRj
hSWfZVhfPJJhfVWbhzbnQqQnRRRqPvCCrjvjwj
ztJSSJhzzSTJrZSbzzJTfzbZmLmggdmNMFNpmtmMGFFGNpmt
TRdFfLbTnLvZVlZvznQV
pgJGprJNhghhNjjPgPNrhNqqlVVlQVVQqQjfzBfQvZzB
rmGmSwJPwJprrNDbsfMRsdTDcDWHfM
QMpZZTtwMBttJMMbVqPpqLqbVlbqqN
rjCFGrdGRwdDHSnqflPVLqqVNllrfl
DHGDRvhvwTZhJWBQ
LcQCCpLQVhrdcFQCJrmmmwDwvDtJJnnw
TsZqqTzMRqZjfsjTTDjsNJnmnStRSHnnSJmnJSNH
sMMZZbDjZFdbVCFphV
FCcdFFGBsdDrbMNSmSdmQR
tVttHVLhvVgfTTtffNSMQRMZSRmMQNmHSb
gngvvwJtVVTvVvvvfwvJThhCzGcnsCjmCDmscPcGCsGsmz
fsnzRNZswZszPRZSLflPpDhlhvgWHmjWvJjh
bVcCqjbdjbcMdBrddrQphvHHmHWlggpWpppqJJ
FBTdFQGrTjLNsNtL
MSWWgMdgdbWbbfdgsPmddgCmSLZvSFvLQvnLrFNZvZFLlLLl
hjpJjGthjRNRptwJJqVBllnvrrlTTQFZqnTZnn
tjDGHwhHHjwjjJGpwjwjjJpwsdgffmbgMsmbDNcMcdmCPdsm
MlDrrgnTDLlCCmCRFgRSCR
HHhbbNQMccQFSNBmmpJNSJ
MwbMbshsswVbHQsbcVMcrtDllTlLqfTGVzLGrTlT
gSFzqQTpmVpQVpLFLrzJJRthlsQBlPsZsBhZst
rwrNDdbHdBhRhZbsjB
vvvMHwHcwGCwwNfMVSrqffWpSfSFzLmT
RNgMgRCCgCfPNfvNgVQmhPVWWjWjLLdLBj
JhJqqqwGDchsBVbdjldmBLmG
schZzDwTJzFTsctHFMtfftgMttpM
GHHWqWFWfWHqbRWsFZFmqZbhNjNDNppNjrjDcQdbpddhjr
wCLCVPfwgVSnPNrQhnDcjcNpDD
TPgLlggJLVwPVVPPwgTwvtSCFmzGGqzGZsGRqWBGfFRFJFRB
LfFLmGTPHBfpHmzBLdZfBfZTbWWttWSDJtWVDJDtSWJzVCCV
RssRRRhrRwQqMQQwnPngQrwvVSjttjJSjSVtWWCWjbVb
hQPnnRnQgNcQqqQQcsZTNTLpdZZfpZFHNpBp
VTCVVnwfFTvFmTCvWwJHdlhHWBJhJBRWNHgh
ZbSMZbctGtScQSZsSpZpPpplhBhtdJDRDJjhdtlRJRjNRj
rLsbBQSMBGspPGcMPQvnqmwzwmCVLmqVmwTF
GVrrQVHHHQGTllQjPHGrlCQpZZpJFWZFzzjBssDJghzhFZ
NSMmWmtqMWqSNbcctdLcdghpgpppssZgbgzpFzJJFs
cfLqLwMRdtNLMlQrvflWTQPffQ
FjtGflGsbNqjsmjGGGbmqQQQBQBTjdpTpJTWvJBddj
CPrVRMnvvLSRHLnBpwdWTRBQwQzBzR
SnZMZPcHMlqchsvGGb
nnJnswzPCtmZDCpmhphD
rSVVLQQQGQjwpdmdNmpS
VvBcQvGcQgGLBgWrwznfJsncltJsJnssPM
dhbwLStzSGmmmzJJvFgJNvnrgvhv
VTsTsRscRsVBMRVTTsjZVPCnDNvfrPfDvNCfBrPNDJ
scHHQTpJZjHwzLSHHtqHSt
MHmFsBDmGpGTBfmCfWCffhzgvf
wcjwnRLPZRVbtCjtNttGCh
ZLGVJRrnPPPwQwPppqDHFpBFTpqFDr
GzMgVfGRdRVngDjhqcjctrtrzzzs
QbQSHwHSLbWwJJFwJPLPSWTQjrhqtjflThccsclCcscCCmmj
JFbNSbLvHHLQFLvwQJFWSBVgMNGdBBnBMVfddpGngB
sZHNJwMsvHswwvMWqBzhChWPMBzd
bHQQQRDHRcRcDljttBldlPBdggBCqB
QjnDbDjjjncRjbQnfZpvssZNHnppFNpvvp
NdmfPNMHMdNMHcffHBCwwsvsRRllvwlcqjwscw
VLhVGLpLShgvrjwFhjqfls
pppnnQtVpGZVWtzGgVzgSSfnCCDmdPBMDbmmDMmdNMBmWNmm
rrfgCrrMllfnBhBrdCFfWLFmmVFVWQvWwtwV
TmSGSqNzvwwTFVvj
NSGSmNbDzpmSpbHmSJqqlMgdMndcgdccdpgllRRh
bbPtLnLcLJzTjcJbbTcttLcSgwmvWfVvfVvBgfmWVJMJMJMW
ZsDNNGDRsrHzpNRwMlgRlgmMWvffWM
FGzQpZGGLFjnSFbF
DQZVDdWWNBtgWnJCnL
SSHSmbHRFqGrmqJrbbGzjmzCwrvgvwnBwnCvprwvpwwPvv
qFFFSmsRRzzFjcFsSsjmzJzflhlZTTThdhVflZlVDDhMcN
cdvrFddqDtDvqgCDtFtrvvvFSmShPShJVJmMJSJbVBgTlmbM
GzjpHzGHHfQNfJSlPQbJBSTJBM
HWpspsWjNsGRHfpwNszzLfGqnCnZtdvvcZvwqFCcZqMZCv
rhHhDhhDrRNwDRhNRLRqNPHjHSpVpVlljSSMnlHnjS
sVVBsFBJBtBSPSjtjPPZZS
JmddVTzsffcGNwzCqNqR
nQfqFtZWFZnFJWfpGqhDsGLLPLVbrPhr
CzjwMTgBgTNSGLVVDPbjbS
wMCmgNNdgvzGdRQcFGFdfJ
CbqCDnwFpDpCVfBPmPffPfRfpB
svcsjlGJGnlnvjvzgQQgGzsZPhBRcRPhWfBZBhPhWRRhPN
sJngnjSGGTGzgJGrrbCqLHrCLwSFqV
hnRnJrwMHnQRRRwMhRrnJRBLZtBPdPSdtZZjjstsLHBP
pBBzzcbTbzCcFzTvlSCZLCtSvvttdZ
FWmNzBFNDnRqNRDM
lvzlSPRDSpDJmNwNGgFpfsFN
WBHrtrLBbhWHtdrFwFFsjzwfFjsdsF
HWnrHnTWhWTCTzTBnRZqDDDCqZcclRvSJR
qcdVbpcMFQcdMGcMFjjpbCnCGmCnJHDHDGJChzCJCJ
wWwlSfBRgRNBDPJnCgCrgzms
tBTfTRwlwRLNwTRmWtNwQFZtqcjcdcqpbdQMqMdd
jJRzwDdwFdJddcjjFCFvQLvNlBhSBhCC
gMMpbHpmnHpWfnlCSBQCPmPllQSs
nHWHVfTGdTSjZzDT
sCVTsBPltgDSbLvRMMDT
WNrjNmWZwmZwfVLvLRbRNvMp
mrHGrmnjqVzjGqdmCltlhFFllgsHBPCg
wbglgTFRblnMRltJBNrDDWQbtdbN
dqCpcjPLGfHZQBJNGGvQDZ
SPssjVSqPCLpScfCgFRVmTlRwndlRwTR
hWMWMhTTDgWMzGMszQShGWJPCQmPVCNPffPfVJftqNQC
nbnHHwLrnswwPVCPZV
nsRvFHLsvplvrcsSWDDDddjjDlMTjT
HRCnhWZhCddgwRcwhdWZHHQLJzSLsSzjJwSjztsmtzsmLF
VlVVNNVqTlMVbTVVMqvqvrDTjQfFtjstJmzftfzsSbtStJQb
pQvvPpBqNBccPWWhcWWc
glJTndVWCTDDVFvnVndVlCvwmBmqBBwQmwPwmMPggGsPGm
NhcSrhNZHhZzRtHcNRrSMSMSFBMGmsQQGLMPPF
hcpRzbcHjRhRbZRzZRztzRpJVdCdnfCnlFvdDTnJCVDjWd
dqWvjjBdWWqMjdvvMJjWWjMGgcfchhzrhwbrwShwgzSqNb
mmmmsVTlVlsLQmnpsNcfgfwNLgczhcGhzw
RslpsnGGGlWdCZFMMRWR
pfSpZSrdSMVDVVLMMDDZpdgRWMPGqqPGqmqqGGhGHNRN
wwQBwtjvvJlvsnbTbvBRHgPmlqhlqWWHqZZgNm
JnQwJvjTtzTZwJnbzzfCrfLCfdfdddfD
PZcnljZFTVmQdlQh
JCLLqBBCSNCCqzJNzStBpStBmsdhVTdmVWsWmdhfLhWVdfrR
BpMzzqSzppMMqpJqqgzPFcjZjnTjgcjbPjPDPZ
HLHWmqBHHqWbMHFtbgWcdhspPcPchndPpn
ZRVSQZRfVZGRgnfsdhLgLndL
jzJRwJRSJJvSlZQGRVwlSGZDMqmmCCCmtNbCmtCMzFNLbF
fDhlBhhZmQRRfHwLdjHFFWQQjQ
ZMTssVVzvbCqJddsLwwH
TzgTbgGGzztMbbvzvVbGvSPBrlShRrfnNrnBDlNcRDZRZB
bjfqGfvFfcHvRwGFRHjbgQtddlQljWpWnQgdWWll
TSPVVSVwSzSDTDlntDndnlWddt
hTrrNCBCVrCrrVshThHHbZvFGscwbfFGRJcZ
jNhMjcgvMNgWggvttcFtchvPFFzdPPrQrrGGQQszRPQrRG
wSCqCmmppbTwPnGHrQdrGCCD
LlqwGmGScLcVthVt
dGGrWWDqmCnwCCQMQrMbFHbMHsPFgPVZbgFPgg
tLRTBwfvTBJcZFNFZRHSHPVN
zjJLTvjcwDzqqhGD
DzrWszFFrtBBhnhNCClHlnHbSbmlSn
ZLwLcVVZcLVpvRwLgMLpLJgPmmQSNSTNbtTvQmCHQCClCHCt
cfgZJwwVLJZPPVpRwzhzrrfGGBrGtDrBsf
BTsdCQsQnwwdcCqqdCnsFvGFpFBvGzrLLmmzpvfG
pjZjgPVlJVMVtgJSWLPvfFFFbNNmNbvbmL
ggVplgJtHSSggdCHsscChhdnnR
JddZcSlvvGFJNWVWFgQgVtFWhg
nDqsHqCszwjCCPMnfhfBhtdWggfg
bqppHqqHHbPLjLCppbwDdRNvdmcTmlNZGGbTTcNv
lcZDSvztcHHcMSZVHVvMZBqBNNFNhBNTTmssBqBcFB
bbGJQdQPpGfQJQdJfLFhmznhzLLNTFhNhf
JGpWpPJddbPpPwpjbtZSzltDgWDSgvtrVv
lJcNlNjPcmtFzHtHBJFg
VPZdwGGWVrsdPWhWwhzzCzzFppDFMBtttFCr
wshsLVfWTnGswdhwcmRjRmScqTcjlPNq
BsBshRZQQsVdsZQZSdsPDwJDHNNHBztNNFMGGwMF
nSTpLjcvHppzwwNt
jcqncjjvfmgrCfvqrnZbmdmSsdbVWlsmhRdW
FjjqRZjZFZWFqPvNvvPQpmbPDCmt
GSnHSnrScncHhrtncGshVbmTmbpVvppCmpCTmTCmCC
rHfnddwdfctlzFFgwqlj
wBwlBmmhwRVThVBmFHnvHMnfsmFfHq
jzwGSGJNZCCssHfsCPfv
GJbzbZdbwJdtdQphRVWQ
ztFZccVHFWHHLSDBpSBPhhZw
fmjsCmqnNTJnvbTvLRPDlCpBSPBpRShl
JqsGTSNJGqvqvNvttGQQGdFrQctrrF
mNZqjTFrZqrTNTTGSSSbrhrhRFRHcnLCzcCdHcLBdccHLzRC
JDDfJswJDWsvgVgwpWnRBlBzGCnlCLBlcCDl
vVGpfQWJpsPQMVgvppVwgWPJrqSZTrZqhTQTrhjbjqSSjZqt
fMSDzDHzpDDVsStdDgwwFZFrrMPCNngCZP
WmLnbWmvvWTTLWWQWRGQvLvrPFZJcgJFCZNrCgGCFCPNPF
QLhlqhljWvRQbbqlqnfStnHdBqVVfzpq
qWZtSQTSvJJvBfJVBBVFNDNHbbdRVPdpNFRF
fGcwwmCgsLhgwLchbpHdrrrphdPRPh
gMjllmcjwsLMgcwlMnSWzSqjSZJqZqZfjQWv
cdRHPjRFRdFVHGcFfFTHQTHVLSQBsbsqSCLqllBJqqbSqLJC
WwWppWgtNrnzzWDmrrmNvWJClJSSbqLJJCGbsCgJbLLg
MnvWpmwvWnvtGPjVRcHRRHMj
dLMDhdHGrcLTvvvstB
nPqgGGNPqRgRSjgmlWjbbTTPPBvpvpTcswwsTF
NRGmgjRnWgnZJqllmSqjnqSDhQzVrdQHDfDrDJQDMHDJzM
RgmcPmGNQwwNmSRwPPgfmrBlCDlGbvFFvtrCsvlrBB
nfdVnjHdMWnTqflFtbjrllrlsCDl
TZJVMhnfMnVMHnpRRNRzgJRzSzgwPR
nTbsblzlnGllmsNnbDwbcWQWwWBFJBQcWQvPWFJM
HRZRdSRdCdLdRftrHHZfSQBMWJMgMzQPFWMJCFWgvQ
HVzrLrrjRjLGnlTnlDlsjj
RQdTdZhWqlZhTdWTqblhNmTMVnnrQsnnpvgMVMHMgHMrgP
fjSSfjcCzGNBjCjsnpMVpnpzvpzsHp
GGwLGSccwjwLwBcGLGSqZWmmdLZLWThmRNZmWR
ncmBrmfdfcVcfGnQdVWRBRvgqNvDvWqzLRqg
PlpPbSbLFPLpFstsbqRqZMqWZqMWSDRzvq
sjtjHCwJwlHfdfjccmmLLQ
tGMtLHQGWzLHFVQtVfQtMWtbgrZNbdfSbccggrcTjTrfbm
swRChnwqhBCCCmSjcNSdcd
vnlnqDRlsRnJJqswJvGMFVMMdWtpVJFMQQFL
ffcHLzGmfvqqfWfF
rJrrRSPCPMCrPRQMNNWJQjJCnqFVVVTStqVnSBdqppBVtpqd
jNQQPjQMCRQwwQbRQbjMgwbNhwWZHHmzmlchlHHHDcLmWzhD
JzvrRHHJvCRZFPFnPgsQVVQNzQTQDttVsB
GSMjpqdbGNppBtDhPN
MbmqMwGbZPmPHJmv
ggVSVWzCNbbNCbRM
DfVhVsVQcQDmpmQTTQLjPjMjbDGNlbRMlNGG
sftTFJJccnphcfncTsfBvwZvrzgzZzZvBrVnzq
qqlClBNSCNSRQMvdrwFvnBrr
GDfhDtszhhsThpTDzsfpprMrFvQvrnnfvQrwHFbfFH
VtggWhpsmGVTGJWMjWjNjPWjLL
NSnShnjsswSsRPNsrnwcwMHfFwGqbvqCbFfg
LDJtzzmgVVlvqGbzvFfzff
mlJmQQpmJpZpBJJdjBNhrnnRdTTgNN
RtRRvbhDFPHHlhtPhRvPRtqjmzqzzwLjHQHLLLQVmVjq
WNNBBZfgfWnqVQwNqzmQcm
MZGfzSrTTnWrrWsTWnfSGbGllPCbGlJRvlPllCtt
phgcNfqgfpZsjjpdsS
brHHnWPbDPDbTPlDJJvJJPrMVVzRSdFzwdZZzFnsdzzVdVZs
SbStvJMDQgNmmtgg
lzDMDhfFRlfMFTfMGPMbFTlMpBHrmpjjCFjmBmrqBjtCmjjq
VvVswLLHZnJJwdndNsSSNBpCpjqjmNgrmCNtmmqm
nHcZWcSVsScTDlPPlTPb
DFMQSlMDpSpFDtDFccHvmqzvbHZjJmvzmmQH
CSgffrPssdgqRbqzzRqZ
dsdsfGsrBPsTVcMctMVNNhtStW
MDWRDWpgDvWpNptvNMnJCHJHMwHCndJfZn
blcrqTFmmcbhLTTTmlBZbjBJdBfBnCbQBdfn
TzlnhcnzTmhLRvSDsRzDPzWR
nwmmPnnPDjclhhjfFzzzwqbFFNHwVqVq
vSQrbpWCvMWQQWQMLgFJVHqzBzJVNqzBFL
CvCvQtWWQmcbtntPcb
qzvtzCCtLsLLzmQCHqpSsHSmfrnNrTrNWWMNGnWZTMZGBvWn
PglVFJwPhbcghVTBpBnWWhWnTMhB
FgjcJccVpwDcwFgVDsqzddqLqSDSCQQL
PLHsSVGGPvSLTffjMJWJJBjfBL
gNhwgTqDcqwpDqNhFpDFhFWfnndjcMJjMWzzBtntJBnW
DFhhQRRwbCbwRQChppmTHCVGTlslrsvrrSVZ
hHnRfSMmsSVrFvQqrmDPgr
jjcBzjZLpWccJLczBjZjWGwCnNzDvrgPCgQvFggvqrQFnr
jtZGpLwjWBpBWcfMTttfbHRnHTbT
swSHffFTVrJlHFSWrTpMZMPhMNBqBhTvhhqZ
bQbLQGGjQLdRCcQjGZBzpzBZqMBBBVdBqh
RjQDQGmgmVVbVcjjmjgcnWtJfrwsfrtHlwswnfHSFw
bVHbbMFDcbDbcmbbHVRbMRFgzSmdzSSTBtTjBdQTzlSldQjT
nqpqCMwJffqQSzTBQlqd
wvJhnnfrfsJrCNffvspRrPPFMbPMRRPPMZgZHR
FnJZnssHvMdJWJpW
mlDlllGrSGmttwlGvZgrzZNWgggzTzdT
bCltZCthtRcbcFbjFL
JGmHrJwGzzpllRZdzZLRcW
htbPSbVtFbbgjhffgPSfTVSDcHDDDLWscRdsZjdZcRssWc
vhfFbFvVHbtTVgFPhmJBCvBNrqBBrGCqQB
BcNQcvcBchSQNccLLvhTqbJZTrHrrrzzqTZMZMFZ
tpHDsnDRslllCCHtwnpsfjRgrJrVMfMmMrFrzVJFzrVZbZrr
tnDpjCwPLNSPdhPH
qnjvvBwBhSSFPgDQLVVDqgLr
WbszTbHTbsbHJWHLLMVZmJPQDrvmZL
ctlRbtCWWtvlSfjljjhBnBNB
TsnvssDDQlRbzMzjDMqHwq
tSGjZCfFZtCFLtVGWGZFbcqwHbhWdbzbwHbdwbdw
ZGBFJFZVBLjStZPBBZLRvlmsPTvsgrrnrTllvs
PgQdNsQFsdNwWqQBsQrTrTLpbrnTpGngnbTG
hCzzMJVDmfzmBDMCfSfhTMGcnpnTcjGrpjbMGjbL
CVVfvCflSHNHvPdBHW
DwlMjMNjStgmthMghg
PTlpHnJJTcZvTTbHZWZTvpqdHhmLgrgdfrhLLsmshmsLts
vncqTbPqcpCnbCPvccZbDBCGzzNBwjDlVVGFjjVR
QsdGGCztZVRddPgndf
DrNNBbwNHNwlbjFbbCNjNwDWWDPPVfDMgfmVMfnMWmmP
rvJBbbBNcLCtJZQL
NfLlqLhbNPddLPqLhpgHwFFwFHHTwRHWwPFTrT
MSMSCnjBnBjCscjVDVljTvHmmWnrwTrwFTrvTWTT
JCMMBzDMJcZZCjDzSBDNJgdfdQlqlLNdhgGLhp";

    Console.WriteLine(data.Replace("\r", "").Split("\n").Select(line => {
        var first = line[..(line.Length / 2)];
        var last = line[(line.Length / 2)..];
        return first.Intersect(last).Select(common => common switch {
                char c and >= 'a' and <= 'z' => 1 + c - 'a',
                char c and >= 'A' and <= 'Z' => 27 + c - 'A'
            }).Sum();
    }
    ).Sum());


    Console.WriteLine(data.Replace("\r", "").Split("\n").Chunk().Select(triple => {
        var (a, b, c) = triple;
        return a.Intersect(b).Intersect(c).Select(common => common switch {
            char c and >= 'a' and <= 'z' => 1 + c - 'a',
            char c and >= 'A' and <= 'Z' => 27 + c - 'A'
        }).Sum();
    }).Sum());

}
void p4() {
    var data = @"36-92,35-78
26-31,25-27
17-72,16-71
3-77,76-90
20-22,21-87
5-75,6-75
42-44,43-95
51-73,50-52
81-89,80-81
7-58,47-58
72-91,20-92
27-64,51-64
5-94,94-95
88-93,88-89
7-45,46-91
30-40,29-29
81-90,80-90
4-71,4-71
68-83,65-84
1-4,3-79
94-95,35-82
30-84,31-97
6-82,81-86
88-88,4-89
41-97,40-89
95-99,34-94
18-56,18-56
53-64,22-53
5-9,9-71
18-41,40-66
38-39,38-78
23-99,22-94
34-54,34-53
33-76,85-94
72-91,63-79
33-94,93-94
56-82,20-56
60-85,60-86
31-76,31-33
29-79,78-80
9-9,66-69
6-97,6-75
40-78,39-77
14-30,14-15
91-94,88-98
1-23,10-23
9-84,7-9
75-76,75-98
45-87,45-46
11-11,11-11
16-64,64-65
60-60,20-61
48-81,93-94
5-48,32-47
37-75,74-75
13-76,13-13
15-93,92-96
41-86,86-96
48-92,64-91
1-9,2-97
43-56,55-55
7-99,98-99
98-99,1-99
15-97,7-99
76-76,32-77
71-76,76-77
13-28,13-29
38-69,42-50
49-49,50-77
68-84,71-83
26-51,32-51
12-40,39-63
21-92,9-88
7-65,65-69
56-76,56-77
40-62,62-62
35-96,92-95
37-99,12-86
94-98,4-81
32-38,34-39
11-94,24-93
1-97,1-60
7-77,7-59
62-81,80-96
38-83,82-82
44-44,43-98
22-23,22-62
28-97,16-97
53-88,67-88
2-2,56-97
41-72,71-72
78-80,47-79
1-1,2-41
23-99,33-98
33-98,61-97
80-95,80-80
8-90,8-91
4-90,50-89
94-94,3-95
3-83,2-99
45-52,12-44
22-65,66-71
9-72,72-73
2-62,2-82
40-61,30-60
57-87,25-56
76-78,77-77
16-88,87-88
14-77,73-77
37-90,36-38
10-75,11-11
37-99,3-97
47-48,45-47
6-92,7-91
60-74,60-61
20-29,8-21
95-96,47-95
63-70,31-63
6-97,6-76
19-91,19-92
50-92,49-50
17-96,18-97
3-4,3-93
13-51,1-13
34-87,23-33
2-99,98-98
4-6,7-76
46-60,36-45
50-80,25-51
60-61,24-61
97-98,3-98
33-34,83-99
30-76,22-77
27-72,72-94
47-96,31-47
26-90,11-27
47-87,3-72
86-91,9-87
32-79,78-79
72-95,94-94
88-96,8-89
11-84,12-98
5-8,8-29
6-38,86-86
14-33,5-33
20-95,39-94
6-99,12-93
52-91,52-90
3-99,2-72
72-96,56-90
7-84,7-8
20-37,14-37
26-74,74-75
40-54,4-71
42-42,93-94
53-69,23-52
20-96,95-96
1-18,18-83
2-3,2-69
36-87,87-87
8-94,8-94
59-99,59-60
15-35,11-35
6-26,5-26
7-12,11-80
79-79,79-79
2-47,46-47
76-96,96-97
12-79,11-77
45-71,46-94
62-63,62-94
30-84,84-85
9-35,9-13
18-60,18-61
13-90,13-85
2-38,1-2
76-81,24-54
48-49,48-95
59-92,58-69
72-72,15-73
15-16,15-99
79-85,60-86
58-58,46-59
55-60,3-54
22-26,26-58
6-86,7-85
66-76,47-66
52-73,52-53
21-76,20-77
44-73,16-77
29-80,30-30
15-47,14-16
3-75,1-3
55-61,9-56
37-55,36-82
64-83,83-84
9-91,41-89
22-86,33-85
6-19,5-34
80-92,93-93
99-99,85-98
96-99,14-97
2-72,5-59
93-94,56-94
34-83,34-86
33-34,34-73
17-84,18-44
82-83,26-83
3-85,18-84
88-88,9-88
93-93,27-94
12-13,12-14
8-90,8-42
78-86,41-77
63-79,80-81
15-66,14-16
77-77,28-76
9-96,8-10
19-78,77-79
13-95,72-93
13-49,14-14
84-85,84-95
25-37,25-37
49-93,49-91
24-78,5-38
2-92,2-92
17-90,16-90
8-50,8-50
76-99,76-98
71-86,77-86
70-71,54-70
8-84,39-84
40-58,55-58
8-87,1-9
5-7,6-85
25-97,24-25
9-97,14-96
17-48,10-47
81-87,30-80
3-83,83-84
2-7,6-42
20-70,70-93
67-85,17-61
7-18,6-20
21-73,20-22
80-81,18-79
43-95,44-96
38-45,44-44
15-91,90-91
32-44,34-43
24-93,24-25
10-16,11-12
22-92,61-92
3-7,6-73
72-79,71-74
34-47,34-46
56-96,75-82
31-48,48-81
54-81,53-82
2-91,93-97
41-74,10-40
51-63,52-86
80-90,75-90
86-87,10-87
80-94,84-94
46-47,9-47
20-77,78-92
38-38,17-37
30-76,5-30
6-58,58-77
10-73,74-85
1-96,2-31
64-73,4-74
60-79,59-77
4-98,8-89
7-9,8-78
4-6,5-95
29-93,53-90
32-94,20-33
78-91,38-79
10-95,96-99
5-97,86-96
6-65,5-64
28-71,7-72
15-54,45-53
3-87,46-99
1-90,40-90
44-86,19-86
3-94,93-94
92-93,1-93
93-93,42-94
90-97,21-91
16-94,16-62
20-27,79-86
28-28,29-39
30-94,29-30
28-68,76-79
54-73,54-55
35-36,35-87
5-42,43-47
10-90,8-91
15-74,23-49
16-97,1-98
2-82,82-89
1-3,2-86
16-87,15-86
9-10,9-60
14-90,10-14
36-85,5-85
36-41,37-89
50-50,15-50
82-86,85-86
28-66,28-32
15-84,14-14
32-69,31-33
31-95,30-96
60-85,61-92
10-87,86-87
96-99,5-97
97-97,39-96
34-35,3-35
51-88,33-88
14-49,48-90
4-51,52-56
7-76,31-75
3-99,3-87
29-86,29-75
61-64,61-65
85-97,13-86
59-67,6-58
51-97,44-50
21-64,64-93
9-56,10-81
20-51,50-51
33-87,32-87
18-79,5-90
51-51,22-52
24-83,21-25
79-93,24-94
14-14,13-83
43-49,44-50
72-72,10-73
14-57,35-57
4-63,3-4
4-93,26-91
26-93,25-26
33-35,33-43
36-87,87-92
27-69,6-70
38-60,30-39
96-96,1-95
2-96,99-99
16-87,88-88
41-52,41-51
61-77,76-82
9-77,3-10
39-50,38-51
12-63,12-62
17-30,18-76
22-86,22-23
3-43,2-44
21-66,66-66
3-64,2-2
60-65,60-65
7-42,74-96
81-98,38-98
16-24,17-23
95-97,32-96
23-38,23-37
42-54,40-46
16-18,13-17
1-81,3-63
16-17,17-50
82-87,88-97
6-47,5-48
8-81,92-94
95-97,11-96
23-94,22-86
6-35,3-56
7-93,90-92
6-49,3-6
24-86,86-86
67-78,67-78
11-98,10-96
87-88,17-88
8-98,99-99
15-73,72-73
1-60,60-60
39-45,33-45
77-95,41-76
5-23,24-99
96-98,97-97
18-55,55-56
97-98,60-90
33-34,13-34
7-96,8-96
7-32,46-61
75-93,20-96
30-99,29-31
4-99,3-97
3-30,29-30
40-40,39-63
48-49,48-60
22-24,6-22
28-28,3-28
64-64,37-63
29-48,5-48
20-37,19-36
77-77,19-77
18-85,2-19
99-99,30-80
35-36,31-35
28-79,75-98
26-94,26-95
22-97,73-96
42-42,5-41
6-8,7-99
10-14,13-14
39-72,39-73
12-90,89-90
93-94,12-94
50-88,89-93
47-88,88-89
39-64,38-38
15-79,78-79
28-32,32-33
50-65,51-51
7-79,6-64
33-49,32-34
82-95,75-96
6-14,4-9
95-95,10-96
14-51,3-15
97-98,21-98
39-61,53-61
68-69,37-68
15-73,73-95
42-70,43-83
1-60,60-61
6-11,11-94
10-79,87-93
36-40,41-41
3-17,3-43
4-81,4-82
90-91,6-90
2-3,5-68
20-98,74-97
4-86,3-85
47-49,23-48
26-89,26-90
31-42,42-47
57-81,39-58
17-87,18-96
9-77,9-78
79-88,80-84
30-84,83-83
15-89,15-88
11-11,10-94
59-82,27-59
8-78,14-33
46-95,85-94
93-97,92-94
4-34,2-3
34-80,30-82
48-83,27-49
47-99,47-48
27-51,51-56
48-49,35-48
31-51,42-51
96-97,19-96
43-44,20-44
76-76,13-75
5-90,27-90
26-27,27-51
47-54,49-95
69-72,4-73
94-98,68-95
1-2,3-86
25-90,24-26
28-90,89-89
91-91,74-91
56-95,40-57
55-92,28-54
28-34,27-35
85-87,28-86
8-10,10-98
45-45,44-44
31-83,27-59
67-84,2-68
17-69,51-69
49-52,34-53
22-81,2-23
95-96,2-96
82-99,17-82
40-57,40-58
9-40,40-40
1-2,3-68
1-97,90-97
2-20,21-34
2-2,1-92
84-86,2-86
7-92,97-99
2-6,5-42
1-52,1-52
98-99,1-98
38-80,29-43
39-69,39-39
97-99,3-98
70-71,8-71
26-52,25-38
8-92,91-92
12-49,13-27
7-95,94-95
91-99,15-92
19-45,18-19
75-76,76-97
59-74,13-86
3-3,2-3
41-60,53-59
75-99,29-96
66-68,18-67
3-91,3-95
33-98,32-34
5-78,10-77
55-95,54-59
6-81,6-81
78-94,52-75
20-93,10-94
12-37,83-99
46-93,92-99
17-79,8-94
45-99,46-46
73-90,68-73
82-83,58-83
15-88,90-94
66-96,18-65
12-87,61-86
35-85,36-84
96-96,28-95
82-95,2-83
1-2,2-99
59-88,59-60
54-90,53-74
35-48,57-57
16-28,16-29
35-45,36-36
25-39,24-58
19-74,27-75
35-73,31-36
16-76,6-87
8-99,7-97
1-1,1-89
9-74,10-75
12-74,11-56
80-81,2-80
13-97,19-92
43-83,82-89
55-59,60-60
20-79,98-98
61-62,61-86
35-82,93-97
21-42,43-43
49-94,43-50
5-81,98-99
5-95,1-95
6-80,91-97
26-85,11-25
34-68,19-48
3-99,3-87
81-81,19-81
8-47,8-48
46-70,46-71
13-73,46-73
13-83,14-82
6-97,96-99
19-33,18-34
30-99,2-99
50-84,1-84
6-97,6-96
96-96,6-96
10-96,9-94
38-39,38-43
18-94,19-97
86-86,87-91
8-98,8-97
84-86,78-85
23-71,72-72
5-99,98-98
26-75,26-75
87-87,20-88
11-85,7-8
52-61,45-62
42-97,42-97
25-89,21-24
95-96,4-93
66-69,67-68
2-93,94-96
8-9,9-81
72-97,21-98
59-75,58-60
14-16,15-96
71-71,70-71
10-79,3-10
54-54,53-98
2-4,3-69
14-66,14-67
16-17,16-65
27-99,76-99
19-94,95-97
3-83,83-84
36-57,31-56
34-83,33-83
56-67,66-88
30-70,17-31
24-80,79-80
43-52,42-43
10-65,66-68
50-69,1-70
10-10,10-33
10-99,9-98
86-96,85-85
30-65,31-60
18-81,17-19
12-84,49-71
19-98,18-18
3-67,4-68
88-99,69-99
11-87,10-11
98-98,37-85
8-90,47-89
2-43,67-79
5-5,4-97
31-94,93-96
13-83,14-14
72-85,71-84
51-53,26-52
3-58,57-62
41-58,41-58
29-84,30-56
89-98,21-90
51-97,50-94
8-96,8-95
1-4,4-81
23-51,52-95
29-61,8-60
11-15,1-5
2-75,7-75
42-66,46-66
53-93,53-94
5-99,3-6
2-5,6-13
65-97,46-99
51-72,50-90
36-65,64-66
1-4,4-94
7-8,7-86
4-89,3-90
61-98,60-62
40-81,19-81
28-73,27-73
4-98,6-97
63-73,63-89
13-97,96-98
5-13,13-88
24-92,7-92
15-31,14-28
2-88,97-97
11-45,11-45
40-82,82-82
51-51,50-60
84-91,21-83
71-98,71-97
21-95,31-94
1-97,1-41
2-3,2-84
3-4,4-91
98-98,17-97
15-15,16-84
43-48,11-37
13-83,11-15
88-96,3-96
55-91,24-55
4-96,96-99
66-82,80-80
3-61,62-93
99-99,11-70
56-56,57-59
40-40,39-99
57-58,35-58
36-95,94-94
2-63,64-81
18-24,24-62
63-98,12-63
81-81,18-80
19-61,19-20
11-18,11-22
9-14,9-11
6-7,6-85
41-51,41-41
18-43,17-19
8-70,71-84
76-76,11-75
87-88,9-88
55-73,54-56
56-57,57-68
4-11,11-88
8-81,11-80
25-70,71-71
22-45,23-48
14-84,5-95
58-68,47-58
17-66,38-66
58-89,88-89
7-28,14-27
31-87,22-63
92-96,39-91
14-41,14-14
62-65,3-61
48-66,48-66
4-95,2-96
7-7,8-77
17-50,18-51
80-89,14-79
28-50,28-89
32-40,7-40
19-77,18-19
34-60,1-6
33-50,51-91
16-17,16-54
29-45,19-32
36-42,37-37
1-95,3-87
70-93,92-98
4-11,46-79
20-82,1-19
40-41,2-42
75-77,31-76
8-14,14-78
69-91,68-69
9-63,77-89
47-70,39-47
3-98,97-98
84-84,30-84
9-9,10-95
24-24,23-92
27-95,21-95
2-99,2-99
38-59,54-59
20-81,15-82
6-73,13-73
98-98,99-99
18-92,17-19
93-94,5-93
13-99,13-14
34-34,34-79
12-88,87-96
55-67,83-89
6-30,1-31
24-80,24-80
5-90,16-91
49-68,10-49
11-14,13-92
23-85,24-92
67-81,67-68
32-99,32-89
85-86,35-84
21-21,20-60
25-85,25-84
20-56,21-21
6-9,9-71
82-98,26-81
37-37,15-38
5-97,3-5
11-18,19-26
14-69,6-83
51-73,50-75
29-85,19-28
8-59,5-60
92-92,46-93
8-57,7-9
16-16,16-84
10-32,10-11
1-86,1-86
26-98,19-91
7-97,6-94
41-81,42-80
3-97,13-98
24-25,24-87
54-54,18-55
49-49,33-50
6-80,79-80
38-95,38-95
52-84,52-77
6-92,1-6
1-3,3-88
6-71,2-5
16-46,2-17
79-86,15-80
6-6,5-54
8-41,11-40
53-98,52-54
2-79,1-3
51-70,50-52
55-55,56-69
4-61,10-97
75-92,12-76
27-79,92-94
6-55,5-7
19-25,20-22
79-92,65-93
95-99,27-94
23-88,23-88
82-83,83-96
2-94,2-74
14-71,6-14
6-14,5-7
3-89,1-2
48-82,13-26
48-80,26-48
43-93,92-92
32-51,85-91
3-5,5-90
99-99,95-97
38-39,38-88
93-95,75-94
15-64,14-16
84-94,67-90
22-47,48-80
41-56,5-57
2-80,7-79
22-71,21-23
21-49,20-22
95-95,61-95
56-57,57-58
25-27,26-62
52-76,41-61
28-98,71-98
74-93,4-93
35-74,73-98
4-57,3-57
4-99,32-98
8-75,7-75
23-67,23-68
15-15,15-56
3-97,1-98
10-90,91-91
18-30,17-19
10-38,1-90
50-73,37-73
40-91,92-95
39-39,40-91
86-87,7-87
12-37,37-94
78-87,14-50
89-95,11-90
60-98,4-94
41-82,81-98
66-92,67-67
88-92,5-89
86-91,85-86
6-98,97-97
34-87,95-95
44-46,45-78
7-87,17-87
7-96,95-97
15-75,76-85
1-98,2-93
3-55,50-54
87-94,72-86
19-70,19-63
7-51,50-79
3-73,3-73
32-38,31-34
2-99,98-98
3-4,5-88
16-37,38-38
39-48,40-42
65-77,65-77
5-94,3-96
28-89,97-98
34-77,53-77
24-54,25-28
6-48,7-7
6-38,3-6
10-83,9-11
26-65,64-84
50-85,84-86
36-91,37-92
2-2,2-84
4-6,5-83
18-71,35-70
5-85,5-64
94-99,13-95
1-32,2-9
11-71,53-98
99-99,18-97
26-46,22-27
39-78,91-93
38-43,38-44
14-76,15-54
91-95,23-90
7-55,3-55
91-95,29-92
10-23,9-59
21-67,20-66
17-27,20-26
2-94,1-94
16-97,13-97
67-68,67-94
81-83,27-82
51-69,81-96
79-81,57-80
55-55,55-68
34-96,34-95
83-85,19-84
4-81,3-80
16-23,23-97
45-74,46-74
2-98,98-99
37-59,35-59
72-74,70-74
16-91,91-92
43-68,44-75
4-77,7-92
93-94,6-94
18-92,93-94
51-76,76-76
17-42,41-79
61-62,49-61
19-77,9-9
11-70,43-69
21-62,53-61
40-77,78-89
10-55,10-46
5-70,98-99
19-21,20-86
7-68,10-67
2-24,3-3
65-70,46-66
1-78,2-77
71-95,17-72
25-88,88-89
13-98,14-14
7-81,7-8
8-99,8-98
13-97,14-97
3-56,3-4
89-99,29-73
41-50,28-51
76-88,76-87
82-96,25-31
30-41,8-42
27-39,38-38
46-71,46-71
23-88,10-88
28-83,28-84
82-94,81-86
99-99,1-99
4-46,4-63
7-68,67-99
5-92,93-97
91-95,3-89
57-76,3-70
1-89,53-88
4-32,6-31
75-76,2-76
17-17,18-37
43-90,89-94
4-65,1-66
88-91,90-91
43-57,44-84
2-95,2-94
3-31,1-32
12-94,30-93
12-94,5-94
35-54,34-54
30-81,30-30
51-53,52-98
68-97,41-69
32-94,19-31
14-70,7-15
1-99,41-98
41-63,41-63
88-88,27-87
54-56,53-55
26-26,27-71
29-64,1-62
4-54,1-92
88-89,22-89
15-88,15-16
21-95,43-96
12-13,12-27
10-96,23-96
82-83,22-83
13-85,13-86
77-83,4-65
3-91,3-63
73-98,73-98
49-49,8-50
3-96,4-4";
    Console.WriteLine(data.Replace("\r", "").Split("\n").Count(line => {
        var parts = line.Split(",");
        var a = parts[0].ParseRange();
        var b = parts[1].ParseRange();
        return a.Covers(b) || b.Covers(a);
    }));
    Console.WriteLine(data.Replace("\r", "").Split("\n").Count(line => {
        var parts = line.Split(",");
        var a = parts[0].ParseRange();
        var b = parts[1].ParseRange();
        return !(a.IsClear(b) || b.IsClear(a));
    }));
}
void p5() {
    var data =
@"move 1 from 8 to 4
move 1 from 7 to 8
move 1 from 6 to 3
move 2 from 6 to 5
move 8 from 5 to 1
move 5 from 3 to 8
move 1 from 7 to 8
move 8 from 1 to 2
move 3 from 3 to 9
move 13 from 8 to 7
move 2 from 1 to 2
move 1 from 6 to 2
move 2 from 1 to 7
move 4 from 4 to 2
move 10 from 9 to 4
move 7 from 4 to 1
move 1 from 6 to 7
move 2 from 4 to 5
move 1 from 5 to 2
move 1 from 5 to 8
move 3 from 1 to 5
move 2 from 4 to 6
move 2 from 6 to 4
move 2 from 4 to 5
move 5 from 1 to 5
move 1 from 9 to 5
move 1 from 8 to 5
move 14 from 2 to 6
move 12 from 7 to 4
move 4 from 6 to 7
move 3 from 6 to 4
move 4 from 4 to 9
move 2 from 4 to 6
move 2 from 9 to 3
move 9 from 4 to 3
move 2 from 1 to 6
move 5 from 7 to 3
move 4 from 7 to 8
move 2 from 6 to 7
move 3 from 6 to 7
move 10 from 5 to 8
move 8 from 8 to 9
move 10 from 9 to 7
move 12 from 7 to 5
move 1 from 1 to 5
move 3 from 7 to 2
move 10 from 3 to 7
move 6 from 5 to 7
move 2 from 6 to 1
move 12 from 2 to 7
move 3 from 3 to 1
move 1 from 6 to 5
move 10 from 5 to 7
move 3 from 3 to 4
move 34 from 7 to 1
move 2 from 6 to 9
move 1 from 6 to 3
move 3 from 1 to 3
move 1 from 7 to 3
move 3 from 3 to 6
move 1 from 4 to 3
move 22 from 1 to 6
move 2 from 9 to 7
move 2 from 4 to 9
move 12 from 6 to 8
move 1 from 7 to 6
move 4 from 8 to 2
move 1 from 7 to 1
move 6 from 8 to 9
move 1 from 2 to 5
move 1 from 2 to 7
move 13 from 1 to 2
move 2 from 3 to 1
move 4 from 7 to 5
move 3 from 9 to 4
move 1 from 1 to 8
move 4 from 5 to 2
move 12 from 6 to 2
move 3 from 1 to 3
move 1 from 4 to 1
move 9 from 8 to 5
move 6 from 5 to 7
move 2 from 4 to 5
move 5 from 9 to 6
move 5 from 3 to 7
move 30 from 2 to 6
move 11 from 7 to 9
move 36 from 6 to 3
move 10 from 9 to 3
move 1 from 6 to 5
move 3 from 5 to 2
move 2 from 5 to 2
move 28 from 3 to 4
move 6 from 4 to 1
move 1 from 2 to 3
move 2 from 5 to 2
move 6 from 1 to 7
move 1 from 1 to 6
move 6 from 3 to 5
move 6 from 7 to 2
move 1 from 6 to 4
move 2 from 2 to 6
move 8 from 2 to 1
move 3 from 2 to 4
move 2 from 3 to 4
move 4 from 3 to 4
move 1 from 6 to 1
move 2 from 1 to 8
move 1 from 6 to 4
move 1 from 9 to 3
move 2 from 5 to 4
move 1 from 8 to 7
move 1 from 7 to 9
move 1 from 3 to 5
move 1 from 8 to 6
move 34 from 4 to 9
move 13 from 9 to 8
move 1 from 8 to 2
move 1 from 2 to 1
move 4 from 5 to 1
move 9 from 8 to 7
move 11 from 1 to 3
move 1 from 4 to 2
move 1 from 6 to 7
move 1 from 9 to 4
move 1 from 4 to 1
move 1 from 5 to 3
move 5 from 7 to 8
move 1 from 2 to 5
move 1 from 5 to 1
move 21 from 9 to 5
move 19 from 3 to 4
move 17 from 4 to 6
move 2 from 8 to 4
move 2 from 6 to 8
move 2 from 6 to 9
move 2 from 7 to 6
move 1 from 4 to 9
move 6 from 5 to 6
move 1 from 9 to 8
move 8 from 5 to 7
move 15 from 6 to 2
move 1 from 9 to 7
move 2 from 1 to 6
move 3 from 4 to 7
move 1 from 1 to 6
move 3 from 5 to 4
move 2 from 5 to 6
move 2 from 4 to 1
move 13 from 7 to 8
move 2 from 6 to 4
move 3 from 2 to 4
move 2 from 7 to 6
move 5 from 4 to 6
move 4 from 2 to 6
move 1 from 1 to 9
move 18 from 8 to 3
move 1 from 4 to 5
move 1 from 2 to 7
move 15 from 3 to 1
move 1 from 5 to 1
move 3 from 3 to 4
move 1 from 5 to 4
move 1 from 5 to 6
move 1 from 6 to 8
move 2 from 8 to 2
move 3 from 1 to 8
move 6 from 2 to 8
move 1 from 7 to 6
move 12 from 8 to 5
move 2 from 9 to 6
move 6 from 1 to 5
move 9 from 5 to 3
move 1 from 2 to 8
move 20 from 6 to 9
move 3 from 6 to 7
move 1 from 7 to 1
move 7 from 3 to 4
move 2 from 7 to 2
move 1 from 8 to 7
move 8 from 4 to 1
move 11 from 1 to 7
move 10 from 7 to 6
move 2 from 4 to 9
move 21 from 9 to 3
move 6 from 5 to 9
move 6 from 3 to 2
move 1 from 4 to 5
move 1 from 7 to 9
move 8 from 3 to 2
move 9 from 2 to 1
move 14 from 1 to 6
move 1 from 1 to 7
move 4 from 3 to 8
move 3 from 8 to 7
move 5 from 7 to 4
move 3 from 6 to 9
move 2 from 3 to 7
move 3 from 5 to 6
move 1 from 5 to 6
move 2 from 7 to 9
move 1 from 8 to 3
move 22 from 6 to 5
move 3 from 9 to 4
move 3 from 6 to 1
move 5 from 4 to 6
move 9 from 2 to 8
move 4 from 6 to 1
move 1 from 3 to 2
move 1 from 2 to 3
move 6 from 8 to 1
move 2 from 4 to 3
move 10 from 1 to 7
move 2 from 8 to 7
move 1 from 9 to 6
move 4 from 3 to 5
move 1 from 8 to 3
move 4 from 9 to 8
move 1 from 4 to 3
move 1 from 3 to 8
move 3 from 7 to 6
move 1 from 1 to 5
move 10 from 5 to 9
move 5 from 6 to 4
move 5 from 8 to 5
move 4 from 9 to 8
move 3 from 3 to 9
move 2 from 8 to 6
move 5 from 7 to 5
move 1 from 4 to 1
move 1 from 1 to 2
move 2 from 8 to 6
move 1 from 2 to 1
move 1 from 7 to 2
move 1 from 1 to 5
move 28 from 5 to 9
move 3 from 6 to 1
move 1 from 6 to 9
move 1 from 2 to 9
move 2 from 1 to 2
move 2 from 7 to 5
move 1 from 7 to 5
move 1 from 2 to 5
move 3 from 1 to 9
move 1 from 5 to 8
move 15 from 9 to 2
move 11 from 9 to 4
move 11 from 4 to 7
move 2 from 4 to 1
move 7 from 7 to 8
move 1 from 1 to 4
move 20 from 9 to 1
move 2 from 7 to 8
move 1 from 4 to 6
move 1 from 6 to 2
move 2 from 7 to 5
move 1 from 9 to 6
move 1 from 4 to 9
move 4 from 5 to 2
move 1 from 6 to 8
move 1 from 4 to 9
move 11 from 8 to 3
move 1 from 1 to 9
move 1 from 5 to 9
move 1 from 2 to 6
move 4 from 9 to 8
move 4 from 8 to 7
move 10 from 1 to 6
move 7 from 1 to 5
move 8 from 3 to 4
move 2 from 3 to 5
move 3 from 7 to 4
move 1 from 4 to 5
move 2 from 1 to 6
move 9 from 2 to 6
move 1 from 7 to 9
move 1 from 3 to 2
move 7 from 4 to 3
move 3 from 3 to 7
move 5 from 2 to 3
move 1 from 1 to 9
move 2 from 2 to 7
move 1 from 4 to 6
move 3 from 5 to 6
move 4 from 7 to 6
move 1 from 7 to 4
move 1 from 4 to 7
move 1 from 2 to 8
move 1 from 7 to 1
move 27 from 6 to 2
move 1 from 4 to 1
move 7 from 5 to 7
move 1 from 4 to 1
move 1 from 8 to 3
move 3 from 7 to 3
move 2 from 1 to 6
move 2 from 9 to 1
move 18 from 2 to 1
move 2 from 7 to 5
move 12 from 3 to 4
move 1 from 5 to 6
move 3 from 6 to 1
move 24 from 1 to 8
move 9 from 2 to 4
move 3 from 2 to 1
move 2 from 6 to 3
move 1 from 6 to 9
move 1 from 5 to 6
move 1 from 6 to 2
move 1 from 1 to 7
move 1 from 2 to 1
move 1 from 1 to 2
move 3 from 7 to 2
move 2 from 1 to 4
move 8 from 4 to 5
move 22 from 8 to 1
move 1 from 8 to 1
move 13 from 4 to 1
move 1 from 8 to 5
move 3 from 3 to 1
move 1 from 2 to 7
move 38 from 1 to 6
move 27 from 6 to 1
move 2 from 2 to 9
move 3 from 9 to 8
move 2 from 8 to 6
move 1 from 8 to 3
move 1 from 2 to 1
move 1 from 3 to 6
move 1 from 2 to 3
move 1 from 7 to 6
move 7 from 6 to 3
move 20 from 1 to 4
move 6 from 1 to 6
move 17 from 4 to 7
move 3 from 6 to 5
move 14 from 7 to 9
move 8 from 5 to 7
move 3 from 1 to 6
move 3 from 3 to 1
move 2 from 4 to 1
move 4 from 5 to 1
move 9 from 6 to 2
move 3 from 6 to 4
move 4 from 7 to 8
move 4 from 1 to 6
move 2 from 3 to 1
move 6 from 6 to 7
move 4 from 8 to 7
move 4 from 2 to 1
move 4 from 2 to 3
move 4 from 9 to 5
move 8 from 9 to 5
move 1 from 9 to 5
move 1 from 2 to 1
move 16 from 7 to 2
move 10 from 2 to 9
move 11 from 9 to 8
move 4 from 3 to 5
move 3 from 1 to 4
move 13 from 5 to 7
move 10 from 8 to 5
move 2 from 1 to 5
move 11 from 7 to 4
move 2 from 3 to 6
move 3 from 7 to 6
move 1 from 3 to 2
move 1 from 1 to 8
move 2 from 8 to 4
move 3 from 1 to 2
move 4 from 6 to 1
move 7 from 1 to 9
move 1 from 6 to 7
move 2 from 5 to 8
move 1 from 2 to 9
move 1 from 7 to 8
move 5 from 5 to 8
move 1 from 2 to 3
move 4 from 2 to 5
move 17 from 4 to 1
move 10 from 5 to 9
move 2 from 4 to 2
move 2 from 4 to 1
move 1 from 4 to 9
move 1 from 3 to 7
move 1 from 7 to 8
move 12 from 9 to 2
move 1 from 2 to 4
move 1 from 4 to 1
move 1 from 1 to 9
move 1 from 8 to 1
move 8 from 8 to 3
move 2 from 5 to 1
move 3 from 1 to 9
move 1 from 2 to 6
move 4 from 3 to 7
move 1 from 7 to 6
move 10 from 9 to 2
move 1 from 5 to 9
move 1 from 9 to 3
move 17 from 1 to 6
move 2 from 1 to 2
move 11 from 6 to 7
move 2 from 2 to 9
move 2 from 9 to 5
move 12 from 7 to 9
move 20 from 2 to 7
move 5 from 9 to 5
move 21 from 7 to 1
move 2 from 6 to 4
move 11 from 1 to 4
move 5 from 4 to 6
move 1 from 7 to 8
move 5 from 9 to 3
move 5 from 2 to 8
move 3 from 9 to 3
move 2 from 8 to 7
move 2 from 1 to 7
move 10 from 6 to 3
move 1 from 2 to 6
move 2 from 8 to 5
move 1 from 6 to 5
move 2 from 4 to 9
move 1 from 4 to 5
move 8 from 1 to 6
move 4 from 4 to 8
move 6 from 8 to 4
move 21 from 3 to 9
move 5 from 9 to 2
move 4 from 7 to 9
move 22 from 9 to 3
move 9 from 6 to 4
move 2 from 2 to 6
move 2 from 2 to 1
move 2 from 5 to 7
move 7 from 5 to 4
move 22 from 4 to 2
move 2 from 5 to 4
move 16 from 2 to 5
move 2 from 6 to 2
move 13 from 3 to 4
move 5 from 5 to 7
move 15 from 4 to 7
move 3 from 2 to 3
move 3 from 2 to 5
move 1 from 1 to 2
move 1 from 2 to 4
move 6 from 5 to 9
move 4 from 3 to 6
move 2 from 5 to 9
move 1 from 2 to 7
move 1 from 1 to 9
move 2 from 4 to 5
move 19 from 7 to 8
move 1 from 6 to 5
move 1 from 5 to 1
move 1 from 9 to 4
move 5 from 8 to 1
move 3 from 8 to 1
move 7 from 5 to 6
move 3 from 7 to 1
move 1 from 2 to 5
move 4 from 9 to 8
move 2 from 5 to 6
move 10 from 1 to 4
move 1 from 7 to 2
move 6 from 3 to 4
move 9 from 4 to 3
move 2 from 2 to 8
move 2 from 9 to 5
move 5 from 8 to 3
move 1 from 1 to 5
move 2 from 5 to 6
move 1 from 1 to 7
move 2 from 9 to 7
move 8 from 4 to 7
move 3 from 3 to 9
move 4 from 6 to 3
move 1 from 5 to 3
move 1 from 7 to 2
move 1 from 2 to 1
move 1 from 6 to 5
move 1 from 5 to 2
move 10 from 7 to 4
move 10 from 4 to 1
move 10 from 1 to 8
move 1 from 9 to 6
move 1 from 1 to 4
move 11 from 8 to 1
move 2 from 9 to 5
move 5 from 6 to 3
move 1 from 3 to 8
move 4 from 1 to 3
move 5 from 3 to 8
move 1 from 4 to 7
move 1 from 7 to 2
move 13 from 3 to 5
move 2 from 2 to 1
move 4 from 3 to 1
move 4 from 5 to 6
move 3 from 6 to 2
move 4 from 5 to 4
move 8 from 8 to 7
move 1 from 3 to 9";
    {
        LinkedList<char>[] stacks = {
        new("JHPMSFNV"),
        new("SRLMJDQ"),
        new("NQDHCSWB"),
        new("RSCL"),
        new("MVTPFB"),
        new("TRQNC"),
        new("GVR"),
        new("CZSPDLR"),
        new("DSJVGPBF")
    };
        IEnumerable<T> PopFrom<T>(LinkedList<T> l, int count) {
            return Enumerable.Range(0, count).Select(i => {
                var item = l.Last();
                l.RemoveLast();
                return item;
            }).ToList();
        }
        void PushTo<T>(LinkedList<T> l, IEnumerable<T> tt) {
            //Console.WriteLine("Pushing " + String.Join(" ", tt));

            foreach (var t in tt) {
                l.AddLast(t);
            }
        }

        data.Replace("\r", "").Split("\n").ToList().ForEach(line => {
            var m = new Regex("move (?<count>[0-9]+) from (?<from>[0-9]+) to (?<to>[0-9]+)").Match(line);
            var count = int.Parse(m.Groups["count"].Value);
            var from = int.Parse(m.Groups["from"].Value) - 1;
            var to = int.Parse(m.Groups["to"].Value) - 1;
            PushTo(stacks[to], PopFrom(stacks[from], count));
        });
        //stacks.ToList().Select(s => string.Join("", s)).ToList().ForEach(Console.WriteLine);
        stacks.Select(s => s.Last()).ToList().ForEach(Console.Write);
    }
    Console.WriteLine();
    {

        LinkedList<char>[] stacks = {
        new("JHPMSFNV"),
        new("SRLMJDQ"),
        new("NQDHCSWB"),
        new("RSCL"),
        new("MVTPFB"),
        new("TRQNC"),
        new("GVR"),
        new("CZSPDLR"),
        new("DSJVGPBF")
    };
        IEnumerable<T> PopFrom<T>(LinkedList<T> l, int count) {
            return Enumerable.Range(0, count).Select(i => {
                var item = l.Last();
                l.RemoveLast();
                return item;
            }).Reverse().ToList();
        }
        void PushTo<T>(LinkedList<T> l, IEnumerable<T> tt) {
            //Console.WriteLine("Pushing " + String.Join(" ", tt));

            foreach (var t in tt) {
                l.AddLast(t);
            }
        }

        data.Replace("\r", "").Split("\n").ToList().ForEach(line => {
            var m = new Regex("move (?<count>[0-9]+) from (?<from>[0-9]+) to (?<to>[0-9]+)").Match(line);
            var count = int.Parse(m.Groups["count"].Value);
            var from = int.Parse(m.Groups["from"].Value) - 1;
            var to = int.Parse(m.Groups["to"].Value) - 1;
            PushTo(stacks[to], PopFrom(stacks[from], count));
        });
        //stacks.ToList().Select(s => string.Join("", s)).ToList().ForEach(Console.WriteLine);
        stacks.Select(s => s.Last()).ToList().ForEach(Console.Write);
    }
}
void p6() {
    var data = @"mzrzqrzqrrmcmgmrggvjvcczbczccdwdcwcpwwclwwbttdntnsnllpggqhgqgzqggvjjjfqfhhbbvzvmzvvfccnznwntnptpgpcplpwwvgvzvvcgvvbcvcqqhnqqbsbdsbbbgtgvtgvtgvvrfvvjbjcbcchnhrhvvrmmwzwzmwmggjwwwwzrrmbmbmbrrdjrjfrrrmrffzgghtggwddtllhchdhsshjjwfwsfssnbbnjncczsczzvpvssljsjgsjgjcgjggspsfsfhfppsqqzlzjllblsldsldlndnhnffflwfwmwssvzzvqzzblzbbmrrfnrrqnnhfnnhphbhrrlvrlvrvcrrltrtmrrcscchdhqhfffrddzsszwwrbrfftddbwwtdtnndrrghgcgfgrglllcdcsswvwsvszsddjwdwwcvwvmvhhlqlddbhbrrnddpqpttrtctmcmjjtvjjfvvlcldltdtdqdllnrncrnrznzfnfsfnndqqbhhlnhhhsmhhfghgppflllrhhvdddvrvnrnpplwplldttswsbwwtbbvwbwnnhcczmczmczclcttwcchllmsmbbrvbbsjsswbwwbtwtgtrgtrgrnggqwgwmwrmrqmmghhtbbrppjmpppjtjtffvqvbbwsspzsstlstltrrtmtrmrzmmgqqgmmpzmpzpmmgnnrjjgrjjhgjjsccjllwzzsddznnrsrttdllcnntvnttqjjqljqqwlqlmmfdfttzzvgvtvjjwvwsvvhbhrbhbwbzbppbplphpjpzppljjnttnvnggqbqffqgqrrjwjcjllcblbqqglqgqjqrrffjqqqcvqccgrgqgrqrnqqhphccvwwsgspprmprrwdrwrdwdrwrwswbsbcctscttwvvvstvthtrhhddtppgwwqpwwzpzgzszgzvggzqqmbqqrqsrqrmmjjfggztzdzvvqdqzddrrnmmtccsstdsdrrmrnnzzpggbmbqbcbzczppbjbssfzfcfvcvlclgcglcgllvclcwwwpmwwjrrgtrtfrrnznssvvrjvrjrgjrrcsrrstrsrhrpplfljjwrwbbffdpfpzffrhhjrjdrrgpggbhhschcdcdcqcnncjcvjcvjvbvcbvbssnhhsddclcrcrjrdrtdtqdqrddddlcdcttzzlslblbqqcmmdgmmsnmnmccqmmljjncnhnchcdchddwsdssdrsscfcnffcqfqtfqqjcjrrvbrvvhsvvlqlwwsccjbbgpgzgcgbgzgccpvcpvpddqrrqfqtqrqqcjjwvwttrwwblwlrwllnsshdhqdhqqjllzlflvlgllhnllstsbbdqqpnpwpmwwzhzvzcclcvcfvcvssdcdvdpphcphcppffndfnfmfbfwwgzwwwvhwwmcwwwtmtgtvggvbggzzthzzlbzbzmmhlllvgllmfmpmbbldbdnnzzjcctvvsdvssrpsslglqggcchvcvllzhhbcczjjgllvqlvlflglwwscctfcbmdjhgwtfhjrgvvvrmdcpsrtsnvhwnnznnnmrhcnlnmjvdbqztspwbdwlttdtwlwdvqjpgqdzbnssglqczqwvfgdlbdmsbbmggjdhddzvzlqhrggvvccmcmtqdmmpqvvstmqgvntdsmjbzbwstdrmjjmzfgmczjrftwrwnfbdmlddvzdfwwztldqfvdswfdwrfcgptmmjnzngwnflzlvtwpdsvllfwqjnjjjbfcwmgrvlhdvpgprnjthlqlbtlhflzwqjwtqtdzcvqbgtjlnmwchpjrgfndrnzwctjwvwsvflmgnqmplhhwljqcshqqldcnfrdbdcbslrtbnqrvhhjrddmjbtmcjzlqcdcqbfftsmpdpnfrjjwmdpmrvjjmppbnmcbvnzbphjcjlldnpdcwsqfgpmbszvjbpzngvncbfncpmghfrsssrnbbmhnjjvgmjzwtwlpszphgwvtjzdsmvvhnrplmnrllvqvphtbbrnlwmffdmmbhvzfcnbnlbspfwbcbjwgpnbsfpfbdqbnpfcqpngfqwlwcgrzlvfqgfsbppgmfzgjdntdvzvzclbrfwpqmvgmtmppsjzjhqbgjnntdnwvwljndqbtfgrjcfnlpsgsmbdljdzqfclgwhdgndzwbcthmrgzcjbhrrltlsznbsvswtsjbhwqzwchwzbtqmnrqfrzspwrqwwqwvczmntwggltjmvwdftplrgtrltmpvvgslvhctnwwcgtblmqtnsmqdgcbvzlcbrrsstzgzrgzgtmqtvsnzqqwlfgrjbdsvpdjpgmmczddbptwvpthvdjvrpqsbbgctrpqsdnczzbttdrbflrllrnvjswslnghdqfqlnbcctwbnpvspfmrcnprpjzgwsdwlszzpdcgvzjsjtdgjnpwgtqmvsmsvzddcmfwtqjghrrrmvcjbccgrngcvvfvrrmmqmzsvhdqsfqpqnnhhpffrtblnzhwqmsgvvzvgpbczsznzlnvsgjjzqbpjmvpjzqqpzpvplwsvgtwvrhlvggrpvztvchbcwflwhwmvdslvhsgpcqhdhcpvclgmzdngsmbplzrqgwflltzgsglflhqhpnnfszvtgprqhnjlrvwfsjfpcjzbznsprtldvwjlnhqsdlfnwtlpzldfpnjpnnqfgqqrjrnszznlrjgwwlnbbznzcshtfqcprphgsldtgzzgqjvmjrtfhmgptrnqzmtfclqwgprvjptntgwhbqwhdjcfjtrmdwbslhqwgtcqwhjhhmltrlsqbvzqsjqsczvsqlsjdgmnjnpvmmwbsfnfnshmlrdgslbfrnhmdgcjgsqgwlbmlhhnfmcfnswmwgrzmpdmtrcmwgjlgrhzchmhmbjgjrfgdvplvngjnfdrscwqtnsspdszznnnjrdmvwbvnzmmddbcvsphfqsbcmfmfgrcdfjptzqfsjsmjtbswtqzvtfpwbvqsgjzftfssdmcngtgbfmrrsjtllnpsztvgbpgpcrmqsgvcjrpprhqzjwlcdjpvgrqtjcglwnvzvqtncmndzbgpgfbprpqqjfbnzhfzlfrgnfnbpjfrbtjgrgvmczthqsbfplnzvhqjmrrssnzjdhfvlngwptzzdshzhzfpzhmrcjmdvlnlqtsnlbhqgplsltgznshthcwnpzpcgjjwhjstfcdtmmnvbgqzrjpsqwlmlbjnqtrfmbrdsbdlrrwqqvzdnmzhzvrhdftzldzjrtfgzlrwczbzzzqtthdcjtqpcfdwpqlzqmrnsnhwbzhjnqjzgfdcdcrqsjfhpjcdtwnvwzzbwfgdzcmmfvdvdpjsltcrbfqczvvbjscptjsvzndgwhzfjcqljndrcqzhssnqtmjmwjrsqdpqnhwsntqnmrwhvsnvrvpvwbndpmgsnchtnzpjgshcvjgwlwdhqbqhvcwqmwllhcgvbslqvwgswvnsqvvcphbglrvlsczcscznlwzrvjptmbmrgjlhvbrlghcwjdqjlgrcbrhfmbcwgclqzllqtmshbjnhwpgsgtljbwhgcsznvslmglcnmmgjlsptgdqlbtclfbfvjpmqgwwbcvwtdhgjlpvgggjjvmltdgzjdsvtswgblgfcvdvtwrrfljtqjhdflhbtwmcdqpmdqrtjsvdhzstfnqjrzztnwslvwtvgvzfqlzfrhnthjfpvmwmdgrtzhbtwdfscdpwmwwrhgbmqrdftvjvrgzhbpqtqvvlwbmbvlszzqjwhtvwnsjcdcgdlwlrtvjsdqzngcdtpvsddsbqbhtrrpwqdhvdmnnncgccszqtbcgwbdbwrnwrhpwprslbmhrmwpmqzvssfzvrmwrmrzmhrcwvbdtvdflgmrghqngwsgrnctsnhpnmcmfmrtszttqtvvlhdjgplvgnjrtgnfgmdtvwzmzbtzvmhdvpcjqvgpsmdcfrbmqbrlsnccldrfdldqfnsfzznqtvsgwbljgrvbdmggdmhvvdzjfllzwzpddcnvrfggsddqmczfnnfvrwsmvfctctjqdrhvlntflccqgzg";
    Console.WriteLine(Enumerable.Range(0, data.Length).First(i =>
        data[i..(i + 4)].Distinct().Count() == 4
    ) + 4);
    Console.WriteLine(Enumerable.Range(0, data.Length).First(i =>
        data[i..(i + 14)].Distinct().Count() == 14
    ) + 14);
}
void p7() {
    var data = @"$ cd /
$ ls
dir gts
68377 jvdqjhr.jvp
dir lwhbw
228884 nqth.gcn
dir pcqjnl
94844 ppwv.zsh
97889 rqpw
dir sqhw
dir vllgn
dir wdtm
dir ztfdwp
$ cd gts
$ ls
846 grwwbrgz.wft
72000 mrnhn.psz
155241 qvnbd.dqs
6655 tndtmwfv
$ cd ..
$ cd lwhbw
$ ls
99946 lrrl.lth
$ cd ..
$ cd pcqjnl
$ ls
76420 gdg.lvr
dir gljcvm
161390 hlnrq.mjj
dir lqwntmdg
dir lrrl
dir qgpr
222006 tndtmwfv
$ cd gljcvm
$ ls
264381 tmwzlzn
$ cd ..
$ cd lqwntmdg
$ ls
dir jjfwr
dir rfqbmb
$ cd jjfwr
$ ls
dir cfhjvmh
$ cd cfhjvmh
$ ls
dir gzfgc
$ cd gzfgc
$ ls
134989 cfhjvmh.wwh
$ cd ..
$ cd ..
$ cd ..
$ cd rfqbmb
$ ls
dir cbrvhz
dir flcw
dir mnd
$ cd cbrvhz
$ ls
131072 wdtm.rjr
$ cd ..
$ cd flcw
$ ls
216675 wlfwpb.wpg
$ cd ..
$ cd mnd
$ ls
28976 hzzzzvmr.lsz
$ cd ..
$ cd ..
$ cd ..
$ cd lrrl
$ ls
dir cpmvnf
dir dcfmtw
dir ggnwqcj
7864 lgsc.smg
42042 mjfdjrgt
dir mrnhn
258288 nqth.gcn
dir nwjggvr
249578 qfnnncr.ftw
dir sqpgr
dir wgpqg
3196 wtpmdqhd.snd
$ cd cpmvnf
$ ls
dir srtqvcv
$ cd srtqvcv
$ ls
dir mrnhn
$ cd mrnhn
$ ls
dir fbrwd
$ cd fbrwd
$ ls
163166 nqth.gcn
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd dcfmtw
$ ls
31712 mrnhn.tgg
dir nzpdtfr
dir sntcbctt
dir vzhvjp
dir wdtm
$ cd nzpdtfr
$ ls
dir qwtwps
130527 rhhlfg.tcj
160893 rwbwp.rmr
dir vcthd
$ cd qwtwps
$ ls
dir cmf
$ cd cmf
$ ls
73595 wdsjg.thm
$ cd ..
$ cd ..
$ cd vcthd
$ ls
15016 cfhjvmh
$ cd ..
$ cd ..
$ cd sntcbctt
$ ls
dir lrrl
dir mjfdjrgt
dir npqj
$ cd lrrl
$ ls
258433 clgfwbb.htg
166151 fbt.cnp
$ cd ..
$ cd mjfdjrgt
$ ls
64472 csphnrqr
222554 fbt.cnp
30487 vqb.grr
$ cd ..
$ cd npqj
$ ls
154071 mtn.pjq
185929 nqth.gcn
$ cd ..
$ cd ..
$ cd vzhvjp
$ ls
161341 mrnhn.wvw
$ cd ..
$ cd wdtm
$ ls
224565 cdd
dir jrswcjq
dir smgbdw
$ cd jrswcjq
$ ls
173122 blm.znb
$ cd ..
$ cd smgbdw
$ ls
307533 cfhjvmh.ppp
$ cd ..
$ cd ..
$ cd ..
$ cd ggnwqcj
$ ls
dir bfjvt
146815 fbt.cnp
279655 nljrr
152735 qpv
$ cd bfjvt
$ ls
193338 qlfcz
238188 qnz.llm
$ cd ..
$ cd ..
$ cd mrnhn
$ ls
dir cfhjvmh
dir cjsrvg
32604 fbt.cnp
231569 fpjfth.mmc
dir hghjzpgc
270425 mjfdjrgt.fdt
273944 mjfdjrgt.twj
141791 ztswsbs.pjs
$ cd cfhjvmh
$ ls
306620 lrrl.mgd
$ cd ..
$ cd cjsrvg
$ ls
303619 dffrqscq.nct
16738 lrrl.rbb
63842 zbbwj
$ cd ..
$ cd hghjzpgc
$ ls
dir mgnq
273152 mnszcbnv.fzj
$ cd mgnq
$ ls
dir ttmctqlc
250332 wdsjg.thm
20054 zpzml
$ cd ttmctqlc
$ ls
9006 nqth.gcn
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd nwjggvr
$ ls
dir bwmglvmt
202937 lqqmqzl.vqj
dir lrrl
dir wmjp
dir zvlhngjm
$ cd bwmglvmt
$ ls
dir bszd
244726 dnwvnsn.npc
dir dqdrngf
226857 jvcn
dir lrrl
288079 mjfdjrgt.ttw
172669 vqr
dir wtqgd
$ cd bszd
$ ls
3937 csn.mft
198599 vpbccpm
$ cd ..
$ cd dqdrngf
$ ls
26680 lrrl.gch
150627 tndtmwfv
$ cd ..
$ cd lrrl
$ ls
dir bzrs
27874 grjbtv
$ cd bzrs
$ ls
71351 wlfwpb.wpg
$ cd ..
$ cd ..
$ cd wtqgd
$ ls
58033 lrrl.cgp
16732 vnznzhc.bzr
137407 wlfwpb.wpg
$ cd ..
$ cd ..
$ cd lrrl
$ ls
dir wrtp
$ cd wrtp
$ ls
267582 nwmj.rlb
$ cd ..
$ cd ..
$ cd wmjp
$ ls
155158 szhljp
dir tzqqmmp
163989 zwz.jvq
$ cd tzqqmmp
$ ls
140115 qgwcfnvr.fzt
$ cd ..
$ cd ..
$ cd zvlhngjm
$ ls
dir fjt
214803 mjfdjrgt.zrb
dir qsvwfb
187556 tcqgvqr.gmv
185730 tndtmwfv
301659 wlfwpb.wpg
$ cd fjt
$ ls
57947 mnchj
$ cd ..
$ cd qsvwfb
$ ls
23145 dzrgbhgf.dcm
$ cd ..
$ cd ..
$ cd ..
$ cd sqpgr
$ ls
dir bpnlrhsb
dir jvdh
dir zplwvj
$ cd bpnlrhsb
$ ls
22875 wdsjg.thm
$ cd ..
$ cd jvdh
$ ls
95461 ftmzfwt
$ cd ..
$ cd zplwvj
$ ls
dir gtd
$ cd gtd
$ ls
50675 lgjbhr.jmc
$ cd ..
$ cd ..
$ cd ..
$ cd wgpqg
$ ls
65679 wlfwpb.wpg
$ cd ..
$ cd ..
$ cd qgpr
$ ls
dir fhnnc
dir jzmpcc
dir lrrl
dir wdtm
$ cd fhnnc
$ ls
84726 tndtmwfv
$ cd ..
$ cd jzmpcc
$ ls
dir mjfdjrgt
dir mrnhn
dir wdtm
120156 whz.cts
134435 wlfwpb.wpg
$ cd mjfdjrgt
$ ls
234188 wdtm.bpt
$ cd ..
$ cd mrnhn
$ ls
dir gphqmvpn
dir gvtgqn
$ cd gphqmvpn
$ ls
23807 nzl.hzv
$ cd ..
$ cd gvtgqn
$ ls
225267 fbt.cnp
132455 mrnhn.vcn
$ cd ..
$ cd ..
$ cd wdtm
$ ls
dir cfhjvmh
dir mjfdjrgt
119601 mjfdjrgt.rhc
226225 wdsjg.thm
191042 wdtm
$ cd cfhjvmh
$ ls
130491 dgdcbwqp.czm
$ cd ..
$ cd mjfdjrgt
$ ls
87408 djd.ccj
152868 mjfdjrgt.zcn
22605 srdfwwtj.rcp
$ cd ..
$ cd ..
$ cd ..
$ cd lrrl
$ ls
26548 zwrctnn.lln
$ cd ..
$ cd wdtm
$ ls
dir jszntstc
$ cd jszntstc
$ ls
210953 gwgmnvsh.nhb
277302 msqjtrdm
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd sqhw
$ ls
dir djw
dir dqnhzbh
dir lwp
dir mjfdjrgt
211273 mjfdjrgt.hls
dir mrnhn
$ cd djw
$ ls
98290 cfhjvmh.jpr
$ cd ..
$ cd dqnhzbh
$ ls
43311 bdf.pzd
68801 cfwdq.rbz
dir cmfhw
dir cwtm
77978 nnzhntgh
138343 nqth.gcn
81692 tzhltsq
dir zwhs
$ cd cmfhw
$ ls
dir dsbjlmrf
215307 fbt.cnp
dir lch
217372 mjfdjrgt.dzq
228751 tndtmwfv
dir tpgszv
$ cd dsbjlmrf
$ ls
92510 pzq.hcl
$ cd ..
$ cd lch
$ ls
171339 czhsjn.ttq
$ cd ..
$ cd tpgszv
$ ls
215263 nvgcfqzb.gww
$ cd ..
$ cd ..
$ cd cwtm
$ ls
105200 twrb.ljq
$ cd ..
$ cd zwhs
$ ls
35576 gnt.zdh
68204 mfg
207974 njb.lzw
$ cd ..
$ cd ..
$ cd lwp
$ ls
65175 jcwncw.tms
208506 tndtmwfv
$ cd ..
$ cd mjfdjrgt
$ ls
dir hlgqdqb
153252 mjfdjrgt.njp
dir pdsdjdlz
144949 phsnm.bvl
287686 zlszpmlv.gsf
$ cd hlgqdqb
$ ls
128570 fdbls
dir lmhrtp
dir mjfdjrgt
184639 mjfdjrgt.lct
168706 mmlfd
159454 mrdljff
dir pzcnzs
dir rcmzfm
86088 tndtmwfv
$ cd lmhrtp
$ ls
251922 cfhjvmh.njw
$ cd ..
$ cd mjfdjrgt
$ ls
61866 nqtrmm.zts
24980 wlfwpb.wpg
$ cd ..
$ cd pzcnzs
$ ls
123265 fbt.cnp
$ cd ..
$ cd rcmzfm
$ ls
dir gjls
$ cd gjls
$ ls
109021 cnzz
$ cd ..
$ cd ..
$ cd ..
$ cd pdsdjdlz
$ ls
103346 zhfhrzmr.qqm
$ cd ..
$ cd ..
$ cd mrnhn
$ ls
dir tmldr
140361 tndtmwfv
$ cd tmldr
$ ls
169607 dvchnsqr.ltc
$ cd ..
$ cd ..
$ cd ..
$ cd vllgn
$ ls
58389 tndtmwfv
$ cd ..
$ cd wdtm
$ ls
dir cfhjvmh
dir cpcqz
dir gmrgsmpp
290978 jbfn
179525 mjfdjrgt
dir mrnhn
dir nvgmrpdf
dir vpm
67780 wlfwpb.wpg
dir ztp
$ cd cfhjvmh
$ ls
dir hqf
218467 lfl.vpp
dir rgq
147778 rhntpj
dir tgmw
$ cd hqf
$ ls
207656 blvtl.zhg
$ cd ..
$ cd rgq
$ ls
54691 cfhjvmh.mhw
201230 jjhr.lml
22759 mgqdg.qsj
$ cd ..
$ cd tgmw
$ ls
153570 nqth.gcn
$ cd ..
$ cd ..
$ cd cpcqz
$ ls
dir cfhjvmh
17143 fbt.cnp
dir ftpm
dir lrrl
92760 lwdzptgw.gfv
dir mrnhn
151636 tndtmwfv
dir vqt
$ cd cfhjvmh
$ ls
17554 wlfwpb.wpg
$ cd ..
$ cd ftpm
$ ls
244476 crpfc.bwn
290894 dhdnh
210196 lhf
58166 nqth.gcn
$ cd ..
$ cd lrrl
$ ls
229894 btrbfh.twr
269093 cfhjvmh.pbb
277722 fvhtjpg.pvb
236232 gztc.lbh
dir mjfdjrgt
230753 qgjrh.zsf
dir sdvhlnz
$ cd mjfdjrgt
$ ls
186105 lrrl.zng
226081 lsdzz.gsj
33416 nqth.gcn
109966 wgtclbvt.nct
160015 wlfwpb.wpg
$ cd ..
$ cd sdvhlnz
$ ls
219905 cngbvwz.zsm
284092 dgjz
dir lcmlmr
22135 lrrl
dir vdcbcvzv
dir wdwgp
dir zllqgnhj
$ cd lcmlmr
$ ls
dir lrrl
$ cd lrrl
$ ls
104034 cpv
$ cd ..
$ cd ..
$ cd vdcbcvzv
$ ls
263858 qwsmpvdv.lfr
dir sldsnqld
$ cd sldsnqld
$ ls
3116 hvsb.vrj
166766 wqfg.ztg
$ cd ..
$ cd ..
$ cd wdwgp
$ ls
11714 wdsjg.thm
$ cd ..
$ cd zllqgnhj
$ ls
113285 hrjtqzvf
$ cd ..
$ cd ..
$ cd ..
$ cd mrnhn
$ ls
212363 bhldtsnn.jbp
194936 wdsjg.thm
$ cd ..
$ cd vqt
$ ls
46371 lrrl.ztz
215875 rnggjsg.hsw
255959 vnjhm.frz
277765 vwvjnrjp.mwq
$ cd ..
$ cd ..
$ cd gmrgsmpp
$ ls
dir fbcv
275639 fbt.cnp
dir tnrmj
65119 vtfjqtw.tqg
117334 zsg.grj
$ cd fbcv
$ ls
dir htmwl
292840 wwwspsb.hrb
$ cd htmwl
$ ls
34803 dshcw
10573 dwtd
$ cd ..
$ cd ..
$ cd tnrmj
$ ls
dir cfhjvmh
dir wqtnrwg
$ cd cfhjvmh
$ ls
110464 wlfwpb.wpg
$ cd ..
$ cd wqtnrwg
$ ls
283055 mfgllgv
$ cd ..
$ cd ..
$ cd ..
$ cd mrnhn
$ ls
2633 tndtmwfv
$ cd ..
$ cd nvgmrpdf
$ ls
32919 pnc
$ cd ..
$ cd vpm
$ ls
dir ddz
dir dhmphrn
dir grr
132419 mgfdgw.vlt
dir nbccdd
dir plw
183717 pvgbbjgt.wbt
dir qsmg
120729 stbh.rvz
101652 ttqc
$ cd ddz
$ ls
4672 hrnnrzd
217020 wdtm
$ cd ..
$ cd dhmphrn
$ ls
dir fwbmb
dir gdq
dir lrrl
dir mrcnm
dir mrmmr
161427 rllvrpzl.vcg
$ cd fwbmb
$ ls
258937 dfd.wrl
103543 gtfgscfg.jjc
$ cd ..
$ cd gdq
$ ls
133691 bzgt.llh
278010 cfhjvmh.nhj
191344 cjbcnfz.rjb
269115 fbt.cnp
$ cd ..
$ cd lrrl
$ ls
dir gqqsg
dir gwbtt
dir mrnhn
140500 nqth.gcn
dir pdtm
220764 tndtmwfv
dir vvsvfchb
$ cd gqqsg
$ ls
dir gvn
dir hzfmdhw
34666 vfzbvl
dir wdtm
$ cd gvn
$ ls
206457 cfhjvmh.thh
133435 hsdsstt
dir lrrl
dir rwvbmlq
127003 sjqvt.lzl
136402 wlfwpb.wpg
60537 zwjfrqf.nvl
$ cd lrrl
$ ls
15291 mrnhn.ltr
190429 wlfwpb.wpg
119328 wln.msz
86384 zbhzvrc.gbj
$ cd ..
$ cd rwvbmlq
$ ls
186907 nqth.gcn
$ cd ..
$ cd ..
$ cd hzfmdhw
$ ls
9653 fbt.cnp
dir lvdhtg
301280 nqth.gcn
dir nwnp
241354 vzrbbj.bfb
$ cd lvdhtg
$ ls
dir cfhjvmh
dir hzpzz
296694 mjfdjrgt.mpj
65800 nqth.gcn
dir pbfhn
dir wljjgs
$ cd cfhjvmh
$ ls
87654 htlq
203005 vhmthzjb
$ cd ..
$ cd hzpzz
$ ls
153446 brfstm.nwc
47585 cfhjvmh
258754 wdtm.gpt
150809 zlwq.hgr
$ cd ..
$ cd pbfhn
$ ls
dir mjfdjrgt
$ cd mjfdjrgt
$ ls
16108 rmfwpm.fnt
$ cd ..
$ cd ..
$ cd wljjgs
$ ls
228757 bqf.jll
$ cd ..
$ cd ..
$ cd nwnp
$ ls
124842 lrrl
$ cd ..
$ cd ..
$ cd wdtm
$ ls
122771 fbt.cnp
252697 lpqf.bvg
264813 mrnhn
165228 pgn.wnw
dir vsls
292567 wlfwpb.wpg
$ cd vsls
$ ls
250070 dvbv
$ cd ..
$ cd ..
$ cd ..
$ cd gwbtt
$ ls
dir mjfdjrgt
2327 nqth.gcn
20064 sdjvgv.sfr
$ cd mjfdjrgt
$ ls
96726 fbt.cnp
4801 lrrl.fgv
180291 wspcp.brw
$ cd ..
$ cd ..
$ cd mrnhn
$ ls
dir lrrl
dir mqcstf
271459 nqth.gcn
190006 zdln
$ cd lrrl
$ ls
160260 fbt.cnp
281732 tfpprjj
$ cd ..
$ cd mqcstf
$ ls
222125 gntrdss.zcw
dir pdbbbmn
58613 stwlp.wpl
$ cd pdbbbmn
$ ls
250947 mjfdjrgt
$ cd ..
$ cd ..
$ cd ..
$ cd pdtm
$ ls
55975 wdhn
$ cd ..
$ cd vvsvfchb
$ ls
10547 hpwmnjgc
157960 tcc
$ cd ..
$ cd ..
$ cd mrcnm
$ ls
106708 cfhjvmh
264809 ffqfm.slz
dir lrrl
dir mjfdjrgt
174610 wlfwpb.wpg
90207 wwhwvdc.zvc
$ cd lrrl
$ ls
305034 fbt.cnp
240756 jmfwlmzv.gjc
77875 wgfpcscz.mdn
$ cd ..
$ cd mjfdjrgt
$ ls
26073 mrnhn
$ cd ..
$ cd ..
$ cd mrmmr
$ ls
287663 qlc
$ cd ..
$ cd ..
$ cd grr
$ ls
dir tgb
$ cd tgb
$ ls
203808 psssw.nzs
$ cd ..
$ cd ..
$ cd nbccdd
$ ls
62162 wfmhzh
$ cd ..
$ cd plw
$ ls
185632 ljwvnppm.bcc
$ cd ..
$ cd qsmg
$ ls
164538 lrrl.flr
dir vbvtzmsg
dir wrrtctvd
$ cd vbvtzmsg
$ ls
15318 mrnhn.qlh
$ cd ..
$ cd wrrtctvd
$ ls
249219 lggjwn.mfj
$ cd ..
$ cd ..
$ cd ..
$ cd ztp
$ ls
241178 fzc.swf
dir hns
223340 lbmzvf
dir wdtm
195144 wlfwpb.wpg
$ cd hns
$ ls
dir fshzss
77792 mjfdjrgt.qcm
85013 nlpsw
274710 pmclgp.lvz
dir spdzjs
$ cd fshzss
$ ls
297058 fbj.qjm
131320 wjbhllz.mnf
$ cd ..
$ cd spdzjs
$ ls
165766 nrzthq.rvj
10584 zfhqhm.njj
$ cd ..
$ cd ..
$ cd wdtm
$ ls
dir vnmg
$ cd vnmg
$ ls
83938 mrnhn.wwd
$ cd ..
$ cd ..
$ cd ..
$ cd ..
$ cd ztfdwp
$ ls
152895 swjdzqdh.ngv
215804 tndtmwfv
68954 wdsjg.thm";

    var cwd = new Dir("~");
    var root = cwd;
    data.Replace("\r", "").Split("\n").ToList().ForEach(line => {
        if(Regex.Match(line, "\\$ cd (?<dest>.+)") is Match {Success:true} cd) {
            var dest = cd.Groups["dest"].Value;
            if(dest == "..") {
                cwd = cwd.parent;
            } else if(dest == "/") {
                while(cwd.parent != null) {
                    cwd = cwd.parent;
                }
            } else {
                if(!cwd.contents.ContainsKey(dest)) {
                    cwd.contents[dest] = new Dir(cwd.path + "/" + dest) { parent = cwd };
                }

                cwd = (Dir)cwd.contents[dest];
            }
        } else if(Regex.Match(line, "(?<size>[0-9]+) (?<name>.+)") is Match {Success:true } file) {
            var size = int.Parse(file.Groups["size"].Value);
            var name = (file.Groups["name"].Value);
            cwd.contents[name] = new File(size);
        }
    });

    Console.WriteLine(root.GetDirs().Sum(d => d.size));

    var rootSize = root.size;
    root.GetTree().Where(dir => rootSize - dir.size < 40_000_000).OrderBy(d => d.size).Take(1).ToList().ForEach(dir => Console.WriteLine(dir.path + " " + dir.size));
}
void p8() {
    var data =
@"300030213213113240234210203330153124541151003015456312312442524531405533542450111443312103110220211
133000004421300341005340432514034555543556261543410250030436135103304323425502113341331442032311030
213121312230422241205230130541010120012561656126511652636160154566425231221254515542342023142010133
210020103232311410025023513110540633654032560666266266442224400244155120504322112255323444432301210
300221311013444150512444105105055122104524660253365233115442634642236455351502043504233200041232000
000000011130235121555143014441555205423003555504400645452656322632050035240315440035451003103431431
012142333141321404105321351332544222551046221101044054031533500165110422142125530252401331243211232
020213033022012453014033014405001564353352011316633456214232621532251606161624054400501054130430422
042314012030233125141141244243333123002627374716422264424361631360462131201236611502353523210122300
211224020402441314100154352420322456122364263545772174674761655261311042611615130513350241030243433
314424032332214322125462603406635133652272743472434161773175755665106156425610245350415311352303020
430442043211531134103213404455524724321332213636522224572442553173311265220261503235505013340341232
001001325232413003110430361654232165433226632435251776357256175725724566400520111500101504331132114
334412500412200403511523220032572737752127755542727442166375451622531763242464326501020110104340144
121243523444032105062316052754715461676111661333423221122752355145371142754413605365235134243015313
242330445052105423412660066474767425155231852584272588286671442475372464535465114141632114402431330
122050043214212560234014261446673143437367834853285853825877263146536255554162263165412530555001012
310254352155555362305652565245733333847537568334443567664745527772362543753627625001150411055105112
025031121433111201225651315747477674878824738825265832254676344282526441156537710545602456542112210
105541425514161020436715372516214235452255778656548556525666534284848751622646711602335633004210430
120403544243300210571653423576358224736356674473762873838666826244548367625153434754030101342121403
432020535536321653451132344347283847864642562823856582222257783373625252524642355422611066341041555
105515504230051446254242173357243344432244287653558393463636636527332375861462227252610460111541451
424315140455252444231317616735826624757676779939449898765575452676252735247362276562636111623005500
021423534431553132473112715725478325366953865554356694548876447733778524336511267122410032353204044
445423066641156261422146768782747848378447486547353679545953363787428372464325267535533614266344140
152411666100126757726562222726546749954446865366696449877979478486373233467373175176717065434502141
140202601300054474441768586442348397689388764774948539945648798559996563788746555346275261454103223
544203021060377313252177225245274373949438556349734495443338667684563463227487637566451205231151234
225400103300571274173335762334287864949875576664869759876374397685438976626326425644665160321405114
230314645445261324544678872478778643594945995976689844475579675835534645236636838337776723535345500
150534014520772265552634657365463588877484555578696496798458453663473396824266754637171242001256124
501401625205514213726356888877344586367477569695884664945598775858874867554835685452612772106263532
003545414654644264168635752867577699868859699658765954768468556893987864886348334776371465025135140
251042560617345355567763755683459686855588797756945758776799955744646686687652842535676751665034401
302210131663435613688532374877833645976757884777578755957476749797784636464388672831672655516160250
111065246313516415337376337787538574959786899487589688777994584659853384389926247746333354700561235
110414613452245538424336745356686988599756856889899665657755876955474687659467286778227144340035665
412353204671232672374342364957877787589988865788855789958795889895469566379993753537827253655122163
220455060636641757662657656485887468555667756998687885558888697575769544353438542486665473665353031
061302402574166188357244985755358964658897589996959669756655586556668978665737857647731571412663614
451215265723364666667225569887469777655996787798658577588667964644965767693668287254634774752440436
301215542714677435434258733978685986666878695679857768798658676786669569956767732852857361576404432
154623106155526744253836847466987985777579987895579899887867686679478588489549787628542237217621402
016326557476722738858767965394776546697557589788987986685897875855497888993584977357781252535652100
516434443771523825524465875344974794885887577968879977777596685889766469448884476765464722367346613
663333275643147748552476447559494596988869978768877866788776955886649886647734953675545514515635060
564446265661363787884698458539864897955876879789888686667667695889588654946548558665552464445515100
444635271445544486468235896595657574556796676868879879878987585894795697656985562654886247765264633
462165473462113357828755539386966448779857797769787979697957598754959785656563752733766632117233453
324114033531125766355764993645548777979758996876999867877675777569547846779389355565826361114230641
224200317716278667488649555774497597689687678896896677969958769969794969974689727365357612457234644
402622076242363764226695388365948877677669866868687967866668896555954488854868827247567131532732161
351431525533425423868437845597564857555568597698676776879667799897879746844566636356646565257121003
225616611661632445584357877765956764697568598699686698997669677996868665573893357436745717575725454
464505117521646733487884876599599666866788675666888876875979598579854747435497874323277332541546013
052114137625735662285578885579794999468569858977677679667685665987955489696478687578266127111546664
316613323223637567683247984347647849968985558977789767985598956679896995585799768687622276617221641
150200045167123286782287837679577787677797988695867797789687586558667574856533357756471257515363540
252244417323233175887456579833456748749996686798597998557665769755856789834546748233733443273254100
356160635747716144466869844679547594648877886665966889699566759455979998476485752287252722716164416
425166022644275152644747799869954648746958878589556668589768447767896344585634858425817452170565306
345366062117166733576545864397534485854779888658678987596689784695568398698547735888734716543316365
533535636242332164847587898599999846566885656697676699688759667965889473655654364846464567176441222
145156433556112342733574868953399368585597766648768658747699944777476969449428537232155673534436334
054406066337214353545756523343684448899669455797588778689784798466937584849358665356646637313111401
254230005511427461268747424696354657897679767675549867458844878496487636435757334231367213603232112
555355424332316775464478853457754765559478879676449464477968898464959946683563372221445526535034024
414023123606577152476576548378794456898548667574545479875668799757679333543655778735436732625602102
103425425660432324255388475439558538899897884857688985496679573943943844375486647275716474356544432
452130224302617716756636522262934655383939784956995477695867446373399748438345254577364313526363420
000042112640363475341785644528248693738497465445788948789539367488865954668672787612122734016622455
023111166642052271313457755228576545698943896555698897675589438943493564742233477111247522056555041
204431055441351336464513762857847353357853376696786639733989764484974246522527515321225331245432343
411113064641332752327456644465236399895559367589866764738365755795443834767856231524273551544613205
002003415151314635554646457575673343677789786935595493666738344866563385573637543752334431304230033
232000241320312557743676572825328454583544756367648459896978649838474485587354722365706253422641104
140032334604361016614454563867878852473268539588353455546354984764388862653617247612502644151343100
230313534421421354553535613177284354853423658747835975969372246355755687417111117262662010635050245
455442045443411622436616447216784738377874843272575735853775463446344736154635424345111430260111355
015553515233634200652274644243776752756254628443363283782332853857876372453144557606024162435425502
414231425344640401425671247313254225752325627774572863823427628435276621555353276003524346445135344
444014215230466136522431711445473522537227372726657772534226483275376766662531115626523414452105414
433450111244440640533563144151113117278453728882746574687858827886235133216737041020563315330400051
043413224423155241164263423653444422516645633847447523577743865447652437564632624466116150042552500
034343233153545155011601574561726663612576786744276243622471222711311674626123164654601253202230221
334424544214152026360221522751357747561434577416644336551153665531545226246342213505320031201441042
444213310102503010334251632366652423612713524641262137252252513732611325223401240210534434334020134
113234310313013130034263432336443446455536236436221526156612252522132633100613031453230501112202424
142402332004051013660101510101263126711727662153761423762243333777317301206400030653210431512111444
411034340051512350022551420314334411275415543216224154457677376654154362121625361111251523342230021
401212212311255150514520514410354360022337233263271545513775531712533425164554033545254524043033243
040034023233143153232242654250224010246422671266544421771125320425056106225340103411544104041430023
202210233034441525003330614323226104160433060432454154126634040116105426512145204401511210203422322
011431432013322542545215145526600364414641235513425454443064214552663664101101323545031512031302333
020023210301103025401200032420642652143243335333016204055261530250106466135400230513140242434444003
310203111441432251152455421244135150164323516554016042002411655305545265404525521215102013341240121
012320311100031143153052200224256541012135453345356532252242115324133425054343145333123421144111230
311310344433212432240252542030050542510636225454204032233645040015025321421052152330422440232330022";
    var trees = data.Replace("\r", "").Split("\n").Select(line => line.Select(ch => ch - '0').ToArray()).ToArray();
    var side = trees.Length;
    var vNorth = new bool[side, side];
    var vSouth = new bool[side, side];
    var vEast = new bool[side, side];
    var vWest = new bool[side, side];

    foreach (var x in Enumerable.Range(0, side)) {
        var maxNorth = -1;
        foreach(var y in Enumerable.Range(0, side)) {
            var h = trees[x][y];
            vNorth[x, y] = h > maxNorth;
            maxNorth = Math.Max(maxNorth, h);
        }
        var maxSouth = -1;
        foreach (var y in Enumerable.Range(0, side).Reverse()) {
            var h = trees[x][y];
            vSouth[x, y] = h > maxSouth;
            maxSouth = Math.Max(maxSouth, h);
        }
    }
    foreach (var y in Enumerable.Range(0, side)) {
        var maxEast = -1;
        foreach (var x in Enumerable.Range(0, side)) {
            var h = trees[x][y];
            vEast[x, y] = h > maxEast;
            maxEast = Math.Max(maxEast, h);
        }
        var maxWest = -1;
        foreach (var x in Enumerable.Range(0, side).Reverse()) {
            var h = trees[x][y];
            vWest[x, y] = h > maxWest;
            maxWest = Math.Max(maxWest, h);
        }
    }
    var res = Enumerable.Range(0, side).Sum(x => Enumerable.Range(0, side).Sum(y =>
        vNorth[x, y] || vEast[x, y] || vSouth[x, y] || vWest[x, y] ? 1 : 0
    ));
    Console.WriteLine(res);
}
void p10() {
    var data = @"noop
noop
noop
addx 5
addx 1
addx 4
addx 1
noop
addx 4
noop
addx 1
addx 4
addx 8
addx -7
addx 3
addx 1
noop
addx 4
addx 2
addx 5
addx -1
noop
addx -37
noop
noop
addx 3
addx 2
addx 13
addx 12
addx -15
addx -2
addx 2
addx -11
addx 18
addx 2
addx -15
addx 16
addx 5
addx 2
addx 5
noop
noop
noop
addx 3
addx -2
addx -38
noop
addx 3
addx 4
noop
noop
noop
noop
noop
addx 5
addx 5
noop
noop
addx 21
addx -17
addx 6
noop
noop
noop
noop
addx 5
noop
noop
noop
noop
noop
addx 3
addx 5
addx -38
noop
noop
addx 5
addx -2
addx 1
addx 7
noop
addx 22
addx -18
addx -11
addx 27
addx -13
addx 2
addx 5
addx -8
addx 9
addx 2
noop
addx 7
noop
addx 1
noop
addx -38
noop
addx 2
addx 5
addx -3
noop
addx 8
addx 11
addx -6
noop
addx 24
addx -31
addx 10
addx 2
addx 5
addx 3
noop
addx 2
addx -29
addx 21
addx 11
addx 5
addx -39
addx 4
addx -2
addx 2
addx 7
noop
addx -1
addx 2
noop
addx 4
noop
addx 1
addx 2
addx 5
addx 2
noop
noop
addx -6
addx 9
addx -18
addx 25
addx 3
noop
addx -17
noop";
    int x = 1;
    int cycle = 0;

    var total = 0;
    void Cycle() {
        cycle++; 
        if ((cycle + 20)%40 == 0) {
            total += cycle * x;
        }
    }
    data.Replace("\r", "").Split("\n").ToList().ForEach(line => {
        if(line == "noop") {
            Cycle();
        } else if(Regex.Match(line, "addx (?<inc>-?[0-9]+)") is Match { Success:true} m) {
            Cycle();
            Cycle();
            x += int.Parse(m.Groups["inc"].Value);
        }
    });
    Console.WriteLine(total);
}
void p14() {
    var data = @"516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
495,26 -> 495,27 -> 507,27 -> 507,26
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
502,42 -> 502,45 -> 496,45 -> 496,51 -> 507,51 -> 507,45 -> 506,45 -> 506,42
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
506,30 -> 510,30
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
548,117 -> 553,117
503,33 -> 507,33
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
539,149 -> 544,149
489,38 -> 489,39 -> 503,39 -> 503,38
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
533,111 -> 538,111
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
489,38 -> 489,39 -> 503,39 -> 503,38
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
510,76 -> 510,78 -> 503,78 -> 503,84 -> 521,84 -> 521,78 -> 516,78 -> 516,76
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
544,114 -> 549,114
502,42 -> 502,45 -> 496,45 -> 496,51 -> 507,51 -> 507,45 -> 506,45 -> 506,42
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
533,161 -> 538,161
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
547,161 -> 552,161
510,76 -> 510,78 -> 503,78 -> 503,84 -> 521,84 -> 521,78 -> 516,78 -> 516,76
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
531,100 -> 531,102 -> 524,102 -> 524,105 -> 538,105 -> 538,102 -> 535,102 -> 535,100
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
510,76 -> 510,78 -> 503,78 -> 503,84 -> 521,84 -> 521,78 -> 516,78 -> 516,76
549,146 -> 554,146
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
546,149 -> 551,149
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
514,73 -> 524,73 -> 524,72
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
502,42 -> 502,45 -> 496,45 -> 496,51 -> 507,51 -> 507,45 -> 506,45 -> 506,42
539,155 -> 544,155
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
557,152 -> 562,152
553,149 -> 558,149
499,53 -> 499,54 -> 509,54 -> 509,53
535,133 -> 535,136 -> 530,136 -> 530,140 -> 547,140 -> 547,136 -> 540,136 -> 540,133
502,42 -> 502,45 -> 496,45 -> 496,51 -> 507,51 -> 507,45 -> 506,45 -> 506,42
510,76 -> 510,78 -> 503,78 -> 503,84 -> 521,84 -> 521,78 -> 516,78 -> 516,76
514,73 -> 524,73 -> 524,72
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
535,133 -> 535,136 -> 530,136 -> 530,140 -> 547,140 -> 547,136 -> 540,136 -> 540,133
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
534,117 -> 539,117
497,23 -> 497,21 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,20 -> 501,23
502,42 -> 502,45 -> 496,45 -> 496,51 -> 507,51 -> 507,45 -> 506,45 -> 506,42
543,152 -> 548,152
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
510,76 -> 510,78 -> 503,78 -> 503,84 -> 521,84 -> 521,78 -> 516,78 -> 516,76
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
542,146 -> 547,146
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
497,23 -> 497,21 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,20 -> 501,23
509,33 -> 513,33
535,133 -> 535,136 -> 530,136 -> 530,140 -> 547,140 -> 547,136 -> 540,136 -> 540,133
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
502,42 -> 502,45 -> 496,45 -> 496,51 -> 507,51 -> 507,45 -> 506,45 -> 506,42
506,36 -> 510,36
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
497,23 -> 497,21 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,20 -> 501,23
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
500,36 -> 504,36
535,133 -> 535,136 -> 530,136 -> 530,140 -> 547,140 -> 547,136 -> 540,136 -> 540,133
535,133 -> 535,136 -> 530,136 -> 530,140 -> 547,140 -> 547,136 -> 540,136 -> 540,133
497,23 -> 497,21 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,20 -> 501,23
550,152 -> 555,152
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
536,158 -> 541,158
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
497,23 -> 497,21 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,20 -> 501,23
495,26 -> 495,27 -> 507,27 -> 507,26
535,133 -> 535,136 -> 530,136 -> 530,140 -> 547,140 -> 547,136 -> 540,136 -> 540,133
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
537,114 -> 542,114
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
530,114 -> 535,114
502,42 -> 502,45 -> 496,45 -> 496,51 -> 507,51 -> 507,45 -> 506,45 -> 506,42
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
545,143 -> 550,143
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
499,53 -> 499,54 -> 509,54 -> 509,53
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
489,38 -> 489,39 -> 503,39 -> 503,38
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
531,100 -> 531,102 -> 524,102 -> 524,105 -> 538,105 -> 538,102 -> 535,102 -> 535,100
510,76 -> 510,78 -> 503,78 -> 503,84 -> 521,84 -> 521,78 -> 516,78 -> 516,76
531,100 -> 531,102 -> 524,102 -> 524,105 -> 538,105 -> 538,102 -> 535,102 -> 535,100
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
495,26 -> 495,27 -> 507,27 -> 507,26
512,36 -> 516,36
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
531,100 -> 531,102 -> 524,102 -> 524,105 -> 538,105 -> 538,102 -> 535,102 -> 535,100
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
527,117 -> 532,117
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
497,23 -> 497,21 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,20 -> 501,23
531,100 -> 531,102 -> 524,102 -> 524,105 -> 538,105 -> 538,102 -> 535,102 -> 535,100
531,100 -> 531,102 -> 524,102 -> 524,105 -> 538,105 -> 538,102 -> 535,102 -> 535,100
536,152 -> 541,152
531,100 -> 531,102 -> 524,102 -> 524,105 -> 538,105 -> 538,102 -> 535,102 -> 535,100
497,23 -> 497,21 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,20 -> 501,23
497,23 -> 497,21 -> 497,23 -> 499,23 -> 499,17 -> 499,23 -> 501,23 -> 501,20 -> 501,23
535,133 -> 535,136 -> 530,136 -> 530,140 -> 547,140 -> 547,136 -> 540,136 -> 540,133
541,117 -> 546,117
499,53 -> 499,54 -> 509,54 -> 509,53
516,97 -> 516,94 -> 516,97 -> 518,97 -> 518,87 -> 518,97 -> 520,97 -> 520,92 -> 520,97 -> 522,97 -> 522,94 -> 522,97 -> 524,97 -> 524,95 -> 524,97 -> 526,97 -> 526,89 -> 526,97 -> 528,97 -> 528,89 -> 528,97 -> 530,97 -> 530,94 -> 530,97 -> 532,97 -> 532,91 -> 532,97
540,111 -> 545,111
527,130 -> 527,122 -> 527,130 -> 529,130 -> 529,121 -> 529,130 -> 531,130 -> 531,129 -> 531,130 -> 533,130 -> 533,121 -> 533,130 -> 535,130 -> 535,122 -> 535,130 -> 537,130 -> 537,128 -> 537,130
543,158 -> 548,158
503,67 -> 503,59 -> 503,67 -> 505,67 -> 505,60 -> 505,67 -> 507,67 -> 507,60 -> 507,67 -> 509,67 -> 509,58 -> 509,67 -> 511,67 -> 511,60 -> 511,67 -> 513,67 -> 513,59 -> 513,67 -> 515,67 -> 515,61 -> 515,67
536,108 -> 541,108
510,76 -> 510,78 -> 503,78 -> 503,84 -> 521,84 -> 521,78 -> 516,78 -> 516,76
540,161 -> 545,161";
    
    if(false)
    data = @"498,4 -> 498,6 -> 496,6
503,4 -> 502,4 -> 502,9 -> 494,9";

    
    HashSet<(int x, int y)> grid = new();
    data.Replace("\r", "").Split("\n").ToList().ForEach(line => {
        var index = 0;
        var (xf, yf) = (0, 0);
        line.Split("->").ToList().ForEach(part => {
            (int xt, int yt) = part.Split(",").Select(int.Parse).ToArray();
            if (index++ > 0) {
                var points = ((xt - xf, yt - yf) switch {
                    (not 0 and var xd, 0) => Enumerable.Range(0, Math.Abs(xd) + 1).Select(i =>
                        (xf + i * Math.Sign(xd), yf)
                    ),
                    (0, not 0 and var yd) => Enumerable.Range(0, Math.Abs(yd) + 1).Select(i =>
                        (xf, yf + i * Math.Sign(yd))
                    ),
                }).ToList();
                points.ForEach(p => grid.Add(p));
            }

            (xf, yf) = (xt, yt);
        });
    });

    var (xMin, xMax) = (grid.Min(p => p.x), grid.Max(p => p.x));

    var yMax = grid.Max(p => p.y);
    if (true) {
        Enumerable.Range(xMin - 500, 1000 + xMax - xMin).ToList().ForEach(x => grid.Add((x, yMax + 2)));
        yMax += 3;

        xMin -= 1000;
        xMax += 1000;
    } else {
        yMax += 1;
    }

    var rect = new Rectangle(xMin, 0, 1 + xMax - xMin, yMax);
    bool Drop() {
        var (x, y) = (500, 0);
        while (true) {
            if (grid.Contains((x, y))) {
                return false;
            }
            if (!rect.Contains(new Point(x, y))) {
                return false;
            }
            if (!grid.Contains((x, y + 1))) {
                y++;
            } else if (!grid.Contains((x - 1, y + 1))) {
                x--;
                y++;
            } else if (!grid.Contains((x + 1, y + 1))) {
                x++;
                y++;
            } else {
                if (rect.Contains(new Point(x, y))) {
                    grid.Add((x, y));
                    return true;
                }
                return false;

            }

        }
    }
    bool Drop2() {
        var (x, y) = (500, 0);
        while (true) {
            if (grid.Contains((x, y))) {
                return false;
            }
            if (!grid.Contains((x, y + 1))) {
                y++;
            } else if (!grid.Contains((x - 1, y + 1))) {
                x--;
                y++;
            } else if (!grid.Contains((x + 1, y + 1))) {
                x++;
                y++;
            } else {
                if (rect.Contains(new Point(x, y))) {
                    grid.Add((x, y));
                    return true;
                }
                return false;

            }

        }
    }
    Enumerable.Range(0, 20).Select(y =>
            string.Join("", Enumerable.Range(480, 40).Select(x => grid.Contains((x, y)) ? "#" : "."))
        ).ToList().ForEach(Console.WriteLine);

    if (true) {

        rect.Height += 8;

        var result = 0;
        while (Drop2()) {
            result++;
        }
        Console.WriteLine(result);
    } else {

        var result = 0;
        while (Drop()) {
            result++;
        }

        //Console.WriteLine(grid.Count);
        //Console.WriteLine(string.Join(" ", grid.Select(((int x, int y) p) => $"({p.x}, {p.y})")));
        
    }
    Enumerable.Range(0, 20).Select(y =>
            string.Join("", Enumerable.Range(480, 40).Select(x => grid.Contains((x, y)) ? "#" : "."))
        ).ToList().ForEach(Console.WriteLine);

}
void p16() {
    var data = @"Valve AA has flow rate=0; tunnels lead to valves DD, II, BB
Valve BB has flow rate=13; tunnels lead to valves CC, AA
Valve CC has flow rate=2; tunnels lead to valves DD, BB
Valve DD has flow rate=20; tunnels lead to valves CC, AA, EE
Valve EE has flow rate=3; tunnels lead to valves FF, DD
Valve FF has flow rate=0; tunnels lead to valves EE, GG
Valve GG has flow rate=0; tunnels lead to valves FF, HH
Valve HH has flow rate=22; tunnel leads to valve GG
Valve II has flow rate=0; tunnels lead to valves AA, JJ
Valve JJ has flow rate=21; tunnel leads to valve II";

    data = @"Valve RT has flow rate=0; tunnels lead to valves EN, LZ
Valve VB has flow rate=0; tunnels lead to valves SZ, BF
Valve AD has flow rate=0; tunnels lead to valves EB, JF
Valve RE has flow rate=4; tunnels lead to valves QB, IF, XT, WF, KW
Valve RL has flow rate=0; tunnels lead to valves DQ, LZ
Valve OK has flow rate=0; tunnels lead to valves QH, BF
Valve RV has flow rate=0; tunnels lead to valves IU, JF
Valve TE has flow rate=0; tunnels lead to valves HE, XF
Valve WW has flow rate=0; tunnels lead to valves QH, YZ
Valve HB has flow rate=15; tunnel leads to valve OM
Valve IY has flow rate=14; tunnels lead to valves UH, KW, BN, LW, UY
Valve QF has flow rate=0; tunnels lead to valves JF, PL
Valve YZ has flow rate=0; tunnels lead to valves JG, WW
Valve QB has flow rate=0; tunnels lead to valves SP, RE
Valve SO has flow rate=0; tunnels lead to valves QH, SZ
Valve EB has flow rate=7; tunnels lead to valves IF, NH, AD, VI, DQ
Valve VL has flow rate=0; tunnels lead to valves JF, YV
Valve BF has flow rate=18; tunnels lead to valves OK, VB, OH, SX
Valve UC has flow rate=0; tunnels lead to valves SC, YV
Valve OQ has flow rate=0; tunnels lead to valves XT, AA
Valve YV has flow rate=6; tunnels lead to valves YX, TT, VL, UC, NH
Valve KJ has flow rate=0; tunnels lead to valves OH, JG
Valve QH has flow rate=20; tunnels lead to valves SO, OK, WW
Valve KW has flow rate=0; tunnels lead to valves RE, IY
Valve PL has flow rate=0; tunnels lead to valves JG, QF
Valve DQ has flow rate=0; tunnels lead to valves EB, RL
Valve AA has flow rate=0; tunnels lead to valves YI, EN, UK, OQ, VI
Valve XT has flow rate=0; tunnels lead to valves OQ, RE
Valve SZ has flow rate=24; tunnels lead to valves VB, SO
Valve IU has flow rate=25; tunnels lead to valves RV, HE, HQ
Valve OM has flow rate=0; tunnels lead to valves NY, HB
Valve YX has flow rate=0; tunnels lead to valves YV, SI
Valve SX has flow rate=0; tunnels lead to valves ZB, BF
Valve KD has flow rate=0; tunnels lead to valves XF, LW
Valve SP has flow rate=0; tunnels lead to valves XF, QB
Valve UY has flow rate=0; tunnels lead to valves UK, IY
Valve XF has flow rate=22; tunnels lead to valves SP, TE, KD, NY
Valve SC has flow rate=0; tunnels lead to valves LZ, UC
Valve UK has flow rate=0; tunnels lead to valves UY, AA
Valve LW has flow rate=0; tunnels lead to valves KD, IY
Valve FL has flow rate=0; tunnels lead to valves BN, LZ
Valve VI has flow rate=0; tunnels lead to valves AA, EB
Valve HW has flow rate=0; tunnels lead to valves JF, CY
Valve YI has flow rate=0; tunnels lead to valves AA, TT
Valve HE has flow rate=0; tunnels lead to valves IU, TE
Valve JG has flow rate=10; tunnels lead to valves PL, YZ, SI, KJ
Valve BN has flow rate=0; tunnels lead to valves IY, FL
Valve IF has flow rate=0; tunnels lead to valves EB, RE
Valve JF has flow rate=19; tunnels lead to valves HW, QF, VL, RV, AD
Valve SI has flow rate=0; tunnels lead to valves JG, YX
Valve WF has flow rate=0; tunnels lead to valves LZ, RE
Valve HQ has flow rate=0; tunnels lead to valves IU, UH
Valve LZ has flow rate=5; tunnels lead to valves SC, FL, WF, RL, RT
Valve UH has flow rate=0; tunnels lead to valves IY, HQ
Valve CY has flow rate=21; tunnel leads to valve HW
Valve NH has flow rate=0; tunnels lead to valves EB, YV
Valve TT has flow rate=0; tunnels lead to valves YV, YI
Valve OH has flow rate=0; tunnels lead to valves KJ, BF
Valve EN has flow rate=0; tunnels lead to valves RT, AA
Valve NY has flow rate=0; tunnels lead to valves OM, XF
Valve ZB has flow rate=8; tunnel leads to valve SX";
    Dictionary<string, (int rate, string[] branches)> graph= new();
    Dictionary<string, Dictionary<string, string[]>> routes = new();

    data.Replace("\r", "").Split("\n").ToList().ForEach(line => {
        var m = Regex.Match(line, "Valve (?<id>[A-Z][A-Z]) has flow rate=(?<rate>[0-9]+); tunnel(s?) lead(s?) to valve(s?) (?<branches>[A-Z, ]+)");
        var id = m.Groups["id"].Value;
        var rate = int.Parse(m.Groups["rate"].Value);
        var branches = m.Groups["branches"].Value.Replace(" ", "").Split(",");
        graph[id] = (rate, branches);
    });

    var id = "AA";
    var rate = 0;
    var released = 0;
    var opened = new HashSet<string>();

    int i = 0;

    void pass() {
        i++;
        released += rate;
    }
    List<string> history = new();

    var wait = false;
    while (i < 30) {
        if (wait) {
            pass();
            continue;
        }

        if (!routes.ContainsKey(id)) {
            var atlas = routes[id] = new();
            atlas[id] = new string[0];
            HashSet<string> seen = new();
            Queue<string> q = new();
            q.Enqueue(id);
            while (q.Any()) {
                var curr = q.Dequeue();
                seen.Add(curr);
                foreach(var branch in graph[curr].branches) {
                    if (seen.Contains(branch)) {
                        continue;
                    }
                    seen.Add(branch);
                    q.Enqueue(branch);
                    atlas[branch] = atlas[curr].Append(branch).ToArray();
                }
            }
        }

        var n = graph[id];
        Console.Clear();
        string GetString(string id) {
            return $"{id} {graph[id].rate, 2}{(opened.Contains(id) ? "+" : "")}";
        }
        graph.Keys.Select(id => $"{GetString(id), -8} -> {string.Join(", ", graph[id].branches.Select(GetString))}")
            .ToList().ForEach(Console.WriteLine);
        Console.WriteLine();

        Console.WriteLine($"turn: {i}");
        Console.WriteLine($"rate: {rate}, released: {released}");
        Console.WriteLine($"opened: {string.Join(" ", opened.Select(GetString))}");
        Console.WriteLine($"You are currently at {GetString(id)}");
        Console.WriteLine($"Branches: {string.Join(", ", n.branches.Select(GetString))}");

        Console.Write(">");
        switch (Console.ReadLine()) {
            case var s when Regex.Match(s, "goto (?<to>[A-Z]{2})") is Match { Success: true } m: {

                    var to = m.Groups["to"].Value;
                    if (!graph.ContainsKey(to)) {
                        Console.WriteLine("Invalid destination");
                        break;
                    }

                    foreach(var step in routes[id][to]) {
                        pass();
                    }
                    id = to;

                    history.Add($"goto {id}");
                    break;
                }
            case "open": {
                    if (opened.Contains(id)) {
                        Console.WriteLine("Valve is already open");
                        break;
                    }
                    pass();
                    opened.Add(id);
                    rate += graph[id].rate;

                    history.Add($"open");
                    break;
                }
            case "atlas": {
                    var atlas = routes[id];
                    atlas.Keys.Where(dest => !opened.Contains(dest) && graph[dest].rate > 0).Select(dest => $"{GetString(dest)} [{atlas[dest].Length}]").ToList().ForEach(Console.WriteLine);
                    Console.ReadLine();
                    break;
                }
            case var s when Regex.Match(s, "path (?<to>[A-Z]{2})") is Match { Success:true}m: {
                    var to = m.Groups["to"].Value;
                    Console.WriteLine(String.Join(", ", routes[id][to]));
                    Console.ReadLine();
                    break;
                }
            case "wait": {
                    history.Add("wait");
                    wait = true;
                    break;
                }
            case "log": {
                    history.ForEach(Console.WriteLine);
                    Console.ReadLine();
                    break;
                }
        }
    }
    Console.WriteLine("Results: ");
    history.ForEach(Console.WriteLine);
    Console.WriteLine();
    Console.WriteLine($"released: {released}");

}
void p21() {
    var data = @"root: pppw + sjmn
dbpl: 5
cczh: sllz + lgvd
zczc: 2
ptdq: humn - dvpt
dvpt: 3
lfqf: 4
humn: 5
ljgn: 2
sjmn: drzm * dbpl
sllz: 4
pppw: cczh / lfqf
lgvd: ljgn * ptdq
drzm: hmdt - zczc
hmdt: 32";


    data = @"fgzt: lwpw * grjz
mrjw: 2
nzjc: 5
jhjg: 19
nwml: dljv * lchm
chls: dcdj * vwwr
fnvr: mrbs + scwf
nrnj: djqg + wtsc
hfcm: 9
wfpf: 2
wczj: 3
shtj: ctjp + tgcb
vqln: vmgw * nzbr
tcbw: 1
tbnf: qgqd * fcfj
schb: 2
djjl: tgbj + vzpl
hctq: 1
fjfl: 2
qwpp: qcvz * djgt
tbdr: wvnl - dwcw
tpzl: jwrd * zlhz
sgpd: pggf * gwdf
hwcz: qgjb + cvbl
ccfb: 2
srmf: crzb + nspz
hzzp: 1
tplj: jztf + zfrz
hvdh: 5
lzmr: 2
nllg: 11
tjht: 2
mhpt: 2
tmpj: 6
zzjv: njsq * dvcl
jdgt: 2
gjzs: bnpf * qgqf
wqdb: 5
wvwz: fhrt + wwmj
mrpr: frlg * ccbq
zlhz: bqwh + jfzm
btjh: 3
slcj: rtjq + lcsg
qrwr: 16
crzs: 4
cbjz: 3
gsgd: ssln + ddpc
zpdn: wzwq * dsgz
sswh: ngjl * rhsp
dddp: mmmv * zrsd
prwt: 7
nsrj: 5
dbfz: fnfr * lfrl
gbzz: htdl + lwdw
jvlm: cnfh + ndpr
ljmb: 10
mfgj: 2
vfpp: zwpz * cnsb
rwgf: 3
wlbn: tbzq * blbq
nftn: 11
dhdr: nlzl * hndd
trbj: fglw + wcrc
cwsc: 3
vgvj: prsc + vdfh
ddlg: 1
wnbh: 5
fqqz: 3
hcpj: 1
jqct: 3
flpb: 15
qbdz: tgzd * wpth
bfvn: rvsb * srnp
lgmt: fvpr + cqjc
qsbs: fvfg * lzgf
nwhf: 4
qqtv: rshj * cvfd
jmvn: 3
lbzh: 2
rzcw: bjns * fzst
jqnf: 3
qgqf: drbn * gdgr
hrnl: snzz - npdl
ljwb: 3
bcqz: shjh + dcnn
nbmd: 5
srbj: fbbf * qpdt
fbjq: 4
scwf: 4
jcpr: 15
tmgd: zrwl - qqtv
mcwt: tczf * rjdr
zmlm: 3
cnsb: 5
znts: 4
nzlr: zwdl * lwsq
jwtz: 12
jvst: 1
qptv: pqbp * jbfc
lntd: jjrv - dscg
tjrc: bcdv * gcwl
rjmg: 7
jztf: pmgn * fcph
mpfq: 8
tgmd: 2
shjg: 7
qdbg: jmfm + wbft
snzz: ntml * slcj
lrvf: 2
cjsd: vgpb * hjmc
ltvd: 3
fvsf: 20
bfsn: 11
czwf: qprz + hngp
ljqb: 4
hngg: tgnw * pqbc
wtnt: mvmc + bgmt
jbbc: qrdf * tqjs
jhmd: 4
cnfh: 5
fdgz: 2
mnvd: 2
ldrw: mgcq + tgjj
fbwn: fnzd * glsw
mmjg: fzqq / wlzl
wjvr: bszs + ccfb
drdr: fbmf + mbgj
vvsh: qcws * qwhd
vnhc: ljwd * cwzj
nlsn: 2
lvzp: 5
qsrr: 5
zdwf: hcfv - mvgq
hpvw: ghqn * hgch
dscg: jfcl * pdpt
hwqs: fpmg * vtbd
zmjv: sdbl + qgjm
snvc: pbwj * spbq
wpjn: ggqg + zflc
zdjm: 2
qfhm: 8
fzpc: sfbw + srbr
lshn: 5
fbwh: 6
mldw: cwlc + pjtv
jpvj: 5
gnwf: wvwz * dvtt
ctsw: 3
npzh: rmqm * jmrl
thnr: lsdp + mcwt
cnzt: swqc * tzvt
lzhl: nwtz + fnhz
ffzj: fvfp + spdz
qvsp: gdqj + fbwn
zctz: 2
tqbn: 12
wlpv: rrqw + gpcp
hmft: 2
vgsf: wggr * jqdp
sfqb: 5
pdps: nsrj * sqsg
lzgf: 19
npdl: jpjg * scjj
bcph: dnjs * jznp
bmmm: nfqq * lmfz
hfzd: 15
wngb: 2
trfc: 3
mzld: zwwr * msbh
rdrw: lmdf + hmbt
mgwg: 2
sgrr: llvl * wcgm
vcfl: 2
vqrr: 2
mlwq: 2
gnjl: wgsq + llmj
bmch: 3
cvfd: stzc - tzqz
lhbw: 14
bzhn: cblb + fmmw
zjgt: 17
tbsp: 2
hvbl: 4
lfwt: 6
vrst: mlhc * gnwb
lfsj: tllh * llmh
phvw: 5
nnps: zqws - qfvh
vnlh: 2
lbbc: zmjt + wqhn
dflp: 3
tcfl: 3
lcqm: nsjg + mzsj
wwdw: ltvd * pwjs
gfdv: 4
wglp: rcrp * gpwb
wggr: 2
mtjn: cdlg * dljt
vctw: rzvn * hmlg
ftlz: 2
wvcs: 11
mcgh: thnr * fhjr
rcht: dhsg * jhwz
gltc: 5
rtsb: 2
crnw: 4
vrbh: 3
thrg: lrrg + zrjs
zdqp: 5
gqsp: nbds * hgst
bhdc: qvmn * bqdl
wbvc: 2
htqq: 3
sgzq: shdt * lfwt
pqbg: mdfn + qczc
zlsz: zdmq * gwgf
gqsr: vbzr * nvpt
zcsq: 14
tfgw: tcnr * rnvz
jpsj: nbmd * gcgg
cczj: bwdm + dfgz
tbnn: 3
qdnb: 11
cdmm: 3
cjlb: mgvr * fvcs
hcdv: 4
flfq: 2
zdbm: 4
blvz: 4
btnj: 3
whsz: 2
jpnd: grht - jcfg
grjz: 10
tprv: 7
wtmc: mlbb + pthg
nlfl: 11
nzss: 3
frfl: lzjq * rsfb
pwjs: wbmz + mzld
bfts: hjmf * jtzm
bzmt: 7
nbds: 5
dztv: 2
mzwc: 2
jppn: vgwc + qvsp
wjhh: 8
jlgg: qqmq / cbjz
lbzm: nhmf - qfhm
fqcl: zfpj * mzwl
fdjv: 4
vrdq: wwzj * gdpp
gtmm: wrwr * vnvg
vlfn: 3
dtdw: 2
bszs: jfvc * bscq
chvj: 3
zfbs: pbwm - cdln
ctrq: ttbp * fqld
fcpv: dtvv * bclj
gqll: hbrv + lgdv
ctjp: 7
snqw: ffhv * bfwm
dvtt: rlmf + nztz
tzws: 20
vwfn: 2
cwgj: 5
qtjq: qqst * jhrr
cwgf: 3
mrfh: gmgr + mzgq
wvnl: ccqb + gctz
btcr: wbqs + qcqv
gfjr: 2
dbsr: 5
jdmq: ctrq + cpmh
sdtq: dnjn - mlmp
fbtr: flpb * mgbr
mpgw: 5
tvlf: 11
bzmr: 1
qwfb: pngp * qtjq
mqss: tjvn * vhht
jqdp: wvqg + thzm
mnwh: 15
qvbv: ffqd * fnjq
rqgb: ddhd / clvj
thhw: gsmw * ldrw
pfvc: 3
sgmz: 2
fdcp: 2
rctj: 17
brgl: 2
pgtd: 2
fqth: wqgl - rznp
fzst: 2
cdqz: jcpl / vwhq
pcwg: hshm * ntdm
zdmf: 7
trht: 3
nhsb: scbg + vjfw
tzlw: jpwp * jscr
hbrv: bzbr * wshb
dvtn: lhqc / mgwg
qgnh: 2
crwj: gfmv * djjp
thgn: flwb + lrvh
ddss: gjfm * smnp
ttlc: jgnm * wcbj
qrfq: vpsv + smct
tlgn: 2
fsqn: 4
rqdq: 3
dlpr: 2
jpqm: hsbd + mnvp
qjmv: nlnv * clgf
snpf: 5
wjnl: 2
drzl: bqsv + gjwt
hbnt: nllg * jntf
qbsq: nftn + zcsq
lfzz: 1
hhmg: dsfc * lbnq
ghsw: 5
hwcg: snnf * nsdn
wsfq: 8
vsts: 2
blmn: 3
fhdp: zmtw * cljf
qrlb: scsc + spnt
wrgh: mvfb * jwgv
vbdr: 16
jjcm: 16
jvzs: lrvf * vsnw
fsnt: rqvd + vwjf
wrbn: llmr + fpzn
ddjw: vmfl - bfvn
zqws: 9
blvr: wjns + hffv
ncjl: 3
rzqz: chdn + wzwj
tsfn: 3
drns: jfnz + zjsw
jwgv: cppp * zctz
prqf: vcqp * ftlz
glpd: 16
slwj: jwcl * lmwg
whzh: 2
vljz: 5
rnvz: 2
zzgd: bnlt + ltgv
rlfw: 2
tmzq: bvrp + pcwg
dqtb: crwj + scqr
tvgj: tmzs * vvbq
bncm: 13
rshj: 4
jpjg: 3
ghnr: jwrb + jdlr
lmdf: 5
drbd: gpss * jpvj
csml: qdlm * tprv
bzrz: pqnw * qhdr
hvvs: 6
hgrd: nrnj + qdbg
fqtw: rvdt + vnhc
wgpl: vzsp + ztqj
fsjw: bqww - jsgn
zcdr: mqsb + sswh
bvhz: gvtp * lpsq
pgtl: fchh / tzrf
rtfz: stqt * tdzt
ltqb: 6
rcsd: jhjg + gmmf
srlb: 3
zhhf: 3
dppp: 13
sdsc: 1
gmgr: mzwc * rhww
fqbs: dbcb * ddww
ttsm: 2
wjlt: 5
rszf: cwgj * cwbm
zdwt: 2
tqlb: 2
wqdw: zsvl - fsvm
szsh: 17
vwwr: 2
jfvc: 17
qvvw: cwbn - hqtc
tlvm: trbr + cmtt
cppp: 3
jrqd: mjcw + zfff
vbnw: 4
mvtw: vbsn + gjmr
fnzd: 2
ffsz: 3
zlsr: chvf - wrbn
qrbv: gplm * dlgz
zvgb: sjst * vnqm
mddj: 2
cwbm: 2
zvhw: 6
sjlb: vjhl * zmnw
mplm: tnwl + qfbm
wfrw: 2
hwnf: vqph + bzmr
zrrq: hwhq * msww
jvsj: fbfb * lnmw
wzwj: 4
jfnz: lwhr + fbls
qhzq: wfhb * gwfb
jqhs: zpjc + fqqz
hvdn: ppbn * rzfd
plvh: 6
wtrd: lcjn + jlgg
ccqs: 17
mstm: 2
bgfh: 3
plqt: 5
wjvt: 17
mqdr: 2
gtbm: sqcq * jlzd
jqps: 3
hcqp: 6
tfwd: 2
rgvd: 8
pggf: 3
tpsg: tzdt - dvrg
gmll: jcdc * ztbh
dvcl: nrrg + wrqq
twpn: jzcz + vbnw
mflw: pqdl * dqvd
qzgt: qmjf + hwmz
sctl: 5
zvsf: wlhz * ccvj
rlvq: 5
spnt: mqdt + qcpr
rrgb: 19
gfqr: 3
zhth: mvjf * dsbl
ncfh: 2
rmgz: phls * tqlb
ljts: vdhj + dngw
fvhs: 2
jmrl: btvd * bgsm
jlhm: 17
phdd: sgdj + wfwb
qtln: jqnf * vbjd
flgh: ztjv + ddlc
mqlg: 6
gtpw: 12
nsdn: 14
wbqs: bzzn + srbm
lnmw: 2
ldvg: 1
rgzd: vrhf * jvwr
qmnn: mssh * drnz
qvmn: 16
tzld: 4
jjqz: vvsh + jhhr
wfhb: 5
sdfd: 4
tlqp: 1
nnqc: 5
hhzw: 2
jvpw: ztlw + hswb
pzpl: 3
bgrg: qpcn * clpp
mzgq: lsgc * jppn
vbjd: 4
rlrg: 2
vqzj: wbnd + zvsf
bcrq: qbmr * wfsf
zjnt: vdcz * nnps
mnvp: tbfd - rgvd
wtdd: nfwh * lfmv
wtdm: 5
dtvv: glww + pznc
wzgc: bmch * fdhw
qjtv: 3
gvsw: 2
vtnc: sscd + whqz
flqs: jwmm + vfqj
slmc: 2
qqmn: hvrt + tfdb
sjrd: 2
rsfb: 3
lrlp: 6
cwzj: 3
lgnm: 10
mngb: 7
vbrl: 4
fpfg: 3
nmhp: 10
qsrn: rmmn + brgz
jwrb: hnvg + wfsp
wqgl: 15
jcdc: 3
lnpj: 2
jmmb: 2
mmmv: sswv + jdwj
gczv: qmlg * pqtb
lrfj: hvwp * qrgs
qztl: 5
dfwj: 6
rdjr: hlcz + lzmb
vnhg: 14
nlrf: pqvh - rmqp
ztlw: chhz + nsrd
dpzb: ldzw + jcwc
bdqh: ppnc * rlvq
qzwn: cgqz * pvvr
cvmb: 10
dfcr: 2
wmvr: 2
zqnb: 2
rsll: bjzd * gdtv
qqnz: zfgn * crll
ppbn: 5
blpj: 2
hgcj: 19
wgsq: vdnr * jlqc
ljmm: 4
scnb: 3
dbjv: qfwp * dmbc
wrwr: nnnv * nltn
fvbf: qlwq * wbsh
rzrn: jwsf * vvvt
lhqc: rpqr * hwcz
vvvt: 13
rqbf: lpph + mzpl
bjzd: thbc * vppj
fmmr: whjj - tpql
lfqm: bncn - zmdb
zmgq: chcz - fmbg
zdzf: pqfl + zdwf
ntdm: 17
lhtn: gvsw * nbpj
ffqd: 3
jhhr: lnsd * sdfd
rzvn: 2
vlzp: qjhs * snpf
cnmh: bfpz + zblh
qszn: vmnb + bchg
sjfv: 5
fbmd: 5
hgrq: wsdz * wrlr
pqtz: 2
dtmw: nnmr * dvtn
qwsv: jwft * qdfn
vjfw: crjv * jzmf
wlzl: 2
twjr: ljhb - hwcg
dmbc: bmmm - lbtz
zsvl: zwjf + ggjq
cttr: 2
vqph: cpbm + dbhw
bqwr: hjwq - wlzw
tmnm: 1
fcfj: 2
rwsm: mpfq + nwnj
qjtz: 1
tdzt: 3
mhpj: 13
zjjz: bbwh + qsbs
jcnj: bzgd / dlpr
dsfl: 4
rwsc: vdfj * jcts
mssh: 2
bfwm: vwms + bgrg
njsq: 2
hqjd: 2
qdrj: 2
nscv: 2
tdns: 3
mqqw: wgrw * ghqf
mvnb: dqgf * ndgh
ztjj: 2
tzdt: wpdw / zmpt
fnjq: 3
qfjp: tshp + fcpv
bscq: 3
pqfl: cjdv * nmzl
ttcv: nlsn * jghn
twhn: lpmp * hcvg
mdpq: 2
cbzh: dsfs * pfvc
wtsc: lzhl + vbhz
pmlf: szvq / pfdh
gdzb: mvnb + mblj
cqhm: 11
dqvd: 3
jtzf: 18
cdvl: 2
gdtv: ldhz / jhhl
wjjn: 3
dsfc: 7
jcwc: sgzn + wpjn
zgtf: fhlg * gpwr
sdff: 7
hhgw: bpfm + sgvw
nrgp: fdwp * phnc
thvn: gblh * wzrw
dnfz: pcml - dhvq
hvgh: gtzv * zzbl
tllh: 2
nzbj: 2
nwtn: 5
gjmr: 4
swqc: 5
rlmf: 2
tfqc: dcql * bfrv
fvpr: brdv - cnrs
lfmv: 2
crll: 2
dsgz: fgbv * scnb
bgvj: hghn + qbbj
lrcd: lcgs + gqsr
dpzc: gbtg * jpmn
qlzt: 2
sgzn: brbw * hwgc
fbls: 8
nclm: 9
nwlg: lhtn - vrsd
lwpd: 3
fddh: 5
vhnp: jvnh + zvwq
qzvz: 11
hwmz: cvvl + rplr
dngw: 4
qqwj: 8
rdbb: 4
pcgl: dvdq + zpvh
mmcd: 2
rmqp: 19
mvmc: 17
djgt: bwtd + qrlh
nghz: gdpg + dldc
rqvd: fqmv * gfqr
wvqg: qwfb + lgmt
hnvg: zjsp * zqhw
rqcn: gvpr * hjzl
slmm: 6
hvwp: 2
pvzs: 13
gslv: 3
rhww: hbqn + cdqs
wnmz: tmnm + vtnz
wwzj: 5
hcll: rhrr * drns
prrp: tmzq * nswp
tpgm: twhn + vhng
whbn: 12
hghn: sfcz * jrfv
zrfz: vshr + qwsv
vcbm: 2
qtjg: brgl + qztl
ljbw: tjtz * rqdq
tvmd: 6
mppm: fhlp * nsmz
nnmr: 2
sdwv: sgrr + hctq
bbwc: 4
ncpr: jrvd - qwbz
wjgl: 20
fjsh: 8
jjvh: 2
svrj: 2
wgrw: 2
vjlb: 17
nttp: cbjm * cgmt
sqcq: 3
rvmr: zvrr * vwfn
jvcq: lhbp + lshn
gpwb: hhgw + wzfc
qbbj: mqrg / twdj
rzfd: 2
vcbf: qgtv + mrzr
gwfb: jjzm + tlrd
fjlf: dnqc + clmw
pbwm: 12
trvq: hqqj + vsvg
nswp: 2
qjvm: 2
qldz: wctr - gmrn
pbql: 7
pvsc: wgpl * hbjm
mbnl: 3
pcpc: mhrw * bwft
nwch: fhpt * htqq
gqsn: 10
tshp: vgsf * blpj
tbcl: 6
wzwq: nbwq + blvr
nsnn: 7
shdt: tdns * jpfc
ntpm: 7
jmbh: 4
jvcn: wrdc + tcbw
djqg: nlmn + wwpc
qgnn: 4
chcz: 10
ccvj: 4
cnsd: 5
hrjw: 3
znzc: 19
ggqg: 9
gvsl: rtrq + vtpw
rthz: ltqb * zzwm
tjvn: 2
fjmq: 2
bgmt: 5
mlbm: 2
pqbc: 2
cqjz: 1
mrzr: 2
cmdw: lvfr * cmqn
ncsl: 3
fbrq: 3
nftc: 12
vlwd: lprc * rvwv
zzbm: bgvj + tnll
bdtj: 12
llmh: 4
rzmw: 2
vdfj: 3
wtjh: 1
dwcw: wzvv * vcbm
nzcg: pdbv * sscz
jflc: rrst * mwwj
spdz: ghsw + rbmq
cnpp: 5
sdbl: znbh * hgcj
fbjv: 8
lngl: zqbc + rcgh
ctfw: jvst + jvlh
qhzm: cbnc + bvqs
hqgd: lmtw * hbvj
qssh: ttcv + snsq
cwlc: nzgb + hlgd
mgsg: 6
cjcf: zjwl * zfbs
vnqm: 2
wqtl: 8
scst: 16
bclj: scst + zmrt
nqrv: zjjz - wtqb
vzqs: 3
wzfc: ggjd * srlb
cscd: zlsr + qqvc
dtmt: 2
dqmj: 2
gmmf: pqst * twdn
fmqr: mpgw + mqtm
llcf: 2
wfsp: btjh * nfmm
vwhl: 4
hzjs: lwtc * cmnc
wbft: czds * bncm
rglv: lwrf + vwsf
lzft: 2
cgqm: 3
zvhr: 3
nzsf: 8
rsdz: 12
ntfz: 2
dvwg: pzrm + bhnz
bhnz: 5
cmsg: dtsq * rnpg
wljn: mqdr * spln
zwpz: 11
cnmp: wzpg + dshr
gmds: rfds * hppw
gftn: 3
wbsh: trqs + pwpw
fpzh: 1
bgcm: gldw / dgrv
nztz: 5
mrhf: 1
sqsg: 3
dcql: 2
hnhm: 2
wbmz: zdzf - flqs
jcts: 17
vqrs: fznm + szsh
zpqz: 7
dljv: 3
qgmj: lbbc / nzjc
sjgq: dqhj + dgvb
rjqb: gnqt + tbnf
dqfr: lszh + mqvs
vlfb: qjvm + hbrb
gnsv: gtdj + lnhh
mzvs: 3
ndrt: rglv * bcjp
vvsg: 12
hlhw: fqcl - mrjw
zfvg: llwq + ldvg
hmwz: cqch + sdgp
fpmh: 15
wdjg: 3
dcdj: 4
gbng: 8
glww: frcp - cqjz
fjml: 2
zzvh: 2
vwjf: 2
tjtz: qqfm * tcsd
bpbb: 7
sbnr: wnqb - qftz
tjcv: jghw - tmpj
dvtb: 4
rwtc: 3
thbc: 2
ldbf: shpm * mddj
wmwq: 11
jjgq: 8
wqmt: 2
vzpl: mnwh + dzzp
rcgh: 6
gglj: bzhn * tcfc
pqzp: qvbv + zhth
gtjw: 2
pbjl: 5
jghn: ghvc + rvbt
vrgc: fmqp * lwpd
bsgt: gjlp * hvjf
ltrc: fwjt * rqnq
rvnh: hrjw * sgfv
mwwj: 5
njhm: fcfv * wjnl
fcfv: 16
gtdj: flht * mlwq
sscd: snqw * gcwj
pfsv: 3
bvrp: shdv * vffp
tzqz: qtfs * tvmn
qqhh: jcjj * fmpt
dvwd: 2
jdlr: 4
cpmh: brvd * hwsw
wlvq: 4
drqd: 5
sdgp: tdmw / wlcb
lzjq: 7
chdn: 3
tcsd: 5
rqnq: 5
pqcd: 4
dzpb: nrmd * pmlf
lhmj: hpcz - hvbl
mmcl: 11
sswv: mmll + zlvf
zbrv: mgsr + btcr
qlvw: 2
vbsn: svrj * nfqv
wlzw: rqnr * nsrf
zmdq: jdgt * rhbn
lzbs: hngg + cdtn
zfff: whzh + dfdb
nfwh: jvpw + qqhh
dvdq: gwfh * dvpd
gchs: rzmr * dhvn
qprz: trvl * tscz
cvhw: 5
wlbr: vwhl * qdml
dbtd: smrr * fprd
vzfh: 19
hqqj: njhm + jdpw
fhqb: vmld / hmlh
fmcl: 11
srtg: lhbw / vmpj
srwf: 3
vnpf: qhzq / htwn
ghvc: jzgm * zzll
sdhz: bdtj * rqnn
rhlg: bfzw * hhqg
bzbr: hptm * mmcl
vmlr: gqwq * zhzg
qhdr: fhqb * dvvw
ljnw: 2
jvjf: nllv - cfjh
jzmf: rvmr - srtp
rjfc: djtl * vvrs
zwsf: 3
zblh: gwbm / fnhh
jfcl: 3
hbfq: 2
rhnt: 2
zmnw: 3
qldh: gjnv * vbvw
mjtb: 16
rgqh: 2
tdpg: 13
hcvg: sldm + thgn
tgnw: wmvr * jrdv
fmmw: vzfz + tlqp
hgbs: tqbn * lqww
qqdl: 18
fdfr: 3
mlmp: 1
qjbh: hfcm * ftjd
mvmj: gctm * whbn
qlwq: 16
vhgb: 2
jwgl: ljts * wzfv
bgfv: qghw * mmss
mdfn: hbzs * gtbm
sjvs: 17
wvbz: 2
dfdb: 17
wctr: tzlw * wffn
lcgs: svhb / ztjj
bjbf: 12
cncs: 3
zqbc: 1
rvbt: tlnm + fcbr
qszc: 4
vcsv: hfjf + mqqw
jbhc: gtbj + bnhr
nztp: 7
cnrm: lspf - pfsv
mfvr: 5
zzbl: 19
zrfd: zmlm * nqlj
jwcn: fsrf + vzqs
nrpb: 2
tqjc: mfgj + vbzt
pglw: 2
fvcl: 5
vhng: sdhz + jflc
wgbd: cdfc * mplm
bpjz: pfjn * whlb
whjj: bmpz + tlwh
srhq: 4
pqst: 2
cbnc: rszs * qlzt
szvq: jgcg * cdvl
wfsf: 3
wrqq: bcqz * vwbn
hcqs: rfvc * mscg
jsgn: 8
nfsl: blvz + vlrj
bggm: zjrw * rwsc
gvpr: 2
gtfs: nwmg + gsgd
pwpv: wlfl + hfmp
jltd: jzpt + lbcm
mntb: rgdg - rzmw
fnhz: tbnz * bpbb
mwwf: cjlb + mtjn
cgnz: 2
tpsn: 6
bbhm: 16
pqjw: rqgb * jpmd
pcml: bvdf * lfnl
pwpw: 2
cjmt: 3
rbmq: bbgp * nlwb
wjns: 5
jjqq: wtnt + fvhh
jmdp: blbw * csml
tgcb: fmmr / fqff
ffjw: qvpl * wmwq
humn: 2796
ngjl: 2
swwz: rzrn * sjlc
pvbs: 2
hfqz: 3
mbgj: vnml / pzpl
dcrc: 5
slmn: 2
pjtj: fhqq + qzfr
ldnm: 3
lwnc: mvvr * nbwt
zpjc: 20
lmfz: qgmj + cjsd
bnhr: wrgh + vbdr
gcwl: svpj * ncsl
ljwd: 3
rvlr: 5
fdft: wglp + vqln
bpfm: 1
zcpz: rgzj * gbdb
zmrt: 7
tzrf: 3
fdwp: rvlr * wgdv
rgpp: vlnm * wczh
qgtv: 5
wqhn: fzpc + hwqs
cwmr: 4
nsrd: ltrc + blgt
cdfc: qcbf * zdbm
clpp: 2
qqvc: jcnj + prrp
brvd: 4
vwbn: 3
lmtw: chdw + jfwq
vdfh: jwgl + vdwc
pnlp: bsvl * mwvm
shjh: 17
cnrs: dvtb * qsqm
dbnw: qmnn - vjgb
mgcq: 6
jhmz: 5
tmzs: vdzg / hnbj
qqcb: zvnj + qzvz
jrvd: srmf * qnzm
vlrj: prfb + mrhf
tsdt: 4
mbtp: 2
lchm: 4
dcgz: 4
fvcs: 2
zsql: 2
dshr: 5
dzzp: 3
grbp: zjgt + fvsf
tsrs: jwcn + mncn
cdjz: wtdm + scvs
fnhh: 5
fdff: 5
htls: 2
wcrc: vljd + bttt
jcpl: sddd * qvfs
zvnj: flfq * wqdw
dfnr: dlfh / cvld
lnsd: 17
cbtb: 2
sptb: 3
gvjc: bfts + ltln
tjnj: hmft * dsqp
fvfg: 2
sscz: 15
rdvd: 3
wpth: 2
mqsb: bzrz / llcf
brlj: 8
hhqg: 4
nbpj: 5
zmzl: 9
gplm: 2
vwhq: 4
pbwj: 11
srbm: 2
rjdr: 2
ndzg: hbpc * rffm
pqbp: stdt + qbsq
bwqb: hqhl * twpn
pdgr: lczz * tgng
fvzd: 13
qpmh: bbwc * qgnh
gshj: ppqj - qpmh
fcph: 5
jwzh: fdff * hplf
blbq: 2
qnzd: 4
dbhw: 15
zprj: 4
tgsq: 2
rcrp: qdbv + crnw
srhg: dcrb + ldwt
tlrd: dvwg * vfht
fngv: 4
gwfh: pcpc + snvc
mpsp: wbfd + gftn
gsmw: dngp + rwsm
fhqq: zwsf * qthv
vwsf: 3
cbnf: 1
bvfd: 11
qvfs: 6
jtzm: wbdp * fvhs
sllm: dcrc * wljn
tpfj: 6
fmvr: 4
rmqm: dvlz + nrsc
slps: fjmq * jqhs
rffm: wfpf * sjgq
rzmr: 2
hbzs: fddh * wjjn
fphq: vlzp + jmdp
gpqw: 5
cdlz: jvjr + vhtl
vsvg: bhnr * rszf
hmlg: 4
qvrl: qpmj * btdf
stqt: 3
zmpt: wczj + sptb
fqld: 3
mqtm: lpnd + tjht
ncjq: 19
hhbg: 14
pfdh: 2
vmpj: 2
gpwr: rlhd - bvsr
lpph: mflw - mhpt
msnd: vtnc / jqlz
qjfn: qqcb + lfqm
jhrr: 14
nlmn: gltc * sqhd
drjw: 2
smnp: 2
bhrz: 3
zrpq: 11
vvrs: 3
mgsr: 4
fqmv: 3
dhvn: 3
nslj: 2
rqsg: flgh * hvzd
mfnj: rpnd + vzhs
btwp: qdcd * lrcd
wqbm: wvbz * bmtd
wftp: 3
hwgc: 3
ntml: fwgq + cbmr
whqz: fjml * fznj
rpqr: 2
jwrd: 3
lmcm: qndt / qdgc
nchq: 2
dbbr: msnd - hgbs
rmqz: 2
pscc: vscm + gsmh
mqdt: wmdw * bgfh
bnpf: wlvp / vhgb
lnpc: fbjv * sjrd
ndgh: 17
mzwl: 3
zhcb: rsqc * cwsc
bqfz: qpvl + qrfq
jrwb: 5
gldw: jltd + zzjv
cdqb: bjbd + sbnr
lhfj: 3
jfbd: 11
ghdl: 3
pdbg: zjcr * wrvb
qdbv: 3
ccdn: 4
brgz: zmgq * vgtf
dvpd: 17
hgzw: 1
qzzb: wsfq * drdr
qbmr: 3
jvjr: ltzp * rjfv
lqbt: wnmf + lvct
hmlh: 2
wlhm: 2
nwdc: tvns * rfwd
tzvt: 7
pdsm: 2
qpvl: hqcg + bpbl
wrlr: 18
vzwq: dqtb * tzhj
vvbq: 3
spbq: 2
lmwg: 2
wcbj: 5
tmqv: 5
tvns: pgtl - hmql
fhlp: 6
smct: ddpp * dwmq
dtdc: grtn * fzds
vrhf: 7
jgfh: 10
rrst: 2
fhqm: zqfb + mldw
pzrm: 2
bjns: 8
vrgz: fbrq * vlqh
dfrp: 3
ffvb: 2
hptm: 7
wzsn: 3
bvhh: qhqc * crts
rmmn: dcgz * lnpc
rgdt: plvh * wwdw
pdgl: nztp * hzrn
lswd: 4
mzpl: 16
cvsr: tcbh + jpqm
gjzd: jfzn * cgnz
nspz: qdnb * nbgr
vvtg: srhg + qpdl
rfvc: 12
vdzm: vqrr * lhmj
bbsw: 2
zlrj: 2
gsfq: lvgd * rgzd
hwhq: rzqz * fvnd
rtjq: cnpp + hgzw
vmgw: 2
dqhj: thhw + pjtj
hjbn: tpzl * nttp
jfzn: hfzd + wljq
fzjb: cbzz + cftr
vpsv: cscd / gtjw
cgpq: pjcr + tbdr
wdnf: hhzw * fmms
mbhl: 3
pqdl: 3
jqjg: 5
zrsd: 2
mlbb: 4
snnf: 2
wlcb: 2
jpmd: dghl + btnj
hddf: vwds + fhrp
hgdw: 17
bhpr: 3
bbwh: fqbs + bjdn
gmgm: sdwv * vrdq
rtpp: wfrw * mtwj
zjrw: 7
trbr: 4
lhqr: fjsh * mjbv
pwzw: tfwt / nbts
fwgq: 1
stdt: vrbh * nvwn
gzsc: rpct + nzlr
zjwh: 3
ddpp: bfmp * dzsc
ztbh: 3
shdb: 2
sclj: 4
jdwj: ddlg + dgzl
zbnw: 1
mdhv: 13
dcnn: rlfw * zzbm
frbn: fqln + dfcr
qpdw: mnvd * hfnc
bbnc: wjmh - ldbf
fgfz: zbrv * zflr
llqq: 4
qhsp: 2
lrvh: 13
djht: 6
ghqf: hlzm - rscb
fmpt: 3
rnwh: humn - qpdw
fzpl: 2
pdpt: bbmh + mwwf
ddlc: ndzg * cdlz
fchh: nhsb + pwzw
tcdd: 3
stfd: 2
lsgc: bbnc + fjmw
rszs: 11
sgfv: 9
qvpl: 5
vzrt: ngps + vlwd
dqsq: cbzh + jvzs
hlgd: tnlv * ljnw
gdqj: 2
sqpc: 19
vdpv: bgtn + zprj
dmsp: 2
vmnb: gchs * jtzf
rgpw: wdjg + bbps
vfqj: vjqc + nwml
rszr: 4
prfb: 6
ldhz: grbp - dhtr
tgbj: tgmd * rhsn
twzw: rcht + pszh
cjmf: nmpz + hmwz
tgjj: 1
ggjd: 2
rwvp: 3
qndt: mbvv / ljwb
vpch: fmvr * gwzb
pjqw: fpzh + mvtw
wrdc: 7
djtl: sttq + hmcm
lwpw: tttg + bsmg
mrsz: cdmm + tfgw
qqmq: dbjv + qssh
zjcr: 8
mwdf: 6
sfbw: nwls - vfbg
rhsp: ndzq + hjqp
zvrr: fmnm + bvfd
jwsf: 3
mljs: 4
wjmh: zvgb + frfl
vgpb: hnzn - vmhw
tvmn: 3
jcbn: 16
mvgq: nlrf / nrps
qfvh: 1
hgsg: 3
hjmf: dmdd * tdsb
jjzm: 8
wphb: 2
pqtb: vnpf * qlvw
cftr: 1
lnhh: cvsr + gnjl
mchf: 2
jvvm: 11
vwms: ctfw + bjbf
gblh: 3
dvgt: pftp / qhsp
cdqs: hcrv * czwf
pzln: gznp * vlns
ppnc: 5
gcwr: rjhl * rwmf
qmvm: wjvr * shwp
ccbq: 5
gcgg: 15
zwjb: 13
vzfz: 5
jwcl: gzcg + jvsj
fdqr: 2
zfmj: 5
dnjs: pptw + ljmb
vjgb: dfrp * fmcl
pdvc: 4
wnqb: jlwl * dqmj
mnzf: 8
lspf: fzpl * jgfh
jwmm: thvn + bbhm
bhnr: 10
flht: jvlm * ggvn
wsdz: ljgd - fnvr
frlg: cvhw * mfpf
vwds: 2
qmsm: 8
qmlg: 4
rjhl: cttr + qghb
zsln: 13
wczh: srbt * fczr
jpwp: 13
mmfp: hqgd * rjtp
nrrf: 2
hlcz: wqbm * cjhm
rfrz: jjqq + ljqb
zmjt: vmlr + rdjr
scbg: mvmj + tvgj
pmgn: 2
bcjp: 2
szgm: dpzc + npzh
qcws: 5
qhqc: 19
ggjz: 15
prsc: wzjd + vfjl
jpfc: 2
rdgm: 13
dcfb: 14
rznp: 4
mhcs: zcpb - mzpq
mgvr: 17
lqww: 2
phls: qzwn / tvmd
hpcz: sfqb * flcf
crgp: 2
lfrl: tdff + btwp
clmw: fhqm * qldh
whlb: 2
hplf: mppm + cggl
qcbf: 5
jjcn: 2
trjj: grmp * zjwh
gtcr: qrwr + rqbf
bchg: pwwt / lcqm
ddjl: rjfc / bfqh
vhht: brfp + nnqc
wfdw: 4
jlwl: crgp * ljmm
tmjw: 7
mmss: 4
vscm: gbng * vrgc
zvdp: 2
llvl: 2
nmst: 15
djjp: rdng * vljz
qsqm: 3
ftjd: 3
pjtv: lnpj * pcfh
mfpf: 5
nvsn: 3
jgcg: tfqc + jbhc
mbzf: rrtd * fsnt
smrr: 7
wzjf: 5
lrrg: jwzh * cczm
jzpt: mrtg * lgzl
qpdt: 2
mlhc: gfdg * zrfz
dzvl: fdjv + prvb
vdnr: 2
snhn: 6
vtbd: 3
jjrv: lbzh * wtrd
fhjr: 2
fmmn: zzwq + lfzz
fvql: 7
dlzc: qhdt + lbsl
fhrp: 5
vshr: wvzc / mngb
nzgb: tbsj * wnbh
tfwt: bpjz - sllm
lwtc: 3
jqlz: 2
tcnr: 13
zmdb: 2
dhrt: rwps * vzrt
llmj: wzjm * qmsm
jvlh: wjhh * hqvt
jgnm: 2
dnqz: dhdr + qsrn
zlvf: shdb * dwhc
gctz: mnzs * mrsz
jlqc: mgbq + msmz
bjdn: pbql + qvjf
trzn: 2
vzwb: 3
rvsb: 5
qlrt: vmqm * ggjz
bvqs: 1
gcwj: 2
jlgs: 9
bqsv: mbhl * rwvp
gpcp: 5
bqdl: 2
vgmn: 4
lhbp: 2
hhsm: ntfz * cczj
cmnc: 9
dmdd: 8
dfmw: qswz + nlfl
qqjb: 2
zcdb: mldl + mzvt
bgtn: 9
drbn: 4
gdzt: frtn * hszr
glsw: qjmv / nchq
hngp: shqb + rcgn
dmtc: 5
lrwt: dqfr * gzsc
dnqc: nfmq + zqzg
shzl: 4
sstr: 8
fhlg: 4
pdch: 3
qpdl: nrgp / chvj
jscr: mmfp + vzwq
pthg: 7
zwqm: mhnn * gnjf
wfwb: 11
qrdf: sdff * gfjr
gdpg: 5
fmms: 4
jbfc: 2
qgbd: 8
gcfl: 3
pftp: ccdn + qrbv
jhhl: 2
wbdp: 3
rvns: 2
bbmh: qchv * nwhf
zfrz: gmll * nsnn
mthr: tpsn + vzfh
wbfd: 4
hgch: 6
lvfr: 12
nhmf: nwch * trzn
tbzq: bvhh + fbtr
vlnm: trfc * tqzr
qqfm: 5
fznj: nstv * zqlr
ssrg: 2
cdzr: 3
vffp: 5
hshm: 3
grmp: 3
nzdw: 5
nqlj: qjfn / wzsn
thdv: rnqp + wprs
vgwc: 1
mgbr: 3
qfwp: 2
mvfb: 6
nzgf: tjnj + mhpj
qrlh: dcfb / wtpq
pnwg: jqjg * mjtb
hfjf: cmdw + zpdn
ssln: fpfg * qvrl
nlwb: bqbd * ncjl
vcqp: 3
hjwq: cswd * tjrc
rvwv: 2
mhrw: 3
mgbq: npfq * zcbb
prbt: stdw + zcdr
sjlc: mmtw + zdwt
dhsg: dvwd + hvvs
nbwt: 13
ghqn: tlvm * lflv
hllh: 2
czds: 2
nsjg: 2
hmql: qqdl + trvq
tqcm: bwqb + phdd
sthb: zmjv * bncr
tdmw: ddss * pwmq
jzgm: 15
ztqj: 9
sjst: 11
tgzd: 9
gwdf: 4
jfwq: mchf * lzpm
zwdl: 2
tfhw: 3
qzfr: qlzv * mbzf
root: wgbd + rqsg
nqhh: 3
mblj: bvhz + nzgf
vppj: 9
qcqv: 2
wpvg: 2
hbrb: 15
vvdq: zrfd + fbmd
mqwv: 3
jcvc: 3
scsc: phvw + qvqw
gmrn: lvsj / gqsn
pngp: wjqg * tmjw
vdhj: 3
cjdv: 16
gctm: mqfd + rctj
vmpw: 3
ngps: dldp - tcfl
fnpq: tqcm * lzmr
tlnm: pglw * pbjl
vdcz: ddjl / nrpb
tgdr: 2
gdgr: 4
wbnd: sgzq / zdrv
rwps: 2
nrrg: gzhp / pqtz
dvlz: wpwm * qtjg
jcfg: 6
vgtf: 5
cvvl: 10
fmqp: nqhh * mfcp
pvvr: 2
vlqh: 2
fqff: 2
bfqh: 2
rplr: 1
dbvq: 2
wcrp: 4
qhns: 2
jhmp: cgqm * pvbs
nwnj: blmn + shzl
frvv: 4
qstb: 2
lhtm: 5
twdj: 2
mzsj: 5
qczc: dnfz / wphb
rhrr: 11
zvdr: 4
vbzt: qszc * rgqh
fzds: cdzr * nclm
lzmb: hgzp * zdjm
mvjf: vcbf + snhn
dnjn: qqnz * bhpr
rsjp: zgtf + gvjc
lbtz: wtdd * djht
lwrf: pdsm * vvpl
hmbt: 2
vmbp: hcnt * zdmf
dhjm: 3
dsfs: pwfl * srwf
rwmf: 2
jznp: jwtz - sdsc
djjh: fptm + hzhb
dsqp: sjlb - qqwj
fmbg: 1
scww: 10
lvgd: 2
bmbl: 7
hmcm: 7
dlnq: 5
cccj: 2
znmm: htvb * qhzm
dldp: vcnd + chtf
npfq: 6
bpfj: cnmp + rgpp
pdbv: bgdc * zrpq
znbh: 3
nbgr: wlwt * sjfv
jlhw: 6
wclj: 3
znmv: zzgd * jjvh
wzrw: ffzj - vcvn
jvnh: sgmz + cdjz
cmnw: zltt + rdgm
vvpl: 7
fjmw: zlrj * zvdr
bgsm: fgzt + bcph
cqch: prbt + dnqz
scjj: 2
btvd: dbnw + gcqz
jqvr: hvdh + hcqs
ggnz: 13
rsdc: dflp * bhrz
lcsg: 1
npmz: hgrd + hhmg
zzwm: pjbm + fbwh
chdw: 3
cswd: 3
dfgz: rhnt * rlrb
hjzl: 5
grht: glfp + hqtl
dljt: 5
qpcn: wnmz * shjg
srbr: rfrz * hvdn
hgzp: rmdd / dmsp
pfjn: phlr + nmhb
gmns: wlhm * znts
wzfv: ppmg * cqhm
qrgs: 3
mbjb: mqlg + hqft
clcl: dppp * tsdt
qthv: nrrf * vpgr
glfp: 3
nldw: mzgc + wptn
pqdg: 3
fdww: smlp / jpjq
sgdj: mqwv * rhlg
gbtg: bnds - pscc
nhlh: 3
rfds: 3
vdzg: wlbr + gsfq
svpj: hnhm + rjmg
ltzp: 5
lscc: 10
brbw: 2
tpzs: 4
mmll: 2
bcdv: 3
lbtn: 2
jdpw: rwtc * jcvc
tscz: 2
snhp: wcrp * hddf
fbmf: 1
jwft: 2
gvtp: gcwr / lflq
tpql: gslv + vpdj
jvwr: dbpd - jqps
sfcz: 3
wlvp: zrrq / gjlr
rlhd: dtmw + pdgl
bwft: 9
rcgn: zcdb * nhlh
zzcw: fjlf * lzbs
wjrz: dzvl + jvcn
vnfm: hjbn + wdwq
mncn: 5
scqr: lsdr * tpzs
clgf: 14
fhrt: zzvh + vzzr
msbh: fwgf * tplj
jghw: rvnh + pzln
djmm: 13
msww: ghnr + jpsj
wjdg: 20
jpjq: 2
tqjs: 2
hlzm: djjh * mdpq
gnqt: vrgz * ptqt
nlnv: 2
cdln: 2
htvb: 5
lbsl: lhjb * hwrn
tnwl: qldz / lswd
bbps: 3
nzbr: 13
dldc: 9
ljhb: mrpr + vbrl
zmfz: scww + ncjq
mmtw: ldnm * ghdl
htwn: 5
ztjv: wmjg + csrv
nfqv: hgdw - rdbb
mfcp: 2
zsfb: 11
vmjq: hhsm * jmpz
cpbm: 8
sthw: mgtl * rrgb
zmqm: zhcb + rtwr
cqht: tmlm + sqrr
vnvg: 3
dcrb: qnzd * wqtl
lbnq: jrwb + zdtn
hbvj: pnwg + qwpp
fsrf: 4
vljd: tjcv + rggq
rsqc: 3
dgrv: mvsd * qgnn
chvf: bmbl * cnmh
znrw: 12
znft: 5
vnzs: 2
lpnd: dtmt * lscc
vwzl: fdft * lhcg
dclg: dppt * dbsr
lhcg: 2
tqzr: 2
hzrn: shtj + zjnt
jhwz: 3
zrjs: bsds - sthb
nwtz: vmvm * gbzz
gwbm: rjqb + vgzf
zqnm: 2
nwcg: 5
rfwd: 5
zgff: 10
gcfg: 2
ttbp: 3
hnbj: 2
mwvm: 2
nwmg: jclw * zsln
rgdg: srhq * bhrd
zrwl: fdjg + gdzb
vmld: ntmt + fmqr
wmjg: zlsz * zzcw
pdgv: zjhc * gtfs
zzsw: 1
tfdb: 20
sgbm: 2
bpbl: hfmf * zjjn
trqs: 9
trvl: 17
crts: 2
fvnd: 2
bzzn: fdfr * znft
bprp: jjcm + gdzt
gtzv: 2
ltln: vgvj + gmgm
wtqb: ffsz * jhmz
cczm: 17
zjsp: 6
jzcz: 3
wzjd: 15
hndd: cccj * pqdg
wzjm: frqm + wjgl
fqln: rgpw + pvzs
hljd: ffjw + pdgr
zflr: 2
ldmq: rlrg * nvsn
hwrn: vfpp - tsrs
cvbs: fsqn + vfvs
gsmh: tdpg + vpch
czdv: dzwv * cgpq
svgt: lrzb * tfwd
jmfm: sgbm * dhjm
fglw: bsgt + vnhg
ddww: 9
pjqz: zhhf * rtfz
gwzb: 6
qmjf: jlhm + wzgc
fdjg: rsdc * wlpv
bsmg: 17
sqhq: cdpw + zgff
zltt: nmst + prwt
wffn: vnfm * tcbt
ftzh: vnjm * schb
mzpd: pdps + nzsf
tnlv: 19
wwmj: hcpj + jcbn
qvqw: 8
snsq: zgrr * ltql
cmfb: npmz / lhtm
llwq: 6
ljgd: gfdv + hrnl
cfjh: jvcq * qptv
bttt: 2
lfnl: bgcm - hwnf
hqcg: qvvw * qjtv
mtwj: wjvt + qzzb
qswz: qjtz + fsjw
fcjn: 5
phlr: jvjf * mnzf
cbbc: 2
mzgc: mrfh + rgdt
hbpc: fzjb * fqth
tmlm: brqj + brqr
vfbg: pnpf + lbzm
hqvt: 2
lpmp: 2
zdnp: 5
ptqt: tgsc + ttsm
wlwt: btcl + tbnn
hvrt: 11
rvdt: 2
ffhv: 2
lcjn: lbtn * fphq
zmtw: 2
wgdv: 3
vdwc: fgmz * zmzl
cggl: mwzh + djjl
dngp: 10
nvwn: 4
sddd: tgsq * ccqs
jclw: fpmh - dnml
wmdw: 2
hvgr: 2
wnmf: 20
smlp: gpqw + bdqh
zflc: 2
lrzb: zrwv * bcrq
gfdg: 3
rjtp: 7
nmpz: qfjp + znmv
gnnp: vwzl + czdv
mnzs: 3
lhjb: 2
tqgp: fgfz * tfhw
hqjv: 3
chtf: nzbj * nvtq
csdj: zqlm + ldmq
zwwr: 2
qfbm: qszn * slmc
bvdf: 10
qcpr: 2
cfzq: fdgz + jcpr
crzb: tpsg / rsdz
mldl: 4
mhnn: 7
qrms: zpqz + slmn
zjhc: 2
tbfd: dpzb + vvdq
qnzm: jgbq + sngv
jgbq: hbnt * whsz
blbw: 6
vhtl: gvsc * fnlt
zdjg: glpd + hgsg
pqnw: 2
pszh: 5
jhmj: 2
qdcd: 3
rtrq: tmqv * zmfz
blgt: 12
zfgn: 4
tdpp: 3
wzvv: cbnf + pqjw
mjbv: 7
lbcm: qrnd * dqvs
vjhl: 9
gjnv: 7
bqbd: 3
bfmp: 2
dhtr: 11
mscg: 4
jrfv: mbnl + mljs
rrqw: 6
zfbg: 2
wnsh: 6
cblb: rdrw * qsrr
dhvq: rmgz * drzl
nfmq: wclj * dlzc
tbnz: 6
bqww: mdhv + sdtq
tcbt: 4
dnjf: rmqz * bpfj
vlns: 7
hzqb: dhrt * svgt
fzqq: fjfl * cvmb
mbvv: qbdz * cnsd
hcrv: 3
wvdp: 2
fbfb: 15
mpsv: rlrm - qqmn
grtn: hbcn + jhmd
btjw: thrg + gnsv
rrtd: 2
cgqz: zmqm * gcfl
rgzj: ftzh - stdd
gwgf: hzqb + rsjp
vgzf: gqll + sczl
gdpp: nflg * fmmn
nflg: 7
gcdc: 2
lvct: wlwh * rdvd
bsvl: zwjb + qlrt
nltn: 3
vmqm: 2
gqwq: 3
lsdp: vcsv / bzmt
ghwj: 5
rnqp: 10
czth: 4
lrpc: 2
wcmm: 18
pwmq: rthz + hcll
mnhz: czth * tnrq
pjbm: 1
fznm: 20
zdtn: sclj * pjqz
zpvh: csdj + vdzm
zjsw: 6
ffgm: lhqr / mnhz
prvb: 3
zcbb: 17
gjlr: 7
mvvr: 2
wprs: 1
zfpj: 3
dqgf: 3
fgmz: 6
fhpt: 5
bqwh: hzjs * wjlt
wlwh: dlnq + tgdr
bncr: 3
tbsj: 7
rdng: 3
drtg: dddp / rvns
vfvs: lvzp * vvsg
lszh: cjcf + wftp
bvlr: 3
lflq: 2
mwzh: 1
dnml: 2
sttq: 1
gznp: 3
wlfl: lmcm - fcjn
pcfh: 5
csrv: zdjg * szgm
zfzn: 11
hqtc: tlgn * tqjc
shqb: pqzp - rnjn
flwb: jlgs * mlbm
vzzr: 5
dsbl: 2
fvhh: 5
tgsc: 5
htdl: vqls * nwcg
bfpz: ndrt + ljbw
qwbz: cmfb * mvvz
bwdm: 1
mqvs: 4
dgtr: 2
thml: ggnz * qmvw
hvjf: 3
ghzt: dztv * fhdp
qghb: 5
cqjc: lrlp * vgmn
dqvs: 3
qjhs: 11
hfmf: 8
hbqn: lfsj * tzws
nvpt: 3
lgzl: 2
rqnr: llbr * mbtp
rpnd: 13
hqtl: 20
hjmc: ghwj * zvdp
vzhs: dfwj * sppd
qgjb: 2
mqrg: frvv * wlvq
gnwb: 2
gshm: 2
ldzw: jlhw + gqsp
qwhd: 7
btcl: 12
nbts: 4
hbcn: 3
jgfc: ghzt + wtjh
wpdw: cgsq + lntd
fptm: ncpr / jmmb
vmvm: 3
hcnt: 4
ltql: znmm / drqd
qpmj: 7
dzsc: rcsd + lwdc
qlzv: 4
pznc: pjqw + zfvg
bmtd: 5
hnzn: zbrc * cfzq
lgdv: jsss * jjgq
sczl: rnwh * vjlb
ggjq: 4
wshb: 3
nzcw: 3
jsss: 14
mrtg: bbsw * mzpd
cbzz: tbcl + hlhw
vtnz: hbfq * vzwb
bmpz: frvj + nqrv
stdw: fvzd * mpsp
ltgv: bfsn * gtmm
mzpq: djmm * nwtn
vpgr: dqmt / ffvb
lwtd: 3
vjqc: 1
mrbs: 2
jmrj: 4
cgmt: snhp + bvlr
fgmm: vqrs + vhnp
hjqp: tsfn * gfvc
zjjn: 20
sjlf: hljd * dgtr
tnrq: 2
frvj: 3
rggq: jpnd + znrw
lwdc: bgfv / hqjd
vbzr: 12
sppd: 3
rqnn: 2
rhbn: 3
rnpg: 2
hrcn: qzgt * wjdg
nsrf: 2
zhzg: ffgm * srtg
nsmz: hqjv * nslj
bjbd: pnlp / vnlh
hcfv: sthw * lrfj
qghw: qstb * trht
brqj: wvdp * hhbg
wcgm: 3
vcvn: 19
dzwv: 7
brqr: tqgp / hcqp
vqls: 5
stdd: 3
ldtz: 2
vtpw: cnrm * nwlg
pptw: 13
fczr: 3
cbmr: 6
fgbv: 3
nmhb: dnjf + fvbf
clvj: 2
ndpr: znzc * fdqr
btdf: htls + qrms
wlhz: 8
fpzn: cvbs + mntb
zzwq: ncgf * rtsb
gpss: 7
jntf: 3
dvvw: vmbp + twjb
jpmn: nldw * vlfb
wdwq: dclg * jjqz
vmhw: 16
cbjm: dtdw * ntpm
qssn: 9
phnc: 18
wrvb: 8
gfgg: 5
zqzg: pbqr + pdgv
pjcr: prqf + mthr
rpct: jvvm * mfvr
gfmv: cdqz / cjmt
gfvc: tcdd * cncs
chhz: 1
rhsn: zbnw + rzcw
lpsq: 14
zgrr: 19
gbdb: mstm * gmns
dqnt: gtcr - ttlc
dqmt: vngt * zgwz
rprh: 10
cwbn: dbtd + slps
mqfd: 3
fbbf: 4
ntqv: zzsw + mqss
mvsd: 2
dlgz: jfbd + nftc
wptn: qdrj * gnnp
nrsc: dcms + pvsc
cmqn: 10
ppmg: hzzp + slmm
gzcg: znrr + zmdq
lvms: tssn + cjmf
hgst: 5
gvsc: ddjw * pdch
qdfn: 5
tgng: tzld * hvgr
nnnv: 3
zgwz: 2
fprd: 3
dgzl: zvhr + vlfn
shpm: cnzt / plqt
fnlt: nzcw * fqtw
wzpg: qssn * zqnb
lwsn: 4
lsdr: jhmj * pcgl
gtbj: nmhp + jdmq
zqfb: lgnm + gmds
ntmt: 11
tnll: vmpw * fngv
wpwm: 5
qqst: 2
nrps: 5
qgqd: qgbd + twzw
crjv: 7
wjqg: 2
zzll: wqmt * llqq
tttg: 14
tlwh: 2
lprc: 17
qdml: 6
lzpm: cwjr * wvcs
qrnd: dqsq * zqnm
qqtl: crzs * sclz
hffv: 4
fdhw: 3
rjfv: btjw + lvms
rlrb: 5
sldm: 6
twjb: 1
dtsq: 16
bvsr: gnwf + hcdv
wvzc: rdlg * sqhq
sclz: 6
vzsp: cmnw + qqtl
srtp: 6
tdff: ldtz * pwpv
zqlm: 5
srbt: 2
llmr: gczv + nzcg
bbgp: drjw * bhrs
hswb: wfdw * tbsp
hzhb: swwz - dqnt
dcms: zcpz - lqbt
frcp: gfgg * zsql
fffn: 16
jlzd: 3
hfmp: dbvq * zsfb
cdlg: 9
pcph: jgfc * jqvr
sqrr: fdcp * brlj
gcqz: rprh * mfnj
vfht: 3
hvzd: rszr * dvgt
nrmd: 5
nmzl: 18
lwhr: 5
drnz: trbj / nnhc
nfqq: 3
zbrc: 3
hsbd: 7
bnlt: mgsg * gjzd
ccqb: qtsm + mhcs
rdlg: 7
wljq: 2
dppt: hrcn + lrwt
zqhw: 3
bnds: sgpd * pdbg
brfp: cbtb * mzvs
gnjf: 3
fnfr: 2
thzm: nqrh * cmsg
lflv: 3
mghc: 3
ddpc: wlbn + fscq
zjwl: 2
vmfl: bqwb * mwdf
cvbl: drbd + gqgp
lvsj: mcgh - hgrq
brdv: nfsl * lngl
hbjm: vnzs * bhzq
tzll: 18
sgvw: 10
vnjm: jmvn * lhfj
dfjv: cdqb / sctl
rlrm: vvtg * gtzf
mftt: 3
qdgc: 2
nbwq: 2
hqft: 16
tczf: mbjb / ssrg
qchv: 6
shdv: fdww + clcl
zvwq: zfbg * zfzn
tcbh: nghz * wjrz
blcq: 7
cdpw: jhbb * trjj
jrdv: 11
qhdt: zfmj + vmjq
fsvm: 1
bhrd: 2
nqrh: wdnf * mghc
qzhb: 3
vbvw: bprp - zvhw
bsds: rtpp * bhdc
jmpz: 3
fscq: tdpp * zwqm
dghl: 4
fccp: dmtc * jhmp
nllv: bqfz / mftt
fmnm: 2
qmvw: 7
cjhm: thdv * jjcn
vrsd: 3
ddhd: lzft * mmjg
bhrs: 3
dgvb: srbj * dfmw
sngv: 1
nwls: pqbg * ncfh
ndzq: 4
qvjf: 4
nlzl: twjr + wnsh
vfjl: hvgh * vsts
stzc: hllh * zvsh
qftz: 4
cljf: 4
cgsq: hpvw + dbbr
sqhd: 4
tzhj: 2
ggvn: nscv + drtg
fvfp: 3
cwjr: 2
zcpb: fnpq + ctsw
fwgf: 3
nstv: 3
bgdc: 3
vnml: 18
tcfc: 9
vbhz: cqht * vcfl
rnjn: 4
frqm: 12
hwsw: 2
bwtd: 4
jfzm: wcmm * tpfj
bncn: 10
znrr: 1
rscb: mpsv + dbfz
lwdw: zdqp * gcfg
zrwv: 3
llbr: 11
tssn: fgmm * thml
nfmm: 2
gjlp: 5
tdsb: 4
fpmg: wpvg * fbjq
qgjm: tvlf + qrlb
hfnc: tmgd + qmvm
mvvz: 2
rmdd: dtdc + vdpv
wwpc: fffn + zdnp
vcnd: 2
ncgf: 3
dwhc: 4
vtwr: sjlf / wngb
bzgd: dfnr * stfd
zwjf: 13
bfzw: 4
zqlr: 9
pbqr: gjzs + dzpb
ppqj: bqwr + rsll
qtfs: 3
dvrg: rqcn * fccp
dlfh: pcph - jrqd
hqhl: gshm * blcq
zdrv: 4
bhzq: 4
dbpd: pgtd * wqdb
dwmq: 6
fwjt: 5
qcvz: 7
flcf: sqpc + lrpc
shwp: 4
gjwt: hfqz * cbbc
bqwb: gshj - tpgm
svhb: mmcd * sjvs
gjfm: gvsl / sstr
gtzf: 2
lwsq: dfjv * gcdc
twdn: 11
vngt: chls + ntqv
hppw: 8
jcjj: 5
gzhp: nwdc - vrst
spln: jbbc + tzll
jhbb: 3
bfrv: rwgf * cwgf
dbcb: 2
wtpq: 2
fcbr: 7
pqvh: vqzj * pdvc
nnhc: 2
cmtt: wzjf * jqct
lczz: 2
cdtn: 9
hszr: jmbh + qzhb
srnp: qjbh + lwnc
rtwr: wbvc * wtmc
mgtl: 3
nvtq: 7
pwwt: vtwr * fvql
pnpf: slwj + bggm
vpdj: gtpw / qhns
pwfl: 3
qdlm: 2
vsnw: pqcd * lwsn
gqgp: vctw * lwtd
ldwt: nzdw * frbn
scvs: 6
qtsm: gglj - dsfl
msmz: 1
zvsh: 16
zdmq: 2
frtn: 3
mzvt: cwmr + jmrj
cvld: nzss * qqjb
mjcw: qtln * fvcl";

    Dictionary<string, object> vars = new();
    data.Replace("\r", "").Split("\n").ToList().ForEach(line => {
        switch (line) {
            case var s when Regex.Match(s, "(?<name>[a-z]+): (?<left>[a-z]+) (?<op>[+\\-*/]) (?<right>[a-z]+)") is Match { Success: true } m: {
                    var name = m.Groups["name"].Value;
                    var left = m.Groups["left"].Value;
                    var op = m.Groups["op"].Value;
                    var right = m.Groups["right"].Value;
                    vars[name] = (left, op, right);
                    break;
                }
            case var s when Regex.Match(s, "(?<name>[a-z]+): (?<val>[0-9]+)") is Match { Success: true } m: {
                    var name = m.Groups["name"].Value;
                    var val = long.Parse(m.Groups["val"].Value);
                    vars[name] = val;
                    break;
                }
        }
    });

    Console.WriteLine(resolve("root"));
    long resolve(string v) {

        switch (vars[v]) {
            case long i: return i;
            case (string left, string op, string right):
                var l = resolve(left);
                var r = resolve(right);
                //Console.WriteLine($"{v} = {left} {op} {right} = {l} {op} {r}");
                return op switch {
                    "+" => l + r,
                    "-" => l - r,
                    "*" => l * r,
                    "/" => l / r
                };
            case var other: throw new Exception($"Unknown value {other}");
        }
    }

    var (left, _, right) = ((string, string, string)) vars["root"];
    vars["humn"] = 0L;
    var (l, r) = (resolve(left), resolve(right));
    while(l != r) {
        Console.WriteLine($"humn = {(long)vars["humn"]}");
        Console.WriteLine($"{l} != {r}");

        vars["humn"] = long.Parse(Console.ReadLine());

        (l, r) = (resolve(left), resolve(right));
    }
    Console.WriteLine($"{l} == {r}");

}

p16();


interface Inode {
    int size { get; }
}
record File(int size) : Inode {

}
record Dir(string path) : Inode {
    public Dir parent = null;
    public Dictionary<string, Inode> contents = new();

    public int size => contents.Values.Sum(v => v.size);

    public IEnumerable<Dir> GetDirs() {
        if(size <= 100000) {
            yield return this;
        }
        foreach(var dir in contents.Values.OfType<Dir>().SelectMany(d => d.GetDirs())) {
            yield return dir;
        }
    }
    public IEnumerable<Dir> GetTree() {
        yield return this;
        foreach (var dir in contents.Values.OfType<Dir>().SelectMany(d => d.GetTree())) {
            yield return dir;
        }
    }
}

static class A {
    public static IEnumerable<(T, T, T)> Chunk<T>(this T[] t) {
        for(int i = 0; i < t.Length; i += 3) {
            yield return (t[i], t[i+1], t[i+2]);
        }
        yield break;
    }
    public static bool Covers(this Range a, Range b) =>
        a.Start.Value <= b.Start.Value && a.End.Value >= b.End.Value;
    public static bool IsClear(this Range a, Range b) =>
        a.End.Value <= b.Start.Value;
    public static Range ParseRange(this string s) {
        var parts = s.Split("-");
        return int.Parse(parts[0])..(int.Parse(parts[1]) + 1);
    }
    public static IEnumerable<int> ToRange(this string s) {
        var parts = s.Split("-");
        var start = int.Parse(parts[0]);
        return Enumerable.Range(start, int.Parse(parts[1]) - start + 1);
    }

    public static void Deconstruct<T>(this T[] items, out T t0, out T t1) {
        t0 = items.Length > 0 ? items[0] : default(T);
        t1 = items.Length > 1 ? items[1] : default(T);
    }
}